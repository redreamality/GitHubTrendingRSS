<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="data:text/xsl;base64,"?>
<rss version="2.0">
  <channel>
    <title>GitHub C Daily Trending</title>
    <description>Daily Trending of C in GitHub</description>
    <pubDate>Sat, 29 Mar 2025 02:23:14 GMT</pubDate>
    <link>http://redreamality.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>zinongli/KeyCopier</title>
      <link>https://github.com/zinongli/KeyCopier</link>
      <description>&lt;p&gt;Key Copier App for Flipper Zero&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Key Copier App&lt;/h1&gt; 
&lt;p&gt;A Flipper Zero app for measuring key bitting patterns.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The best way to install the latest build would be download it from Flipper Zero&#39;s Official App Store: &lt;a href=&quot;https://lab.flipper.net/apps/key_copier&quot;&gt;https://lab.flipper.net/apps/key_copier&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Instruction&lt;/h2&gt; 
&lt;p&gt;To measure your key:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Place it on top of the screen.&lt;/li&gt; 
 &lt;li&gt;Use the contour to align your key.&lt;/li&gt; 
 &lt;li&gt;Adjust each pin&#39;s depth until they match. It&#39;s easier if you look with one eye closed.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thank &lt;a href=&quot;https://github.com/jamisonderek&quot;&gt;@jamisonderek&lt;/a&gt; for his &lt;a href=&quot;https://github.com/jamisonderek/flipper-zero-tutorials&quot;&gt;Flipper Zero Tutorial repository&lt;/a&gt; and &lt;a href=&quot;https://github.com/jamisonderek/flipper-zero-tutorials#:~:text=YouTube%3A%20%40MrDerekJamison&quot;&gt;YouTube channel&lt;/a&gt;! This app is built with his Skeleton App and GPIO Wiegand app as references.&lt;/li&gt; 
 &lt;li&gt;Thank &lt;a href=&quot;https://github.com/HonestLocksmith&quot;&gt;@HonestLocksmith&lt;/a&gt; for PR #13 and #20. TONS of new key formats and supports for DOUBLE-SIDED keys are added. We have car keys now!&lt;/li&gt; 
 &lt;li&gt;Hey! We are on &lt;a href=&quot;https://youtu.be/c8q2YVRiOAE?t=485&quot;&gt;Adam Savage&#39;s show&lt;/a&gt;! Thanks for featuring my app!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.com/channels/1112390971250974782/1264067969634402356&quot;&gt;Project channel&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>iovisor/bcc</title>
      <link>https://github.com/iovisor/bcc</link>
      <description>&lt;p&gt;BCC - Tools for BPF-based Linux IO analysis, networking, monitoring, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/images/logo2.png&quot; alt=&quot;BCC Logo&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;BPF Compiler Collection (BCC)&lt;/h1&gt; 
&lt;p&gt;BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1 and above.&lt;/p&gt; 
&lt;p&gt;eBPF was &lt;a href=&quot;https://lkml.org/lkml/2015/4/14/232&quot;&gt;described by&lt;/a&gt; Ingo Molnár as:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;One of the more interesting features in this cycle is the ability to attach eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to kprobes. This allows user-defined instrumentation on a live kernel image that can never crash, hang or interfere with the kernel negatively.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;BCC makes BPF programs easier to write, with kernel instrumentation in C (and includes a C wrapper around LLVM), and front-ends in Python and lua. It is suited for many tasks, including performance analysis and network traffic control.&lt;/p&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;p&gt;This example traces a disk I/O kernel function, and populates an in-kernel power-of-2 histogram of the I/O size. For efficiency, only the histogram summary is returned to user-level.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Shell&quot;&gt;# ./bitehist.py
Tracing... Hit Ctrl-C to end.
^C
     kbytes          : count     distribution
       0 -&amp;gt; 1        : 3        |                                      |
       2 -&amp;gt; 3        : 0        |                                      |
       4 -&amp;gt; 7        : 211      |**********                            |
       8 -&amp;gt; 15       : 0        |                                      |
      16 -&amp;gt; 31       : 0        |                                      |
      32 -&amp;gt; 63       : 0        |                                      |
      64 -&amp;gt; 127      : 1        |                                      |
     128 -&amp;gt; 255      : 800      |**************************************|
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above output shows a bimodal distribution, where the largest mode of 800 I/O was between 128 and 255 Kbytes in size.&lt;/p&gt; 
&lt;p&gt;See the source: &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&quot;&gt;bitehist.py&lt;/a&gt;. What this traces, what this stores, and how the data is presented, can be entirely customized. This shows only some of many possible capabilities.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/INSTALL.md&quot;&gt;INSTALL.md&lt;/a&gt; for installation steps on your platform.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/FAQ.txt&quot;&gt;FAQ.txt&lt;/a&gt; for the most common troubleshoot questions.&lt;/p&gt; 
&lt;h2&gt;Reference guide&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/docs/reference_guide.md&quot;&gt;docs/reference_guide.md&lt;/a&gt; for the reference guide to the bcc and bcc/BPF APIs.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;p&gt;Some of these are single files that contain both C and Python, others have a pair of .c and .py files, and some are directories of files.&lt;/p&gt; 
&lt;h3&gt;Tracing&lt;/h3&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&quot;&gt;bitehist.py&lt;/a&gt;: Block I/O size histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop.py&quot;&gt;disksnoop.py&lt;/a&gt;: Trace block device I/O latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/hello_world.py&quot;&gt;hello_world.py&lt;/a&gt;: Prints &quot;Hello, World!&quot; for new processes.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query.py&quot;&gt;mysqld_query.py&lt;/a&gt;: Trace MySQL server queries using USDT probes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server.py&quot;&gt;nodejs_http_server.py&lt;/a&gt;: Trace Node.js HTTP server requests using USDT probes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop.py&quot;&gt;stacksnoop&lt;/a&gt;: Trace a kernel function and print all kernel stack traces. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop.py&quot;&gt;statsnoop&lt;/a&gt;: Trace stat() syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/task_switch.py&quot;&gt;task_switch.py&lt;/a&gt;: Count task switches with from and to PIDs.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect.py&quot;&gt;tcpv4connect.py&lt;/a&gt;: Trace TCP IPv4 active connections. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/trace_fields.py&quot;&gt;trace_fields.py&lt;/a&gt;: Simple example of printing fields from traced events.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump.py&quot;&gt;undump.py&lt;/a&gt;: Dump UNIX socket packets. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread.py&quot;&gt;urandomread.py&lt;/a&gt;: A kernel tracepoint example, which traces random:urandom_read. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.py&quot;&gt;vfsreadlat.py&lt;/a&gt; examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.c&quot;&gt;vfsreadlat.c&lt;/a&gt;: VFS read latency distribution. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;examples/tracing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.py&quot;&gt;kvm_hypercall.py&lt;/a&gt;: Conditional static kernel tracepoints for KVM entry, exit and hypercall &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Tools&lt;/h4&gt; 
&lt;center&gt;
 &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&quot; border=&quot;0&quot; width=&quot;700&quot;&gt;&lt;/a&gt;
&lt;/center&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist.py&quot;&gt;argdist&lt;/a&gt;: Display function parameter values as a histogram or frequency count. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline.py&quot;&gt;bashreadline&lt;/a&gt;: Print entered bash commands system wide. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist.py&quot;&gt;bpflist&lt;/a&gt;: Display processes with active BPF programs and maps. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable.py&quot;&gt;capable&lt;/a&gt;: Trace security capability checks. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop.py&quot;&gt;compactsnoop&lt;/a&gt;: Trace compact zone events with PID and latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat.py&quot;&gt;criticalstat&lt;/a&gt;: Trace and report long atomic critical sections in the kernel. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock.py&quot;&gt;deadlock&lt;/a&gt;: Detect potential deadlocks on a running process. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop.py&quot;&gt;drsnoop&lt;/a&gt;: Trace direct reclaim events with PID and latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount.py&quot;&gt;funccount&lt;/a&gt;: Count kernel function calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject.py&quot;&gt;inject&lt;/a&gt;: Targeted error injection with call chain and predicates &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat.py&quot;&gt;klockstat&lt;/a&gt;: Traces kernel mutex lock events and display locks statistics. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop.py&quot;&gt;opensnoop&lt;/a&gt;: Trace open() syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead.py&quot;&gt;readahead&lt;/a&gt;: Show performance of read-ahead cache &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace.sh&quot;&gt;reset-trace&lt;/a&gt;: Reset the state of tracing. Maintenance tool only. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount.py&quot;&gt;stackcount&lt;/a&gt;: Count kernel function calls and their stack traces. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop.py&quot;&gt;syncsnoop&lt;/a&gt;: Trace sync() syscall. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop.py&quot;&gt;threadsnoop&lt;/a&gt;: List new thread creation. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist.py&quot;&gt;tplist&lt;/a&gt;: Display kernel tracepoints or USDT probes and their formats. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace.py&quot;&gt;trace&lt;/a&gt;: Trace arbitrary functions, with filters. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop.py&quot;&gt;ttysnoop&lt;/a&gt;: Watch live output from a tty or pts device. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls.py&quot;&gt;ucalls&lt;/a&gt;: Summarize method calls or Linux syscalls in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow.py&quot;&gt;uflow&lt;/a&gt;: Print a method flow graph in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc.py&quot;&gt;ugc&lt;/a&gt;: Trace garbage collection events in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew.py&quot;&gt;uobjnew&lt;/a&gt;: Summarize object allocation events by object type and number of bytes allocated. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat.py&quot;&gt;ustat&lt;/a&gt;: Collect events such as GCs, thread creations, object allocations, exceptions and more in high-level languages. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads.py&quot;&gt;uthreads&lt;/a&gt;: Trace thread creation events in Java and raw pthreads. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Memory and Process Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop.py&quot;&gt;execsnoop&lt;/a&gt;: Trace new processes via exec() syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop.py&quot;&gt;exitsnoop&lt;/a&gt;: Trace process termination (exit and fatal signals). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop.py&quot;&gt;killsnoop&lt;/a&gt;: Trace signals issued by the kill() syscall. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit.py&quot;&gt;kvmexit&lt;/a&gt;: Display the exit_reason and its statistics of each vm exit. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak.py&quot;&gt;memleak&lt;/a&gt;: Display outstanding memory allocations to find memory leaks. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/numasched.py&quot;&gt;numasched&lt;/a&gt;: Track the migration of processes between NUMAs. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/numasched_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill.py&quot;&gt;oomkill&lt;/a&gt;: Trace the out-of-memory (OOM) killer. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec.py&quot;&gt;pidpersec&lt;/a&gt;: Count new processes (via fork). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/rdmaucma.py&quot;&gt;rdmaucma&lt;/a&gt;: Trace RDMA Userspace Connection Manager Access events. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/rdmaucma_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop.py&quot;&gt;shmsnoop&lt;/a&gt;: Trace System V shared memory syscalls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop.py&quot;&gt;slabratetop&lt;/a&gt;: Kernel SLAB/SLUB memory cache allocation rate top. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Performance and Time Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower.py&quot;&gt;dbslower&lt;/a&gt;: Trace MySQL/PostgreSQL queries slower than a threshold. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat.py&quot;&gt;dbstat&lt;/a&gt;: Summarize MySQL/PostgreSQL query latency as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval.py&quot;&gt;funcinterval&lt;/a&gt;: Time interval between the same function as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency.py&quot;&gt;funclatency&lt;/a&gt;: Time functions and show their latency distribution. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower.py&quot;&gt;funcslower&lt;/a&gt;: Trace slow kernel or user function calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs.py&quot;&gt;hardirqs&lt;/a&gt;: Measure hard IRQ (hard interrupt) event time. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower.py&quot;&gt;mysqld_qslower&lt;/a&gt;: Trace MySQL server queries slower than a threshold. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ppchcalls.py&quot;&gt;ppchcalls&lt;/a&gt;: Summarize ppc hcall counts and latencies. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ppchcalls_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs.py&quot;&gt;softirqs&lt;/a&gt;: Measure soft IRQ (soft interrupt) event time. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount.py&quot;&gt;syscount&lt;/a&gt;: Summarize syscall counts and latencies. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;CPU and Scheduler Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist.py&quot;&gt;cpudist&lt;/a&gt;: Summarize on- and off-CPU time per task as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed.py&quot;&gt;cpuunclaimed&lt;/a&gt;: Sample CPU run queues and calculate unclaimed idle CPU. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed_example.txt&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat.py&quot;&gt;llcstat&lt;/a&gt;: Summarize CPU cache references and misses by process. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime.py&quot;&gt;offcputime&lt;/a&gt;: Summarize off-CPU time by kernel stack trace. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime.py&quot;&gt;offwaketime&lt;/a&gt;: Summarize blocked time by kernel off-CPU stack and waker stack. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile.py&quot;&gt;profile&lt;/a&gt;: Profile CPU usage by sampling stack traces at a timed interval. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat.py&quot;&gt;runqlat&lt;/a&gt;: Run queue (scheduler) latency as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen.py&quot;&gt;runqlen&lt;/a&gt;: Run queue length as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower.py&quot;&gt;runqslower&lt;/a&gt;: Trace long process scheduling delays. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime.py&quot;&gt;wakeuptime&lt;/a&gt;: Summarize sleep to wakeup time by waker kernel stack. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wqlat.py&quot;&gt;wqlat&lt;/a&gt;: Summarize work waiting latency on workqueue. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wqlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Network and Sockets Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency.py&quot;&gt;gethostlatency&lt;/a&gt;: Show latency for getaddrinfo/gethostbyname[2] calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop.py&quot;&gt;bindsnoop&lt;/a&gt;: Trace IPv4 and IPv6 bind() system calls (bind()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.py&quot;&gt;netqtop&lt;/a&gt; tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.c&quot;&gt;netqtop.c&lt;/a&gt;: Trace and display packets distribution on NIC queues. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop.py&quot;&gt;sofdsnoop&lt;/a&gt;: Trace FDs passed through unix sockets. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten.py&quot;&gt;solisten&lt;/a&gt;: Trace TCP socket listen. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff.py&quot;&gt;sslsniff&lt;/a&gt;: Sniff OpenSSL written and readed data. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept.py&quot;&gt;tcpaccept&lt;/a&gt;: Trace TCP passive connections (accept()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect.py&quot;&gt;tcpconnect&lt;/a&gt;: Trace TCP active connections (connect()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat.py&quot;&gt;tcpconnlat&lt;/a&gt;: Trace TCP active connection latency (connect()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop.py&quot;&gt;tcpdrop&lt;/a&gt;: Trace kernel-based TCP packet drops with details. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife.py&quot;&gt;tcplife&lt;/a&gt;: Trace TCP sessions and summarize lifespan. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans.py&quot;&gt;tcpretrans&lt;/a&gt;: Trace TCP retransmits and TLPs. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt.py&quot;&gt;tcprtt&lt;/a&gt;: Trace TCP round trip time. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates.py&quot;&gt;tcpstates&lt;/a&gt;: Trace TCP session state changes with durations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet.py&quot;&gt;tcpsubnet&lt;/a&gt;: Summarize and aggregate TCP send by subnet. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl.py&quot;&gt;tcpsynbl&lt;/a&gt;: Show TCP SYN backlog. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop.py&quot;&gt;tcptop&lt;/a&gt;: Summarize TCP send/recv throughput by host. Top for TCP. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer.py&quot;&gt;tcptracer&lt;/a&gt;: Trace TCP established connections (connect(), accept(), close()). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong.py&quot;&gt;tcpcong&lt;/a&gt;: Trace TCP socket congestion control status duration. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Storage and Filesystems Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize.py&quot;&gt;bitesize&lt;/a&gt;: Show per process I/O size histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat.py&quot;&gt;cachestat&lt;/a&gt;: Trace page cache hit/miss ratio. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop.py&quot;&gt;cachetop&lt;/a&gt;: Trace page cache hit/miss ratio by processes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop.py&quot;&gt;dcsnoop&lt;/a&gt;: Trace directory entry cache (dcache) lookups. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat.py&quot;&gt;dcstat&lt;/a&gt;: Directory entry cache (dcache) stats. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency.py&quot;&gt;biolatency&lt;/a&gt;: Summarize block device I/O latency as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop.py&quot;&gt;biotop&lt;/a&gt;: Top for disks: Summarize block device I/O by process. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern.py&quot;&gt;biopattern&lt;/a&gt;: Identify random/sequential disk access patterns. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop.py&quot;&gt;biosnoop&lt;/a&gt;: Trace block device I/O with PID and latency. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop.py&quot;&gt;dirtop&lt;/a&gt;: File reads and writes by directory. Top for directories. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife.py&quot;&gt;filelife&lt;/a&gt;: Trace the lifespan of short-lived files. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filegone.py&quot;&gt;filegone&lt;/a&gt;: Trace why file gone (deleted or renamed). &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filegone_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower.py&quot;&gt;fileslower&lt;/a&gt;: Trace slow synchronous file reads and writes. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop.py&quot;&gt;filetop&lt;/a&gt;: File reads and writes by filename and process. Top for files. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush.py&quot;&gt;mdflush&lt;/a&gt;: Trace md flush events. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop.py&quot;&gt;mountsnoop&lt;/a&gt;: Trace mount and umount syscalls system-wide. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat.py&quot;&gt;virtiostat&lt;/a&gt;: Show VIRTIO device IO statistics. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Filesystems Tools&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist.py&quot;&gt;btrfsdist&lt;/a&gt;: Summarize btrfs operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower.py&quot;&gt;btrfsslower&lt;/a&gt;: Trace slow btrfs operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist.py&quot;&gt;ext4dist&lt;/a&gt;: Summarize ext4 operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower.py&quot;&gt;ext4slower&lt;/a&gt;: Trace slow ext4 operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower.py&quot;&gt;nfsslower&lt;/a&gt;: Trace slow NFS operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist.py&quot;&gt;nfsdist&lt;/a&gt;: Summarize NFS operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount.py&quot;&gt;vfscount&lt;/a&gt;: Count VFS calls. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat.py&quot;&gt;vfsstat&lt;/a&gt;: Count some VFS calls, with column output. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist.py&quot;&gt;xfsdist&lt;/a&gt;: Summarize XFS operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower.py&quot;&gt;xfsslower&lt;/a&gt;: Trace slow XFS operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist.py&quot;&gt;zfsdist&lt;/a&gt;: Summarize ZFS operation latency distribution as a histogram. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;tools/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower.py&quot;&gt;zfsslower&lt;/a&gt;: Trace slow ZFS operations. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Networking&lt;/h3&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/distributed_bridge&quot;&gt;distributed_bridge/&lt;/a&gt;: Distributed bridge example.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/http_filter&quot;&gt;http_filter/&lt;/a&gt;: Simple HTTP filter example.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simple_tc.py&quot;&gt;simple_tc.py&lt;/a&gt;: Simple traffic control example.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simulation.py&quot;&gt;simulation.py&lt;/a&gt;: Simulation helper.&lt;/li&gt; 
 &lt;li&gt;examples/networking/neighbor_sharing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.py&quot;&gt;tc_neighbor_sharing.py&lt;/a&gt; examples/networking/neighbor_sharing/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.c&quot;&gt;tc_neighbor_sharing.c&lt;/a&gt;: Per-IP classification and rate limiting.&lt;/li&gt; 
 &lt;li&gt;examples/networking/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&quot;&gt;tunnel_monitor/&lt;/a&gt;: Efficiently monitor traffic flows.&lt;/li&gt; 
 &lt;li&gt;examples/networking/vlan_learning/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.py&quot;&gt;vlan_learning.py&lt;/a&gt; examples/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.c&quot;&gt;vlan_learning.c&lt;/a&gt;: Demux Ethernet traffic into worker veth+namespaces.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;BPF Introspection&lt;/h3&gt; 
&lt;p&gt;Tools that help to introspect BPF programs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;introspection/&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps.c&quot;&gt;bps.c&lt;/a&gt;: List all BPF programs loaded into the kernel. &#39;ps&#39; for BPF programs. &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps_example.txt&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;BPF guarantees that the programs loaded into the kernel cannot crash, and cannot run forever, but yet BPF is general purpose enough to perform many arbitrary types of computation. Currently, it is possible to write a program in C that will compile into a valid BPF program, yet it is vastly easier to write a C program that will compile into invalid BPF (C is like that). The user won&#39;t know until trying to run the program whether it was valid or not.&lt;/p&gt; 
&lt;p&gt;With a BPF-specific frontend, one should be able to write in a language and receive feedback from the compiler on the validity as it pertains to a BPF backend. This toolkit aims to provide a frontend that can only create valid BPF programs while still harnessing its full flexibility.&lt;/p&gt; 
&lt;p&gt;Furthermore, current integrations with BPF have a kludgy workflow, sometimes involving compiling directly in a linux kernel source tree. This toolchain aims to minimize the time that a developer spends getting BPF compiled, and instead focus on the applications that can be written and the problems that can be solved with BPF.&lt;/p&gt; 
&lt;p&gt;The features of this toolkit include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;End-to-end BPF workflow in a shared library 
  &lt;ul&gt; 
   &lt;li&gt;A modified C language for BPF backends&lt;/li&gt; 
   &lt;li&gt;Integration with llvm-bpf backend for JIT&lt;/li&gt; 
   &lt;li&gt;Dynamic (un)loading of JITed programs&lt;/li&gt; 
   &lt;li&gt;Support for BPF kernel hooks: socket filters, tc classifiers, tc actions, and kprobes&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Bindings for Python&lt;/li&gt; 
 &lt;li&gt;Examples for socket filters, tc classifiers, and kprobes&lt;/li&gt; 
 &lt;li&gt;Self-contained tools for tracing a running system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In the future, more bindings besides python will likely be supported. Feel free to add support for the language of your choice and send a pull request!&lt;/p&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial.md&quot;&gt;docs/tutorial.md&lt;/a&gt;: Using bcc tools to solve performance, troubleshooting, and networking issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial_bcc_python_developer.md&quot;&gt;docs/tutorial_bcc_python_developer.md&lt;/a&gt;: Developing new bcc programs using the Python interface.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Networking&lt;/h3&gt; 
&lt;p&gt;At Red Hat Summit 2015, BCC was presented as part of a &lt;a href=&quot;http://www.devnation.org/#7784f1f7513e8542e4db519e79ff5eec&quot;&gt;session on BPF&lt;/a&gt;. A multi-host vxlan environment is simulated and a BPF program used to monitor one of the physical interfaces. The BPF program keeps statistics on the inner and outer IP addresses traversing the interface, and the userspace component turns those statistics into a graph showing the traffic distribution at multiple granularities. See the code &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Already pumped up to commit some code? Here are some resources to join the discussions in the &lt;a href=&quot;https://www.iovisor.org/&quot;&gt;IOVisor&lt;/a&gt; community and see what you want to work on.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Mailing List:&lt;/em&gt; &lt;a href=&quot;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&quot;&gt;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;IRC:&lt;/em&gt; #iovisor at irc.oftc.net&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;BCC Issue Tracker:&lt;/em&gt; &lt;a href=&quot;https://github.com/iovisor/bcc/issues&quot;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;A guide for contributing scripts:&lt;/em&gt; &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/CONTRIBUTING-SCRIPTS.md&quot;&gt;CONTRIBUTING-SCRIPTS.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;External links&lt;/h2&gt; 
&lt;p&gt;Looking for more information on BCC and how it&#39;s being used? You can find links to other BCC content on the web in &lt;a href=&quot;https://raw.githubusercontent.com/iovisor/bcc/master/LINKS.md&quot;&gt;LINKS.md&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pr3y/Bruce</title>
      <link>https://github.com/pr3y/Bruce</link>
      <description>&lt;p&gt;Predatory ESP32 Firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/bruce_banner.jpg&quot; alt=&quot;Bruce Main Menu&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;🦈&lt;/span&gt; Bruce&lt;/h1&gt; 
&lt;p&gt;Bruce is meant to be a versatile ESP32 firmware that supports a ton of offensive features focusing on facilitating Red Team operations. It also supports m5stack products and works great with Cardputer, Sticks, M5Cores, T-Decks and T-Embeds.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🏗&lt;/span&gt; How to install&lt;/h2&gt; 
&lt;h3&gt;The easiest way to install Bruce is using our official Web Flasher!&lt;/h3&gt; 
&lt;h3&gt;Check out: &lt;a href=&quot;https://bruce.computer/flasher&quot;&gt;https://bruce.computer/flasher&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can download the latest binary from releases or actions and flash locally using esptool.py&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;esptool.py --port /dev/ttyACM0 write_flash 0x00000 Bruce-&amp;lt;device&amp;gt;.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For m5stack devices&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you already use M5Launcher to manage your m5stack device, you can install it with OTA&lt;/p&gt; 
&lt;p&gt;Or you can burn it directly from the &lt;a href=&quot;https://docs.m5stack.com/en/download&quot;&gt;m5burner tool&lt;/a&gt;, just search for &#39;Bruce&#39; (My official builds will be uploaded by &quot;owner&quot; and have photos.) on the device category you want to and click on burn&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⌨&lt;/span&gt; Discord Server&lt;/h2&gt; 
&lt;p&gt;Contact us in our &lt;a href=&quot;https://discord.gg/WJ9XF9czVT&quot;&gt;Discord Server&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📑&lt;/span&gt; Wiki&lt;/h2&gt; 
&lt;p&gt;For more information on each function supported by Bruce, &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki&quot;&gt;read our wiki here&lt;/a&gt;. Also, &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FAQ&quot;&gt;read our FAQ&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;💻&lt;/span&gt; List of Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;WiFi&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Connect to WiFi&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; WiFi AP&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Disconnect WiFi&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#wifi-atks&quot;&gt;WiFi Atks&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#beacon-spam&quot;&gt;Beacon Spam&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#target-atk&quot;&gt;Target Atk&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Information&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Target Deauth&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; EvilPortal + Deauth&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Deauth Flood (More than one target)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Wardriving&quot;&gt;Wardriving&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#telnet&quot;&gt;TelNet&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#ssh&quot;&gt;SSH&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#raw-sniffer&quot;&gt;RAW Sniffer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#tcp-client&quot;&gt;TCP Client&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#tcp-listener&quot;&gt;TCP Listener&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#dpwo-esp32&quot;&gt;DPWO-ESP32&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&quot;&gt;Evil Portal&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&quot;&gt;Scan Hosts&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#wireguard-tunneling&quot;&gt;Wireguard Tunneling&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Brucegotchi 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Pwnagotchi friend&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Pwngrid spam faces &amp;amp; names 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [Optional] DoScreen a very long name and face&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [Optional] Flood uniq peer identifiers&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;BLE&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/BLE#ble-scan&quot;&gt;BLE Scan&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Bad BLE - Run Ducky scripts, similar to &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;BadUsb&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; BLE Keyboard - Cardputer and T-Deck Only&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; iOS Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Windows Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Samsung Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Android Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spam All&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;RF&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Scan/Copy&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/RF#replay-payloads-like-flipper&quot;&gt;Custom SubGhz&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jammer Full (sends a full squared wave into output)&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jammer Intermittent (sends PWM signal into output)&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF TX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF RX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF Module 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF433 T/R M5Stack&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/CC1101&quot;&gt;CC1101 (Sub-Ghz)&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF Frequency&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Replay&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;RFID&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Read tag&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Read 125kHz&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Clone tag&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Write NDEF records&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Amiibolink&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chameleon&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Write data&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Erase data&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Save file&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Load file&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/RFID#supported-modules&quot;&gt;RFID Module&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; PN532&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Emulate tag&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;IR&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; TV-B-Gone&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; IR Receiver&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/IR#replay-payloads-like-flipper&quot;&gt;Custom IR (NEC, NECext, SIRC, SIRC15, SIRC20, Samsung32, RC5, RC5X, RC6)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Ir TX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Ir RX Pin&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;FM&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#play_or_pause_button-broadcast-standard&quot;&gt;Broadcast standard&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#no_entry_sign-broadcast-rerserved&quot;&gt;Broadcast reserved&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#stop_button-broadcast-stop&quot;&gt;Broadcast stop&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#ocean-fm-spectrum&quot;&gt;FM Spectrum&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#car-hijack-ta&quot;&gt;Hijack Traffic Announcements&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#bookmark_tabs-config&quot;&gt;Config&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;NRF24&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/BLE#nrf24-jammer&quot;&gt;NRF24 Jammer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 2.4G Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Mousejack&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Scripts&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Interpreter&quot;&gt;JavaScript Interpreter&lt;/a&gt; &lt;a href=&quot;https://github.com/justinknight93/Doolittle&quot;&gt;Credits to justinknight93&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Others&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Mic Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; QRCodes 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Custom&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; PIX (Brazil bank transfer system)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#sd-card-mngr&quot;&gt;SD Card Mngr&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; View image (jpg)&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; File Info&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Wardriving#how-to-upload&quot;&gt;Wigle Upload&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Play Audio&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; View File&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#littlefs-mngr&quot;&gt;LittleFS Mngr&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#webui&quot;&gt;WebUI&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Server Structure&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Html&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; SDCard Mngr&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spiffs Mngr&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Megalodon&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;BADUsb (New features, LittleFS and SDCard)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; USB Keyboard - Cardputer and T-Deck Only&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#openhaystack&quot;&gt;Openhaystack&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#ibutton&quot;&gt;iButton&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#led-control&quot;&gt;LED Control&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Clock&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RTC Support&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; NTP time adjust&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Manual adjust&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Connect (ESPNOW)&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Send File&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Receive File&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Config&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Brightness&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Dim Time&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Orientation&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; UI Color&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Boot Sound on/off&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Clock&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Sleep&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Restart&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Specific functions per Device, the ones not mentioned here are available to all.&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Device&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;CC1101&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;NRF24&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Interpreter&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;FM Radio&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;PN532&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Mic&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;BadUSB&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;RGB Led&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Speaker&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Fuel Guage&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;LITE_MODE&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cardputer-kit-w-m5stamps&quot;&gt;M5Stack Cardputer&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;NS4168&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stickc-plus2-esp32-mini-iot-development-kit&quot;&gt;M5Stack M5StickC PLUS2&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stickc-plus-esp32-pico-mini-iot-development-kit&quot;&gt;M5Stack M5StickC PLUS&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/basic-core-iot-development-kit&quot;&gt;M5Stack M5Core BASIC&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-core2-esp32-iot-development-kit-v1-1&quot;&gt;M5Stack M5Core2&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cores3-esp32s3-lotdevelopment-kit&quot;&gt;M5Stack M5CoreS3&lt;/a&gt;/&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cores3-se-iot-controller-w-o-battery-bottom&quot;&gt;SE&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.aliexpress.us/item/3256804774970998.html&quot;&gt;JCZN CYD‑2432S028&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-embed-cc1101&quot;&gt;Lilygo T‑Embed CC1101&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-embed&quot;&gt;Lilygo T‑Embed&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-deck&quot;&gt;Lilygo T‑Deck&lt;/a&gt; (&lt;a href=&quot;https://lilygo.cc/products/t-deck-plus-1&quot;&gt;and pro&lt;/a&gt;)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-display-s3&quot;&gt;Lilygo T-Display-S3&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-watch-s3&quot;&gt;Lilygo T-Watch-S3&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;² CYD have a LITE_VERSION version for Launcher Compatibility ¹ Core, CYD and StickCs Bad-USB: &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;LITE_MODE&lt;/em&gt;: TelNet, SSH, DPWO, WireGuard, ScanHosts, RawSniffer, Brucegotchi, BLEBacon, BLEScan, Interpreter and OpenHaystack are NOT available for M5Launcher Compatibility&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Why and how does it look?&lt;/h2&gt; 
&lt;p&gt;Bruce stems from a keen observation within the community focused on devices like Flipper Zero. While these devices offered a glimpse into the world of offensive security, there was a palpable sense that something more could be achieved without being that overpriced, particularly with the robust and modular hardware ecosystem provided by ESP32 Devices, Lilygo and M5Stack products.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/pic1.png&quot; alt=&quot;Bruce Main Menu&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/core.png&quot; alt=&quot;Bruce on M5Core&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/stick.png&quot; alt=&quot;Bruce on Stick&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/cyd.png&quot; alt=&quot;Bruce on CYD&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Other media can be &lt;a href=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/&quot;&gt;found here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;👏&lt;/span&gt; Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bmorcelli&quot;&gt;@bmorcelli&lt;/a&gt; for new core and a bunch of new features, also porting to many devices!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IncursioHack&quot;&gt;@IncursioHack&lt;/a&gt; for adding RF and RFID modules features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Luidiblu&quot;&gt;@Luidiblu&lt;/a&gt; for logo and UI design assistance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eadmaster&quot;&gt;@eadmaster&lt;/a&gt; for adding a lot of features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rennancockles&quot;&gt;@rennancockles&lt;/a&gt; for a lot of RFID code, refactoring and others features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/7h30th3r0n3&quot;&gt;@7h30th3r0n3&lt;/a&gt; refactoring and a lot of help with WiFi attacks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Tawank&quot;&gt;@Tawank&lt;/a&gt; refactoring interpreter among many other things&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;@pablonymous&lt;/a&gt; new RF functions to read RAW Data&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Smoochiee&lt;/a&gt; for Bruce PCB design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;TH3_KR4K3N&lt;/a&gt; for Stick cplus extender PCB design.&lt;/li&gt; 
 &lt;li&gt;Everyone who contributed in some way to the project, thanks &lt;span&gt;❤️&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🚧&lt;/span&gt; Disclaimer&lt;/h2&gt; 
&lt;p&gt;Bruce is a tool for cyber offensive and red team operations, distributed under the terms of the Affero General Public License (AGPL). It is intended for legal and authorized security testing purposes only. Use of this software for any malicious or unauthorized activities is strictly prohibited. By downloading, installing, or using Bruce, you agree to comply with all applicable laws and regulations. This software is provided free of charge, and we do not accept payments for copies or modifications. The developers of Bruce assume no liability for any misuse of the software. Use at your own risk.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>coolsnowwolf/lede</title>
      <link>https://github.com/coolsnowwolf/lede</link>
      <description>&lt;p&gt;Lean&#39;s LEDE source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;欢迎来到 Lean 的 LEDE 源码仓库&lt;/h1&gt; 
&lt;p&gt;为国产龙芯 LOONGSON SoC loongarch64 / 飞腾 Phytium 腾锐 D2000 系列架构添加支持&lt;/p&gt; 
&lt;p&gt;I18N: &lt;a href=&quot;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README_EN.md&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README.md&quot;&gt;简体中文&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README_JA.md&quot;&gt;日本語&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;官方讨论群&lt;/h2&gt; 
&lt;p&gt;如有技术问题需要讨论或者交流，欢迎加入以下群：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;QQ 讨论群：Op 固件技术研究群，号码 891659613，加群链接：&lt;a href=&quot;https://qm.qq.com/q/IMa6Yf2SgC&quot; title=&quot;Op固件技术研究群&quot;&gt;点击加入&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;TG 讨论群：OP 编译官方大群，加群链接：&lt;a href=&quot;https://t.me/JhKgAA6Hx1&quot; title=&quot;OP 编译官方大群&quot;&gt;点击加入&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;软路由 ArmSoM Sige 系列介绍&lt;/h2&gt; 
&lt;p&gt;ArmSoM-Sige 系列：软路由、单板计算机、小型服务器与智能家居的全能之选。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://shop518100695.taobao.com/&quot;&gt;商品介绍页面 - ArmSom 品牌店&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;购买链接：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?id=721197662185&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/sige-zh.jpg&quot; alt=&quot;sige1-zh&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;注意&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;不要用 root 用户进行编译&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;国内用户编译前最好准备好梯子&lt;/li&gt; 
 &lt;li&gt;默认登陆IP 192.168.1.1 密码 password&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;编译命令&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;首先装好 Linux 系统，推荐 Debian 或 Ubuntu LTS&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安装编译依赖&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt update -y
sudo apt full-upgrade -y
sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;下载源代码，更新 feeds 并选择配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/coolsnowwolf/lede
cd lede
./scripts/feeds update -a
./scripts/feeds install -a
make menuconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;下载 dl 库，编译固件 （-j 后面是线程数，第一次编译推荐用单线程）&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make download -j8
make V=s -j1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;本套代码保证肯定可以编译成功。里面包括了 R24 所有源代码，包括 IPK 的。&lt;/p&gt; 
&lt;p&gt;你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！&lt;/p&gt; 
&lt;p&gt;二次编译：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd lede
git pull
./scripts/feeds update -a
./scripts/feeds install -a
make defconfig
make download -j8
make V=s -j$(nproc)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果需要重新配置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;rm -rf .config
make menuconfig
make V=s -j$(nproc)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;编译完成后输出路径：bin/targets&lt;/p&gt; 
&lt;h3&gt;使用 WSL/WSL2 进行编译&lt;/h3&gt; 
&lt;p&gt;由于 WSL 的 PATH 中包含带有空格的 Windows 路径，有可能会导致编译失败，请在 &lt;code&gt;make&lt;/code&gt; 前面加上：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;由于默认情况下，装载到 WSL 发行版的 NTFS 格式的驱动器将不区分大小写，因此大概率在 WSL/WSL2 的编译检查中会返回以下错误：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;Build dependency: OpenWrt can only be built on a case-sensitive filesystem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;一个比较简洁的解决方法是，在 &lt;code&gt;git clone&lt;/code&gt; 前先创建 Repository 目录，并为其启用大小写敏感：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# 以管理员身份打开终端
PS &amp;gt; fsutil.exe file setCaseSensitiveInfo &amp;lt;your_local_lede_path&amp;gt; enable
# 将本项目 git clone 到开启了大小写敏感的目录 &amp;lt;your_local_lede_path&amp;gt; 中
PS &amp;gt; git clone https://github.com/coolsnowwolf/lede &amp;lt;your_local_lede_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;对已经 &lt;code&gt;git clone&lt;/code&gt; 完成的项目目录执行 &lt;code&gt;fsutil.exe&lt;/code&gt; 命令无法生效，大小写敏感只对新增的文件变更有效。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;macOS 原生系统进行编译&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;在 AppStore 中安装 Xcode&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安装 Homebrew：&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 Homebrew 安装工具链、依赖与基础软件包：&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew unlink awk
brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz
brew install gcc@11
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;然后输入以下命令，添加到系统环境变量中：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;intel 芯片的 mac&lt;/li&gt; 
  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo &#39;export PATH=&quot;/usr/local/opt/coreutils/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/usr/local/opt/findutils/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/usr/local/opt/gnu-getopt/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/usr/local/opt/gnu-tar/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/usr/local/opt/grep/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/usr/local/opt/make/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;apple 芯片的 mac&lt;/li&gt; 
  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;echo &#39;export PATH=&quot;/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/opt/homebrew/opt/findutils/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/opt/homebrew/opt/gnu-getopt/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/opt/homebrew/opt/grep/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&quot;/opt/homebrew/opt/make/libexec/gnubin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;重新加载一下 shell 启动文件 &lt;code&gt;source ~/.bashrc&lt;/code&gt;，然后输入 &lt;code&gt;bash&lt;/code&gt; 进入 bash shell，就可以和 Linux 一样正常编译了&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;特别提示&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件， SSL 安全是互联网最后的壁垒，安全干净才是固件应该做到的。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？跟着佐大学 OpenWrt 开发入门培训班助你能学有所成 报名地址：&lt;a href=&quot;http://forgotfun.org/2018/04/openwrt-training-2018.html&quot; title=&quot;报名&quot;&gt;点击报名&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;QCA IPQ60xx 开源仓库地址：&lt;a href=&quot;https://github.com/coolsnowwolf/openwrt-gl-ax1800&quot;&gt;https://github.com/coolsnowwolf/openwrt-gl-ax1800&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;存档版本仓库地址：&lt;a href=&quot;https://github.com/coolsnowwolf/openwrt&quot;&gt;https://github.com/coolsnowwolf/openwrt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;捐贈&lt;/h2&gt; 
&lt;p&gt;如果你觉得此项目对你有帮助，可以捐助我们，以鼓励项目能持续发展，更加完善&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/star.png&quot; alt=&quot;star&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>containers/crun</title>
      <link>https://github.com/containers/crun</link>
      <description>&lt;p&gt;A fast and lightweight fully featured OCI runtime and C library for running containers&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/containers/crun/main/docs/crun.svg?sanitize=true&quot; width=&quot;450&quot; height=&quot;450&quot;&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://scan.coverity.com/projects/giuseppe-crun&quot;&gt;&lt;img src=&quot;https://scan.coverity.com/projects/17787/badge.svg?sanitize=true&quot; alt=&quot;Coverity Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/containers/crun/actions?query=workflow%3ACodeQL&quot;&gt;&lt;img src=&quot;https://github.com/containers/crun/workflows/CodeQL/badge.svg?sanitize=true&quot; alt=&quot;CodeQL&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A fast and low-memory footprint OCI Container Runtime fully written in C.&lt;/p&gt; 
&lt;p&gt;crun conforms to the OCI Container Runtime specifications (&lt;a href=&quot;https://github.com/opencontainers/runtime-spec&quot;&gt;https://github.com/opencontainers/runtime-spec&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The user documentation is available &lt;a href=&quot;https://raw.githubusercontent.com/containers/crun/main/crun.1.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Why another implementation?&lt;/h2&gt; 
&lt;p&gt;While most of the tools used in the Linux containers ecosystem are written in Go, I believe C is a better fit for a lower level tool like a container runtime. runc, the most used implementation of the OCI runtime specs written in Go, re-execs itself and use a module written in C for setting up the environment before the container process starts.&lt;/p&gt; 
&lt;p&gt;crun aims to be also usable as a library that can be easily included in programs without requiring an external process for managing OCI containers.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;crun is faster than runc and has a much lower memory footprint.&lt;/p&gt; 
&lt;p&gt;This is the elapsed time on my machine for running sequentially 100 containers, the containers run &lt;code&gt;/bin/true&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;crun&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;runc&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;%&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;100 /bin/true&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;0:01.69&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;0:3.34&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;-49.4%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;crun requires fewer resources, so it is also possible to set stricter limits on the memory allowed in the container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# podman --runtime /usr/bin/runc run --rm --memory 4M fedora echo it works
Error: container_linux.go:346: starting container process caused &quot;process_linux.go:327: getting pipe fds for pid 13859 caused \&quot;readlink /proc/13859/fd/0: no such file or directory\&quot;&quot;: OCI runtime command not found error

# podman --runtime /usr/bin/crun run --rm --memory 512k fedora echo it works
it works
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;These dependencies are required for the build:&lt;/p&gt; 
&lt;h3&gt;Fedora&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ sudo dnf install -y \
    autoconf automake gcc git-core glibc-static go-md2man \
    libcap-devel libseccomp-devel libtool make pkg-config \
    python python-libmount systemd-devel yajl-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RHEL/CentOS Stream 9&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ sudo dnf config-manager --set-enabled crb
$ sudo dnf install -y \
    autoconf automake gcc git-core glibc-static go-md2man \
    libcap-devel libseccomp-devel libtool make pkg-config \
    python python-libmount systemd-devel yajl-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RHEL/CentOS Stream 10&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ sudo dnf config-manager --set-enabled crb
$ sudo dnf install -y \
    autoconf automake gcc git-core glibc-static go-md2man \
    libcap-devel libseccomp-devel libtool make pkg-config \
    python python-libmount systemd-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NOTE that you need to add &lt;code&gt;--enable-embedded-yajl&lt;/code&gt; to &lt;code&gt;./configure&lt;/code&gt; flags below.&lt;/p&gt; 
&lt;h3&gt;Ubuntu&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ sudo apt-get install -y make git gcc build-essential pkgconf libtool \
   libsystemd-dev libprotobuf-c-dev libcap-dev libseccomp-dev libyajl-dev \
   go-md2man autoconf python3 automake
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alpine&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# apk add gcc automake autoconf libtool gettext pkgconf git make musl-dev \
    python3 libcap-dev libseccomp-dev yajl-dev argp-standalone go-md2man
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# zypper install make automake autoconf gettext libtool gcc libcap-devel \
systemd-devel libyajl-devel libseccomp-devel python3 go-md2man \
glibc-static;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that Tumbleweed requires you to specify libseccomp&#39;s header file location as a compiler flag.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# ./autogen.sh
# ./configure CFLAGS=&#39;-I/usr/include/libseccomp&#39;
# make
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;Unless you are also building the Python bindings, Python is needed only by libocispec to generate the C parser at build time, it won&#39;t be used afterwards.&lt;/p&gt; 
&lt;p&gt;Once all the dependencies are installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ ./autogen.sh
$ ./configure
$ make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install into default PREFIX (&lt;code&gt;/usr/local&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shared Libraries&lt;/h3&gt; 
&lt;p&gt;The previous build instructions do not enable shared libraries, therefore you will be unable to use libcrun. If you wish to build the shared libraries you can change the previous &lt;code&gt;./configure&lt;/code&gt; statement to &lt;code&gt;./configure --enable-shared&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Static build&lt;/h2&gt; 
&lt;p&gt;It is possible to build a statically linked binary of crun by using the officially provided &lt;a href=&quot;https://nixos.org/nixos/packages.html?attr=crun&amp;amp;channel=unstable&amp;amp;query=crun&quot;&gt;nix&lt;/a&gt; package and the derivation of it &lt;a href=&quot;https://raw.githubusercontent.com/containers/crun/main/nix/&quot;&gt;within this repository&lt;/a&gt;. The builds are completely reproducible and will create a x86_64/amd64 stripped ELF binary for &lt;a href=&quot;https://www.gnu.org/software/libc&quot;&gt;glibc&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Nix&lt;/h3&gt; 
&lt;p&gt;To build the binaries by locally installing the nix package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ curl -L https://nixos.org/nix/install | sh
$ git clone --recursive https://github.com/containers/crun.git &amp;amp;&amp;amp; cd crun
$ nix build -f nix/
$ ./result/bin/crun --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ansible&lt;/h3&gt; 
&lt;p&gt;An &lt;a href=&quot;https://github.com/alvistack/ansible-role-crun&quot;&gt;Ansible Role&lt;/a&gt; is also available to automate the installation of the above statically linked binary on its supported OS:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ sudo su -
# mkdir -p ~/.ansible/roles
# cd ~/.ansible/roles
# git clone https://github.com/alvistack/ansible-role-crun.git crun
# cd ~/.ansible/roles/crun
# pip3 install --upgrade --ignore-installed --requirement requirements.txt
# molecule converge
# molecule verify
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Lua bindings&lt;/h2&gt; 
&lt;p&gt;A Lua binding is available. See &lt;a href=&quot;https://raw.githubusercontent.com/containers/crun/main/lua/README.md&quot;&gt;the README&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>madler/zlib</title>
      <link>https://github.com/madler/zlib</link>
      <description>&lt;p&gt;A massively spiffy yet delicately unobtrusive compression library.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ZLIB DATA COMPRESSION LIBRARY&lt;/p&gt; 
&lt;p&gt;zlib 1.3.1.1 is a general purpose data compression library. All the code is thread safe. The data format used by the zlib library is described by RFCs (Request for Comments) 1950 to 1952 in the files &lt;a href=&quot;http://tools.ietf.org/html/rfc1950&quot;&gt;http://tools.ietf.org/html/rfc1950&lt;/a&gt; (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).&lt;/p&gt; 
&lt;p&gt;All functions of the compression library are documented in the file zlib.h (volunteer to write man pages welcome, contact &lt;a href=&quot;mailto:zlib@gzip.org&quot;&gt;zlib@gzip.org&lt;/a&gt;). A usage example of the library is given in the file test/example.c which also tests that the library is working correctly. Another example is given in the file test/minigzip.c. The compression library itself is composed of all source files in the root directory.&lt;/p&gt; 
&lt;p&gt;To compile all files and run the test program, follow the instructions given at the top of Makefile.in. In short &quot;./configure; make test&quot;, and if that goes well, &quot;make install&quot; should work for most flavors of Unix. For Windows, use one of the special makefiles in win32/ or contrib/vstudio/ . For VMS, use make_vms.com.&lt;/p&gt; 
&lt;p&gt;Questions about zlib should be sent to &lt;a href=&quot;mailto:zlib@gzip.org&quot;&gt;zlib@gzip.org&lt;/a&gt;, or to Gilles Vollant &lt;a href=&quot;mailto:info@winimage.com&quot;&gt;info@winimage.com&lt;/a&gt; for the Windows DLL version. The zlib home page is &lt;a href=&quot;http://zlib.net/&quot;&gt;http://zlib.net/&lt;/a&gt; . Before reporting a problem, please check this site to verify that you have the latest version of zlib; otherwise get the latest version and check whether the problem still exists or not.&lt;/p&gt; 
&lt;p&gt;PLEASE read the zlib FAQ &lt;a href=&quot;http://zlib.net/zlib_faq.html&quot;&gt;http://zlib.net/zlib_faq.html&lt;/a&gt; before asking for help.&lt;/p&gt; 
&lt;p&gt;Mark Nelson &lt;a href=&quot;mailto:markn@ieee.org&quot;&gt;markn@ieee.org&lt;/a&gt; wrote an article about zlib for the Jan. 1997 issue of Dr. Dobb&#39;s Journal; a copy of the article is available at &lt;a href=&quot;https://marknelson.us/posts/1997/01/01/zlib-engine.html&quot;&gt;https://marknelson.us/posts/1997/01/01/zlib-engine.html&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;The changes made in version 1.3.1.1 are documented in the file ChangeLog.&lt;/p&gt; 
&lt;p&gt;Unsupported third party contributions are provided in directory contrib/ .&lt;/p&gt; 
&lt;p&gt;zlib is available in Java using the java.util.zip package. Follow the API Documentation link at: &lt;a href=&quot;https://docs.oracle.com/search/?q=java.util.zip&quot;&gt;https://docs.oracle.com/search/?q=java.util.zip&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;A Perl interface to zlib and bzip2 written by Paul Marquess &lt;a href=&quot;mailto:pmqs@cpan.org&quot;&gt;pmqs@cpan.org&lt;/a&gt; can be found at &lt;a href=&quot;https://github.com/pmqs/IO-Compress&quot;&gt;https://github.com/pmqs/IO-Compress&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;A Python interface to zlib written by A.M. Kuchling &lt;a href=&quot;mailto:amk@amk.ca&quot;&gt;amk@amk.ca&lt;/a&gt; is available in Python 1.5 and later versions, see &lt;a href=&quot;http://docs.python.org/library/zlib.html&quot;&gt;http://docs.python.org/library/zlib.html&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;zlib is built into tcl: &lt;a href=&quot;http://wiki.tcl.tk/4610&quot;&gt;http://wiki.tcl.tk/4610&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;An experimental package to read and write files in .zip format, written on top of zlib by Gilles Vollant &lt;a href=&quot;mailto:info@winimage.com&quot;&gt;info@winimage.com&lt;/a&gt;, is available in the contrib/minizip directory of zlib.&lt;/p&gt; 
&lt;p&gt;Notes for some targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For Windows DLL versions, please see win32/DLL_FAQ.txt&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For 64-bit Irix, deflate.c must be compiled without any optimization. With -O, one libpng test fails. The test works in 32 bit mode (with the -n32 compiler flag). The compiler bug has been reported to SGI.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;zlib doesn&#39;t work with gcc 2.6.3 on a DEC 3000/300LX under OSF/1 2.1 it works when compiled with cc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On Digital Unix 4.0D (formerly OSF/1) on AlphaServer, the cc option -std1 is necessary to get gzprintf working correctly. This is done by configure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;zlib doesn&#39;t work on HP-UX 9.05 with some versions of /bin/cc. It works with other compilers. Use &quot;make test&quot; to check your compiler.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For PalmOs, see &lt;a href=&quot;http://palmzlib.sourceforge.net/&quot;&gt;http://palmzlib.sourceforge.net/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Acknowledgments:&lt;/p&gt; 
&lt;p&gt;The deflate format used by zlib was defined by Phil Katz. The deflate and zlib specifications were written by L. Peter Deutsch. Thanks to all the people who reported problems and suggested various improvements in zlib; they are too numerous to cite here.&lt;/p&gt; 
&lt;p&gt;Copyright notice:&lt;/p&gt; 
&lt;p&gt;(C) 1995-2024 Jean-loup Gailly and Mark Adler&lt;/p&gt; 
&lt;p&gt;This software is provided &#39;as-is&#39;, without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.&lt;/p&gt; 
&lt;p&gt;Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.&lt;/li&gt; 
 &lt;li&gt;Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.&lt;/li&gt; 
 &lt;li&gt;This notice may not be removed or altered from any source distribution.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Jean-loup Gailly Mark Adler &lt;a href=&quot;mailto:jloup@gzip.org&quot;&gt;jloup@gzip.org&lt;/a&gt; &lt;a href=&quot;mailto:madler@alumni.caltech.edu&quot;&gt;madler@alumni.caltech.edu&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you use the zlib library in a product, we would appreciate &lt;em&gt;not&lt;/em&gt; receiving lengthy legal documents to sign. The sources are provided for free but without warranty of any kind. The library has been entirely written by Jean-loup Gailly and Mark Adler; it does not include third-party code. We make all contributions to and distributions of this project solely in our personal capacity, and are not conveying any rights to any intellectual property of any third parties.&lt;/p&gt; 
&lt;p&gt;If you redistribute modified sources, we would appreciate that you include in the file ChangeLog history information documenting your changes. Please read the FAQ for more information on the distribution of modified source versions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lvgl/lvgl</title>
      <link>https://github.com/lvgl/lvgl</link>
      <description>&lt;p&gt;Embedded graphics library to create beautiful UIs for any MCU, MPU and display type.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/lvgl&quot; target=&quot;_blank&quot;&gt;&lt;img align=&quot;left&quot; src=&quot;https://lvgl.io/github-assets/sponsor.png&quot; height=&quot;32px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt; &lt;b&gt;English&lt;/b&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/lvgl/lvgl/master/docs/README_zh.md&quot;&gt;中文&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/lvgl/lvgl/master/docs/README_pt_BR.md&quot;&gt;Português do Brasil&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/lvgl/lvgl/master/docs/README_jp.md&quot;&gt;日本語&lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &amp;nbsp; &lt;img src=&quot;https://lvgl.io/github-assets/logo-colored.png&quot; width=&quot;300px&quot;&gt; &lt;/p&gt; 
&lt;p&gt;&amp;nbsp; &lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;Light and Versatile Graphics Library&lt;/h1&gt; &amp;nbsp; 
&lt;br&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://lvgl.io/github-assets/smartwatch-demo.gif&quot;&gt; &amp;nbsp; &amp;nbsp; 
 &lt;img border=&quot;1px&quot; src=&quot;https://lvgl.io/github-assets/widgets-demo.gif&quot;&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://lvgl.io&quot; title=&quot;Homepage of LVGL&quot;&gt;Website &lt;/a&gt; | &lt;a href=&quot;https://docs.lvgl.io/&quot; title=&quot;Detailed documentation with 100+ examples&quot;&gt;Docs&lt;/a&gt; | &lt;a href=&quot;https://forum.lvgl.io&quot; title=&quot;Get help and help others&quot;&gt;Forum&lt;/a&gt; | &lt;a href=&quot;https://lvgl.io/demos&quot; title=&quot;Demos running in your browser&quot;&gt;Demos&lt;/a&gt; | &lt;a href=&quot;https://lvgl.io/services&quot; title=&quot;Graphics design, UI implementation and consulting&quot;&gt;Services&lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;&lt;span&gt;📒&lt;/span&gt; Overview&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Mature and Well-known&lt;/strong&gt;&lt;br&gt; LVGL is the most popular free and open source embedded graphics library to create beautiful UIs for any MCU, MPU and display type. It&#39;s supported by industry leading vendors and projects like &amp;nbsp;Arm, STM32, NXP, Espressif, Nuvoton, Arduino, RT-Thread, Zephyr, NuttX, Adafruit and many more.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Feature Rich&lt;/strong&gt;&lt;br&gt; It has all the features to create modern and beautiful GUIs: 30+ built-in widgets, a powerful style system, web inspired layout managers, and a typography system supporting many languages. To integrate LVGL into your platform, all you need is at least 32kB RAM and 128 kB Flash, a C compiler, a frame buffer, and at least an 1/10 screen sized buffer for rendering.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;br&gt; Our team is ready to help you with graphics design, UI implementation and consulting services. Contact us if you need some support during the development of your next GUI project.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Free and Portable&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A fully portable C (C++ compatible) library with no external dependencies.&lt;/li&gt; 
 &lt;li&gt;Can be compiled to any MCU or MPU, with any (RT)OS.&lt;/li&gt; 
 &lt;li&gt;Supports monochrome, ePaper, OLED or TFT displays, or even monitors. &lt;a href=&quot;https://docs.lvgl.io/master/details/main-modules/display/index.html&quot;&gt;Displays&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Distributed under the MIT license, so you can easily use it in commercial projects too.&lt;/li&gt; 
 &lt;li&gt;Needs only 32kB RAM and 128 kB Flash, a frame buffer, and at least an 1/10 screen sized buffer for rendering.&lt;/li&gt; 
 &lt;li&gt;OS, External memory and GPU are supported but not required.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Widgets, Styles, Layouts and more&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;30+ built-in &lt;a href=&quot;https://docs.lvgl.io/master/details/widgets/index.html&quot;&gt;Widgets&lt;/a&gt;: &amp;nbsp;Button, Label, Slider, Chart, Keyboard, Meter, Arc, Table and many more.&lt;/li&gt; 
 &lt;li&gt;Flexible &lt;a href=&quot;https://docs.lvgl.io/master/details/common-widget-features/styles/style.html&quot;&gt;Style system&lt;/a&gt; with &amp;nbsp;~100 style properties to customize any part of the widgets in any state.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/common-widget-features/layouts/flex.html&quot;&gt;Flexbox&lt;/a&gt; and &lt;a href=&quot;https://docs.lvgl.io/master/details/common-widget-features/layouts/grid.html&quot;&gt;Grid&lt;/a&gt;-like layouts engines to automatically size and position the widgets in a responsive way.&lt;/li&gt; 
 &lt;li&gt;Texts are rendered with UTF-8 encoding supporting CJK, Thai, Hindi, Arabic, Persian writing systems.&lt;/li&gt; 
 &lt;li&gt;Word wrapping, kerning, text scrolling, sub-pixel rendering, Pinyin-IME Chinese input, Emojis in texts.&lt;/li&gt; 
 &lt;li&gt;Rendering engine supporting animations, anti-aliasing, opacity, smooth scrolling, shadows, image transformation, etc &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Supports Mouse, Touchpad, Keypad, Keyboard, External buttons, Encoder &lt;a href=&quot;https://docs.lvgl.io/master/details/main-modules/indev.html&quot;&gt;Input devices&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/main-modules/display/overview.html#how-many-displays-can-lvgl-use&quot;&gt;Multiple display&lt;/a&gt; support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Binding and Build Support&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.lvgl.io/2019-02-20/micropython-bindings&quot;&gt;MicroPython Binding&lt;/a&gt; exposes LVGL API&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.lvgl.io/2022-08-24/pikascript-and-lvgl&quot;&gt;PikaScript Binding&lt;/a&gt; python on MCU lighter and easier.&lt;/li&gt; 
 &lt;li&gt;No custom build system is used. You can build LVGL as you build the other files of your project.&lt;/li&gt; 
 &lt;li&gt;Support for Make and &lt;a href=&quot;https://docs.lvgl.io/master/details/integration/building/cmake.html&quot;&gt;CMake&lt;/a&gt; is included out of the box.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/ide/pc-simulator.html&quot;&gt;Develop on PC&lt;/a&gt; and use the same UI code on embedded hardware.&lt;/li&gt; 
 &lt;li&gt;Convert the C UI code to HTML file with our &lt;a href=&quot;https://github.com/lvgl/lv_web_emscripten&quot;&gt;Emscripten port&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Docs, Tools, and Services&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Detailed &lt;a href=&quot;https://docs.lvgl.io/&quot;&gt;Documentation&lt;/a&gt; with &lt;a href=&quot;https://docs.lvgl.io/master/examples.html&quot;&gt;100+ simple examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lvgl.io/services&quot;&gt;Services&lt;/a&gt; such as User interface design, Implementation and Consulting to make UI development simpler and faster.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;❤️&lt;/span&gt; Sponsor&lt;/h2&gt; 
&lt;p&gt;If LVGL saved you a lot of time and money or you just had fun using it, consider &lt;a href=&quot;https://github.com/sponsors/lvgl&quot;&gt;Supporting its Development&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How do we spend the donations?&lt;/strong&gt;&lt;br&gt; Our goal is to provide financial compensation for people who do the most for LVGL. It means not only the maintainers but anyone who implements a great feature should get a payment from the accumulated money. We use the donations to cover our operational costs like servers and related services.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How to donate?&lt;/strong&gt;&lt;br&gt; We use &lt;a href=&quot;https://github.com/sponsors/lvgl&quot;&gt;GitHub Sponsors&lt;/a&gt; where you can easily send one time or recurring donations. You can also see all of our expenses in a transparent way.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How to get paid for your contribution?&lt;/strong&gt;&lt;br&gt; If someone implements or fixes an issue labeled as &lt;a href=&quot;https://github.com/lvgl/lvgl/labels/Sponsored&quot;&gt;Sponsored&lt;/a&gt; he or she will get a payment for that work. We estimate the required time, complexity and importance of the issue and set a price accordingly. To jump in just comment on a &lt;a href=&quot;https://github.com/lvgl/lvgl/labels/Sponsored&quot;&gt;Sponsored&lt;/a&gt; issue saying &quot;Hi, I&#39;d like to deal with it. This is how I&#39;m planning to fix/implement it...&quot;. A work is considered ready when it&#39;s approved and merged by a maintainer. After that you can submit and expense at &lt;a href=&quot;https://opencollective.com/lvgl&quot;&gt;opencollective.com&lt;/a&gt; and you will receive the payment in a few days.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Organizations supporting LVGL&lt;/strong&gt;&lt;br&gt; &lt;a href=&quot;https://opencollective.com/lvgl&quot;&gt;&lt;img src=&quot;https://opencollective.com/lvgl/organizations.svg?width=600&quot; alt=&quot;Sponsors of LVGL&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Individuals supporting LVGL&lt;/strong&gt;&lt;br&gt; &lt;a href=&quot;https://opencollective.com/lvgl&quot;&gt;&lt;img src=&quot;https://contrib.rocks/image?repo=lvgl/lvgl&amp;amp;max=48&quot; alt=&quot;Backers of LVGL&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📦&lt;/span&gt; Packages&lt;/h2&gt; 
&lt;p&gt;LVGL is available as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/framework/arduino.html&quot;&gt;Arduino library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://registry.platformio.org/libraries/lvgl/lvgl&quot;&gt;PlatformIO package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/os/zephyr.html&quot;&gt;Zephyr library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://components.espressif.com/components/lvgl/lvgl&quot;&gt;ESP-IDF(ESP32) component&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nxp.com/design/software/embedded-software/lvgl-open-source-graphics-library:LITTLEVGL-OPEN-SOURCE-GRAPHICS-LIBRARY&quot;&gt;NXP MCUXpresso component&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/os/nuttx.html&quot;&gt;NuttX library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.lvgl.io/master/details/integration/os/rt-thread.html&quot;&gt;RT-Thread RTOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CMSIS-Pack&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doc.riot-os.org/group__pkg__lvgl.html#details&quot;&gt;RIOT OS package&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🤖&lt;/span&gt; Examples&lt;/h2&gt; 
&lt;p&gt;See some examples of creating widgets, using layouts and applying styles. You will find C and MicroPython code, and links to try out or edit the examples in an online MicroPython editor.&lt;/p&gt; 
&lt;p&gt;For more examples check out the &lt;a href=&quot;https://github.com/lvgl/lvgl/tree/master/examples&quot;&gt;Examples&lt;/a&gt; folder.&lt;/p&gt; 
&lt;h3&gt;Hello world label&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_1.png&quot; alt=&quot;Simple Hello world label example in LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/*Change the active screen&#39;s background color*/
lv_obj_set_style_bg_color(lv_screen_active(), lv_color_hex(0x003a57), LV_PART_MAIN);

/*Create a white label, set its text and align it to the center*/
lv_obj_t * label = lv_label_create(lv_screen_active());
lv_label_set_text(label, &quot;Hello world&quot;);
lv_obj_set_style_text_color(label, lv_color_hex(0xffffff), LV_PART_MAIN);
lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_direct=4ab7c40c35b0dc349aa2f0c3b00938d7d8e8ac9f&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Change the active screen&#39;s background color
scr = lv.screen_active()
scr.set_style_bg_color(lv.color_hex(0x003a57), lv.PART.MAIN)

# Create a white label, set its text and align it to the center
label = lv.label(lv.screen_active())
label.set_text(&quot;Hello world&quot;)
label.set_style_text_color(lv.color_hex(0xffffff), lv.PART.MAIN)
label.align(lv.ALIGN.CENTER, 0, 0)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;Button with Click Event&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_2.gif&quot; alt=&quot;LVGL button with label example&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;lv_obj_t * button = lv_button_create(lv_screen_active()); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /*Add a button to the current screen*/
lv_obj_center(button); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;         /*Set its position*/
lv_obj_set_size(button, 100, 50); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;/*Set its size*/
lv_obj_add_event_cb(button, button_event_cb, LV_EVENT_CLICKED, NULL); /*Assign a callback to the button*/

lv_obj_t * label = lv_label_create(button); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;/*Add a label to the button*/
lv_label_set_text(label, &quot;Button&quot;); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /*Set the labels text*/
lv_obj_center(label); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /*Align the label to the center*/
...

void button_event_cb(lv_event_t * e)
{
&amp;nbsp; printf(&quot;Clicked\n&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=926bde43ec7af0146c486de470c53f11f167491e&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def button_event_cb(e):
&amp;nbsp; print(&quot;Clicked&quot;)

# Create a Button and a Label
button = lv.button(lv.screen_active())
button.center()
button.set_size(100, 50)
button.add_event_cb(button_event_cb, lv.EVENT.CLICKED, None)

label = lv.label(button)
label.set_text(&quot;Button&quot;)
label.center()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;Checkboxes with Layout&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_3.gif&quot; alt=&quot;Checkboxes with layout in LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;
lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_COLUMN);
lv_obj_set_flex_align(lv_screen_active(), LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER);

lv_obj_t * cb;
cb = lv_checkbox_create(lv_screen_active());
lv_checkbox_set_text(cb, &quot;Apple&quot;);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);

cb = lv_checkbox_create(lv_screen_active());
lv_checkbox_set_text(cb, &quot;Banana&quot;);
lv_obj_add_state(cb, LV_STATE_CHECKED);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);

cb = lv_checkbox_create(lv_screen_active());
lv_checkbox_set_text(cb, &quot;Lemon&quot;);
lv_obj_add_state(cb, LV_STATE_DISABLED);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);

cb = lv_checkbox_create(lv_screen_active());
lv_obj_add_state(cb, LV_STATE_CHECKED | LV_STATE_DISABLED);
lv_checkbox_set_text(cb, &quot;Melon\nand a new line&quot;);
lv_obj_add_event_cb(cb, event_handler, LV_EVENT_ALL, NULL);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=311d37e5f70daf1cb0d2cad24c7f72751b5f1792&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def event_handler(e):
    code = e.get_code()
    obj = e.get_target_obj()
    if code == lv.EVENT.VALUE_CHANGED:
        txt = obj.get_text()
        if obj.get_state() &amp;amp; lv.STATE.CHECKED:
            state = &quot;Checked&quot;
        else:
            state = &quot;Unchecked&quot;
        print(txt + &quot;:&quot; + state)


lv.screen_active().set_flex_flow(lv.FLEX_FLOW.COLUMN)
lv.screen_active().set_flex_align(lv.FLEX_ALIGN.CENTER, lv.FLEX_ALIGN.START, lv.FLEX_ALIGN.CENTER)

cb = lv.checkbox(lv.screen_active())
cb.set_text(&quot;Apple&quot;)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)

cb = lv.checkbox(lv.screen_active())
cb.set_text(&quot;Banana&quot;)
cb.add_state(lv.STATE.CHECKED)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)

cb = lv.checkbox(lv.screen_active())
cb.set_text(&quot;Lemon&quot;)
cb.add_state(lv.STATE.DISABLED)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)

cb = lv.checkbox(lv.screen_active())
cb.add_state(lv.STATE.CHECKED | lv.STATE.DISABLED)
cb.set_text(&quot;Melon&quot;)
cb.add_event_cb(event_handler, lv.EVENT.ALL, None)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;Styling a Slider&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_4.gif&quot; alt=&quot;Styling a slider with LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;lv_obj_t * slider = lv_slider_create(lv_screen_active());
lv_slider_set_value(slider, 70, LV_ANIM_OFF);
lv_obj_set_size(slider, 300, 20);
lv_obj_center(slider);

/*Add local styles to MAIN part (background rectangle)*/
lv_obj_set_style_bg_color(slider, lv_color_hex(0x0F1215), LV_PART_MAIN);
lv_obj_set_style_bg_opa(slider, 255, LV_PART_MAIN);
lv_obj_set_style_border_color(slider, lv_color_hex(0x333943), LV_PART_MAIN);
lv_obj_set_style_border_width(slider, 5, LV_PART_MAIN);
lv_obj_set_style_pad_all(slider, 5, LV_PART_MAIN);

/*Create a reusable style sheet for the INDICATOR part*/
static lv_style_t style_indicator;
lv_style_init(&amp;amp;style_indicator);
lv_style_set_bg_color(&amp;amp;style_indicator, lv_color_hex(0x37B9F5));
lv_style_set_bg_grad_color(&amp;amp;style_indicator, lv_color_hex(0x1464F0));
lv_style_set_bg_grad_dir(&amp;amp;style_indicator, LV_GRAD_DIR_HOR);
lv_style_set_shadow_color(&amp;amp;style_indicator, lv_color_hex(0x37B9F5));
lv_style_set_shadow_width(&amp;amp;style_indicator, 15);
lv_style_set_shadow_spread(&amp;amp;style_indicator, 5);
4
/*Add the style sheet to the slider&#39;s INDICATOR part*/
lv_obj_add_style(slider, &amp;amp;style_indicator, LV_PART_INDICATOR);

/*Add the same style to the KNOB part too and locally overwrite some properties*/
lv_obj_add_style(slider, &amp;amp;style_indicator, LV_PART_KNOB);

lv_obj_set_style_outline_color(slider, lv_color_hex(0x0096FF), LV_PART_KNOB);
lv_obj_set_style_outline_width(slider, 3, LV_PART_KNOB);
lv_obj_set_style_outline_pad(slider, -5, LV_PART_KNOB);
lv_obj_set_style_shadow_spread(slider, 2, LV_PART_KNOB);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=c431c7b4dfd2cc0dd9c392b74365d5af6ea986f0&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create a slider and add the style
slider = lv.slider(lv.screen_active())
slider.set_value(70, lv.ANIM.OFF)
slider.set_size(300, 20)
slider.center()

# Add local styles to MAIN part (background rectangle)
slider.set_style_bg_color(lv.color_hex(0x0F1215), lv.PART.MAIN)
slider.set_style_bg_opa(255, lv.PART.MAIN)
slider.set_style_border_color(lv.color_hex(0x333943), lv.PART.MAIN)
slider.set_style_border_width(5, lv.PART.MAIN)
slider.set_style_pad_all(5, lv.PART.MAIN)

# Create a reusable style sheet for the INDICATOR part
style_indicator = lv.style_t()
style_indicator.init()
style_indicator.set_bg_color(lv.color_hex(0x37B9F5))
style_indicator.set_bg_grad_color(lv.color_hex(0x1464F0))
style_indicator.set_bg_grad_dir(lv.GRAD_DIR.HOR)
style_indicator.set_shadow_color(lv.color_hex(0x37B9F5))
style_indicator.set_shadow_width(15)
style_indicator.set_shadow_spread(5)

# Add the style sheet to the slider&#39;s INDICATOR part
slider.add_style(style_indicator, lv.PART.INDICATOR)
slider.add_style(style_indicator, lv.PART.KNOB)

# Add the same style to the KNOB part too and locally overwrite some properties
slider.set_style_outline_color(lv.color_hex(0x0096FF), lv.PART.KNOB)
slider.set_style_outline_width(3, lv.PART.KNOB)
slider.set_style_outline_pad(-5, lv.PART.KNOB)
slider.set_style_shadow_spread(2, lv.PART.KNOB)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;English, Hebrew (mixed LTR-RTL) and Chinese texts&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/kisvegabor/test/raw/master/readme_example_5.png&quot; alt=&quot;English, Hebrew and Chinese texts with LVGL&quot;&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;C code&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;lv_obj_t * ltr_label = lv_label_create(lv_screen_active());
lv_label_set_text(ltr_label, &quot;In modern terminology, a microcontroller is similar to a system on a chip (SoC).&quot;);
lv_obj_set_style_text_font(ltr_label, &amp;amp;lv_font_montserrat_16, 0);
lv_obj_set_width(ltr_label, 310);
lv_obj_align(ltr_label, LV_ALIGN_TOP_LEFT, 5, 5);

lv_obj_t * rtl_label = lv_label_create(lv_screen_active());
lv_label_set_text(rtl_label,&quot;מעבד, או בשמו המלא יחידת עיבוד מרכזית (באנגלית: CPU - Central Processing Unit).&quot;);
lv_obj_set_style_base_dir(rtl_label, LV_BASE_DIR_RTL, 0);
lv_obj_set_style_text_font(rtl_label, &amp;amp;lv_font_dejavu_16_persian_hebrew, 0);
lv_obj_set_width(rtl_label, 310);
lv_obj_align(rtl_label, LV_ALIGN_LEFT_MID, 5, 0);

lv_obj_t * cz_label = lv_label_create(lv_screen_active());
lv_label_set_text(cz_label,
                  &quot;嵌入式系统（Embedded System），\n是一种嵌入机械或电气系统内部、具有专一功能和实时计算性能的计算机系统。&quot;);
lv_obj_set_style_text_font(cz_label, &amp;amp;lv_font_simsun_16_cjk, 0);
lv_obj_set_width(cz_label, 310);
lv_obj_align(cz_label, LV_ALIGN_BOTTOM_LEFT, 5, -5);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MicroPython code | &lt;a href=&quot;https://sim.lvgl.io/v8.3/micropython/ports/javascript/index.html?script_startup=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/header.py&amp;amp;script=https://raw.githubusercontent.com/lvgl/lvgl/0d9ab4ee0e591aad1970e3c9164fd7c544ecce70/examples/widgets/slider/lv_example_slider_2.py&amp;amp;script_direct=18bb38200a64e10ead1aa17a65c977fc18131842&quot; target=&quot;_blank&quot;&gt;Online Simulator&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;ltr_label = lv.label(lv.screen_active())
ltr_label.set_text(&quot;In modern terminology, a microcontroller is similar to a system on a chip (SoC).&quot;)
ltr_label.set_style_text_font(lv.font_montserrat_16, 0);

ltr_label.set_width(310)
ltr_label.align(lv.ALIGN.TOP_LEFT, 5, 5)

rtl_label = lv.label(lv.screen_active())
rtl_label.set_text(&quot;מעבד, או בשמו המלא יחידת עיבוד מרכזית (באנגלית: CPU - Central Processing Unit).&quot;)
rtl_label.set_style_base_dir(lv.BASE_DIR.RTL, 0)
rtl_label.set_style_text_font(lv.font_dejavu_16_persian_hebrew, 0)
rtl_label.set_width(310)
rtl_label.align(lv.ALIGN.LEFT_MID, 5, 0)

font_simsun_16_cjk = lv.font_load(&quot;S:../../assets/font/lv_font_simsun_16_cjk.fnt&quot;)

cz_label = lv.label(lv.screen_active())
cz_label.set_style_text_font(font_simsun_16_cjk, 0)
cz_label.set_text(&quot;嵌入式系统（Embedded System），\n是一种嵌入机械或电气系统内部、具有专一功能和实时计算性能的计算机系统。&quot;)
cz_label.set_width(310)
cz_label.align(lv.ALIGN.BOTTOM_LEFT, 5, -5)

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;▶&lt;/span&gt; Get started&lt;/h2&gt; 
&lt;p&gt;This list will guide you to get started with LVGL step-by-step.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Get Familiar with LVGL&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check the &lt;a href=&quot;https://lvgl.io/demos&quot;&gt;Online demos&lt;/a&gt; to see LVGL in action (3 minutes).&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://docs.lvgl.io/master/intro/index.html&quot;&gt;Introduction&lt;/a&gt; page of the documentation (5 minutes).&lt;/li&gt; 
 &lt;li&gt;Get familiar with the basics on the &lt;a href=&quot;https://docs.lvgl.io/master/intro/getting_started.html#lvgl-basics&quot;&gt;Quick overview&lt;/a&gt; page (15 minutes).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Start to Use LVGL&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Set up a &lt;a href=&quot;https://docs.lvgl.io/master/details/integration/ide/pc-simulator.html#simulator&quot;&gt;Simulator&lt;/a&gt; (10 minutes).&lt;/li&gt; 
 &lt;li&gt;Try out some &lt;a href=&quot;https://github.com/lvgl/lvgl/tree/master/examples&quot;&gt;Examples&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Port LVGL to a board. See the &lt;a href=&quot;https://docs.lvgl.io/master/details/integration/adding-lvgl-to-your-project/index.html&quot;&gt;Porting&lt;/a&gt; guide or check out the ready-to-use &lt;a href=&quot;https://github.com/lvgl?q=lv_port_&quot;&gt;Projects&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Become a Pro&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;7&quot;&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://docs.lvgl.io/master/details/main-modules/index.html&quot;&gt;Main-Modules&lt;/a&gt; page to get a better understanding of the library (2-3 hours)&lt;/li&gt; 
 &lt;li&gt;Check the documentation of the &lt;a href=&quot;https://docs.lvgl.io/master/details/widgets/index.html&quot;&gt;Widgets&lt;/a&gt; to see their features and usage&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Get Help and Help Others&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;9&quot;&gt; 
 &lt;li&gt;If you have questions go to the &lt;a href=&quot;http://forum.lvgl.io/&quot;&gt;Forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://docs.lvgl.io/master/contributing/index.html&quot;&gt;Contributing&lt;/a&gt; guide to see how you can help to improve LVGL (15 minutes)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;span&gt;🤝&lt;/span&gt; Services&lt;/h2&gt; 
&lt;p&gt;LVGL LLC was established to provide a solid background for LVGL library and to offer several type of services to help you in UI development. With 15+ years of experience in the user interface and graphics industry we can help you the bring your UI to the next level.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Graphics design&lt;/strong&gt; Our in-house graphics designers are experts in creating beautiful modern designs which fit to your product and the resources of your hardware.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UI implementation&lt;/strong&gt; We can also implement your UI based on the design you or we have created. You can be sure that we will make the most out of your hardware and LVGL. If a feature or widget is missing from LVGL, don&#39;t worry, we will implement it for you.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Consulting and Support&lt;/strong&gt; We can support you with consulting as well to avoid pricey and time consuming mistakes during the UI development.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Board certification&lt;/strong&gt; For companies who are offering development boards, or production ready kits we do board certification which shows how board can run LVGL.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://lvgl.io/demos&quot;&gt;Demos&lt;/a&gt; as reference. For more information take look at the &lt;a href=&quot;https://lvgl.io/services&quot;&gt;Services page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://lvgl.io/#contact&quot;&gt;Contact us&lt;/a&gt; and tell how we can help.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🌟&lt;/span&gt; Contributing&lt;/h2&gt; 
&lt;p&gt;LVGL is an open project and contribution is very welcome. There are many ways to contribute from simply speaking about your project, through writing examples, improving the documentation, fixing bugs or even hosting your own project under the LVGL organization.&lt;/p&gt; 
&lt;p&gt;For a detailed description of contribution opportunities visit the &lt;a href=&quot;https://docs.lvgl.io/master/contributing/index.html&quot;&gt;Contributing&lt;/a&gt; section of the documentation.&lt;/p&gt; 
&lt;p&gt;More than 300 people already left their fingerprint in LVGL. Be one them! See you here! &lt;span&gt;🙂&lt;/span&gt;&lt;/p&gt; 
&lt;a href=&quot;https://github.com/lvgl/lvgl/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=lvgl/lvgl&amp;amp;max=48&quot;&gt; &lt;/a&gt; 
&lt;p&gt;... and many other.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sonic-net/sonic-buildimage</title>
      <link>https://github.com/sonic-net/sonic-buildimage</link>
      <description>&lt;p&gt;Scripts which perform an installable binary image build for SONiC&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;master builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=master&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=master&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=master&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.marvell-teralynx?branchName=master&amp;amp;label=Marvell-Teralynx&quot; alt=&quot;Marvell-Teralynx&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=master&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell-prestera/Azure.sonic-buildimage.official.marvell-prestera-armhf?branchName=master&amp;amp;label=Marvell-Prestera-armhf&quot; alt=&quot;Marvell-Prestera(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=999&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell-prestera/Azure.sonic-buildimage.official.marvell-prestera-arm64?branchName=master&amp;amp;label=Marvell-Prestera-arm64&quot; alt=&quot;Marvell-Prestera(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=master&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1665&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nvidia/Azure.sonic-buildimage.official.nvidia-bluefield?branchName=master&amp;amp;label=Nvidia-Bluefield&quot; alt=&quot;Nvidia-Bluefield&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1366&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/pensando/Azure.sonic-buildimage.official.pensando?branchName=master&amp;amp;label=Pensando&quot; alt=&quot;Pensando&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=master&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202405 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202405&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202405&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202405&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202405&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202405&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202405&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=999&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-arm64?branchName=202405&amp;amp;label=Marvell-arm64&quot; alt=&quot;Marvell(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202405&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1665&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nvidia/Azure.sonic-buildimage.official.nvidia-bluefield?branchName=202405&amp;amp;label=Nvidia-Bluefield&quot; alt=&quot;Nvidia-Bluefield&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1366&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/pensando/Azure.sonic-buildimage.official.pensando?branchName=202405&amp;amp;label=Pensando&quot; alt=&quot;Pensando&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202405&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202311 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202311&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202311&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202311&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202311&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202311&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202311&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=999&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-arm64?branchName=202311&amp;amp;label=Marvell-arm64&quot; alt=&quot;Marvell(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202311&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202305 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202205&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202305&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202305&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202305&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202305&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202305&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202305&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202305&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202305&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202211 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202205&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202211&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202211&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202211&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202211&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202211&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202211&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202211&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202211&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202205 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202205&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202205&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202205&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202205&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202205&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202205&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202205&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202205&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202205&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202111 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202111&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202111&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202111&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202111&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202111&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202111&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202111&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202111&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202111&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202012 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202012&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202012&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202012&amp;amp;label=Centec&quot; alt=&quot;Centec&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202012&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202012&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202012&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202012&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202012&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202012&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;201911 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=201911&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201911&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201911&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201911&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201911&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201911&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;201811 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201811&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201811&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201811&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201811&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201811&amp;amp;label=VS&quot; alt=&quot;VS&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;SONiC Image Azure Pipelines&lt;/h2&gt; 
&lt;p&gt;All SONiC project build pipeline could be found at &lt;a href=&quot;https://sonic-build.azurewebsites.net&quot;&gt;Download Portal for SONiC Images&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;sonic-buildimage&lt;/h1&gt; 
&lt;h2&gt;Build SONiC Switch Images&lt;/h2&gt; 
&lt;h1&gt;Description&lt;/h1&gt; 
&lt;p&gt;Following are the instructions on how to build an &lt;a href=&quot;https://github.com/opencomputeproject/onie&quot;&gt;(ONIE)&lt;/a&gt; compatible network operating system (NOS) installer image for network switches, and also how to build docker images running inside the NOS. Note that SONiC images are build per ASIC platform. Switches using the same ASIC platform share a common image. For a list of supported switches and ASIC, please refer to this &lt;a href=&quot;https://github.com/sonic-net/SONiC/wiki/Supported-Devices-and-Platforms&quot;&gt;list&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Hardware&lt;/h1&gt; 
&lt;p&gt;Any server can be a build image server as long as it has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Multiple cores to increase build speed&lt;/li&gt; 
 &lt;li&gt;Plenty of RAM (less than 8 GiB is likely to cause issues)&lt;/li&gt; 
 &lt;li&gt;300G of free disk space&lt;/li&gt; 
 &lt;li&gt;KVM Virtualization Support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you are in a VM, make sure you have support for nested virtualization. Some cases (e.g. building OVS image) also requires extra configuration options to expose the full KVM interface to the VM (e.g. &lt;a href=&quot;https://www.virtualbox.org/manual/ch10.html#gimproviders&quot;&gt;the KVM paravirtualization support on VirtualBox&lt;/a&gt;).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A good choice of OS for building SONiC is currently Ubuntu 20.04.&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install pip and jinja in host build machine, execute below commands if j2/j2cli is not available:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo apt install -y python3-pip
pip3 install --user j2cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Docker&lt;/a&gt; and configure your system to allow running the &#39;docker&#39; command without &#39;sudo&#39;: 
  &lt;ul&gt; 
   &lt;li&gt;Add current user to the docker group: &lt;code&gt;sudo gpasswd -a ${USER} docker&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Log out and log back in so that your group membership is re-evaluated&lt;/li&gt; 
   &lt;li&gt;If you are using Linux kernel 5.3 or newer, then you must use Docker 20.10.10 or newer. This is because older Docker versions did not allow the &lt;code&gt;clone3&lt;/code&gt; syscall, which is now used in Bookworm.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If a previous installation of Docker using snap was present on the system, remove it and also remove docker from snap before reinstallating docker. This will avoid &lt;a href=&quot;https://stackoverflow.com/questions/52526219/docker-mkdir-read-only-file-system&quot;&gt;known bugs that falsely report read-only filesystems issues&lt;/a&gt; during the build process.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Clone the repository with all the git submodules&lt;/h2&gt; 
&lt;p&gt;To clone the code repository recursively:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone --recurse-submodules https://github.com/sonic-net/sonic-buildimage.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To build SONiC installer image and docker images, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Ensure the &#39;overlay&#39; module is loaded on your development system
sudo modprobe overlay

# Enter the source directory
cd sonic-buildimage

# (Optional) Checkout a specific branch. By default, it uses master branch.
# For example, to checkout the branch 201911, use &quot;git checkout 201911&quot;
git checkout [branch_name]

# Execute make init once after cloning the repo,
# or after fetching remote repo with submodule updates
make init

# Execute make configure once to configure ASIC
make configure PLATFORM=[ASIC_VENDOR]

# Build SONiC image with 4 jobs in parallel.
# Note: You can set this higher, but 4 is a good number for most cases
#       and is well-tested.
make SONIC_BUILD_JOBS=4 all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The supported ASIC vendors are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;PLATFORM=barefoot&lt;/li&gt; 
 &lt;li&gt;PLATFORM=broadcom&lt;/li&gt; 
 &lt;li&gt;PLATFORM=marvell-prestera&lt;/li&gt; 
 &lt;li&gt;PLATFORM=marvell-teralynx&lt;/li&gt; 
 &lt;li&gt;PLATFORM=mellanox&lt;/li&gt; 
 &lt;li&gt;PLATFORM=centec&lt;/li&gt; 
 &lt;li&gt;PLATFORM=nephos&lt;/li&gt; 
 &lt;li&gt;PLATFORM=nvidia-bluefield&lt;/li&gt; 
 &lt;li&gt;PLATFORM=vs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage for ARM Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo apt-get install --allow-downgrades -y docker-ce=5:18.09.0~3-0~ubuntu-xenial
sudo apt-get install --allow-downgrades -y docker-ce-cli=5:18.09.0~3-0~ubuntu-xenial
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Arm32 bit for (ARMHF) platform&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Execute make configure once to configure ASIC and ARCH
make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=armhf
make target/sonic-[ASIC_VENDER]-armhf.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make configure PLATFORM=marvell-prestera PLATFORM_ARCH=armhf
make target/sonic-marvell-prestera-armhf.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Arm32 bit for (ARMHF) Marvell Prestera platform on amd64 host for debian buster using cross-compilation, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Execute make configure once to configure ASIC and ARCH for cross-compilation build

NOJESSIE=1 NOSTRETCH=1 BLDENV=buster CROSS_BLDENV=1 \
make configure PLATFORM=marvell-prestera PLATFORM_ARCH=armhf

# Execute Arm32 build using cross-compilation environment

NOJESSIE=1 NOSTRETCH=1 BLDENV=buster CROSS_BLDENV=1 make target/sonic-marvell-prestera-armhf.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running the above Arm32 build using cross-compilation instead of qemu emulator drastically reduces the build time.&lt;/p&gt; 
&lt;p&gt;To build Arm64 bit for platform&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Execute make configure once to configure ASIC and ARCH

make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=arm64

# example:

make configure PLATFORM=marvell-prestera PLATFORM_ARCH=arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Recommend reserving at least 100G free space to build one platform with a single job. The build process will use more disk if you are setting &lt;code&gt;SONIC_BUILD_JOBS&lt;/code&gt; to more than 1.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If Docker&#39;s workspace folder, &lt;code&gt;/var/lib/docker&lt;/code&gt;, resides on a partition without sufficient free space, you may encounter an error like the following during a Docker container build job:&lt;/p&gt; &lt;p&gt;&lt;code&gt;/usr/bin/tar: /path/to/sonic-buildimage/&amp;lt;some_file&amp;gt;: Cannot write: No space left on device&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The solution is to &lt;a href=&quot;https://www.ibm.com/docs/en/z-logdata-analytics/5.1.0?topic=compose-relocating-docker-root-directory&quot;&gt;move the directory&lt;/a&gt; to a partition with more free space.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;http_proxy=[your_proxy] https_proxy=[your_proxy] no_proxy=[your_no_proxy] make&lt;/code&gt; to enable http(s) proxy in the build process.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add your user account to &lt;code&gt;docker&lt;/code&gt; group and use your user account to make. &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt; are not supported.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The SONiC installer contains all docker images needed. SONiC uses one image for all devices of a same ASIC vendor.&lt;/p&gt; 
&lt;p&gt;For Broadcom ASIC, we build ONIE and EOS image. EOS image is used for Arista devices, ONIE image is used for all other Broadcom ASIC based devices.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make configure PLATFORM=broadcom
# build debian stretch required targets
BLDENV=stretch make stretch
# build ONIE image
make target/sonic-broadcom.bin
# build EOS image
make target/sonic-aboot-broadcom.swi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may find the rules/config file useful. It contains configuration options for the build process, like adding more verbosity or showing dependencies, username and password for base image etc.&lt;/p&gt; 
&lt;p&gt;Every docker image is built and saved to target/ directory. So, for instance, to build only docker-database, execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make target/docker-database.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Same goes for debian packages, which are under target/debs/:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make target/debs/swss_1.0.0_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every target has a clean target, so in order to clean swss, execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make target/debs/swss_1.0.0_amd64.deb-clean
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is recommended to use clean targets to clean all packages that are built together, like dev packages for instance. In order to be more familiar with build process and make some changes to it, it is recommended to read this short &lt;a href=&quot;https://raw.githubusercontent.com/sonic-net/sonic-buildimage/master/README.buildsystem.md&quot;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Build debug dockers and debug SONiC installer image&lt;/h2&gt; 
&lt;p&gt;SONiC build system supports building dockers and ONIE-image with debug tools and debug symbols, to help with live &amp;amp; core debugging. For details refer to &lt;a href=&quot;https://github.com/sonic-net/sonic-buildimage/raw/master/README.buildsystem.md&quot;&gt;SONiC Buildimage Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;SAI Version&lt;/h2&gt; 
&lt;p&gt;Please refer to &lt;a href=&quot;https://github.com/sonic-net/SONiC/wiki/Sonic-Roadmap-Planning&quot;&gt;SONiC roadmap&lt;/a&gt; on the SAI version for each SONiC release.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are running make for the first time, a sonic-slave-${USER} docker image will be built automatically. This may take a while, but it is a one-time action, so please be patient.&lt;/li&gt; 
 &lt;li&gt;The root user account is disabled. However, the created user can &lt;code&gt;sudo&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;The target directory is &lt;code&gt;./target&lt;/code&gt;, containing the NOS installer image and docker images. 
  &lt;ul&gt; 
   &lt;li&gt;sonic-generic.bin: SONiC switch installer image (ONIE compatible)&lt;/li&gt; 
   &lt;li&gt;sonic-aboot.bin: SONiC switch installer image (Aboot compatible)&lt;/li&gt; 
   &lt;li&gt;docker-base.gz: base docker image where other docker images are built from, only used in build process (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-database.gz: docker image for in-memory key-value store, used as inter-process communication (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-fpm.gz: docker image for quagga with fpm module enabled (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-orchagent.gz: docker image for SWitch State Service (SWSS) (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-brcm.gz: docker image for the daemon to sync database and Broadcom switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-cavm.gz: docker image for the daemon to sync database and Cavium switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-mlnx.gz: docker image for the daemon to sync database and Mellanox switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-nephos.gz: docker image for the daemon to sync database and Nephos switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-mrvl-teralynx.gz: docker image for the daemon to sync database and Marvell-Teralynx switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-mrvl-prestera.gz: docker image for the daemon to sync database and Marvell-Prestera switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-sonic-p4.gz: docker image for all-in-one for p4 software switch (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-sonic-vs.gz: docker image for all-in-one for software virtual switch (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-sonic-mgmt.gz: docker image for &lt;a href=&quot;https://github.com/sonic-net/sonic-mgmt&quot;&gt;managing, configuring and monitoring SONiC&lt;/a&gt; (gzip tar archive)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution Guide&lt;/h2&gt; 
&lt;p&gt;All contributors must sign a contribution license agreement before contributions can be accepted. Visit &lt;a href=&quot;https://easycla.lfx.linuxfoundation.org&quot;&gt;EasyCLA - Linux Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;GitHub Workflow&lt;/h2&gt; 
&lt;p&gt;We&#39;re following basic GitHub Flow. If you have no idea what we&#39;re talking about, check out &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub&#39;s official guide&lt;/a&gt;. Note that merge is only performed by the repository maintainer.&lt;/p&gt; 
&lt;p&gt;Guide for performing commits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Isolate each commit to one component/bugfix/issue/feature&lt;/li&gt; 
 &lt;li&gt;Use a standard commit message format:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[component/folder touched]: Description intent of your changes&lt;/p&gt; 
 &lt;p&gt;[List of changes]&lt;/p&gt; 
 &lt;p&gt;Signed-off-by: Your Name &lt;a href=&quot;mailto:your@email.com&quot;&gt;your@email.com&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;swss-common: Stabilize the ConsumerTable&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Fixing autoreconf&lt;/li&gt; 
  &lt;li&gt;Fixing unit-tests by adding checkers and initialize the DB before start&lt;/li&gt; 
  &lt;li&gt;Adding the ability to select from multiple channels&lt;/li&gt; 
  &lt;li&gt;Health-Monitor - The idea of the patch is that if something went wrong with the notification channel, we will have the option to know about it (Query the LLEN table length).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Signed-off-by: &lt;a href=&quot;mailto:user@dev.null&quot;&gt;user@dev.null&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Each developer should fork this repository and &lt;a href=&quot;https://help.github.com/articles/adding-collaborators-to-a-personal-repository&quot;&gt;add the team as a Contributor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Push your changes to your private fork and do &quot;pull-request&quot; to this repository&lt;/li&gt; 
 &lt;li&gt;Use a pull request to do code review&lt;/li&gt; 
 &lt;li&gt;Use issues to keep track of what is going on&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This project has adopted the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/&quot;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/faq/&quot;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&quot;mailto:opencode@microsoft.com&quot;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>firedancer-io/firedancer</title>
      <link>https://github.com/firedancer-io/firedancer</link>
      <description>&lt;p&gt;Firedancer is Jump Crypto&#39;s Solana validator software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;https://jumpcrypto.com/firedancer/&quot;&gt;Firedancer&lt;/a&gt; 🔥💃&lt;/h1&gt; 
&lt;p&gt;Firedancer is a new validator client for Solana.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; Designed from the ground up to be &lt;em&gt;fast&lt;/em&gt;. The concurrency model draws from experience in the low latency trading space, and the code contains many novel high-performance reimplementations of core Solana primitives.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt; The architecture of the validator allows it to run with a highly restrictive sandbox and almost no system calls.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Independent&lt;/strong&gt; Firedancer is written from scratch. This brings client diversity to the Solana network and helps it stay resilient to supply chain attacks in build tooling or dependencies.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;If you are an operator or looking to run the validator, see the Getting Started guide in the &lt;a href=&quot;https://docs.firedancer.io/&quot;&gt;Firedancer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;If you are an operator looking to run the validator, see the &lt;a href=&quot;https://docs.firedancer.io/guide/getting-started.html#releases&quot;&gt;Releases Guide&lt;/a&gt; in the documentation.&lt;/p&gt; 
&lt;p&gt;The Firedancer project is producing two validators,&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Frankendancer&lt;/strong&gt; A hybrid validator using parts of Firedancer and parts of Agave. Frankendancer uses the Firedancer networking stack and block production components to perform better while leader. Other functionality including execution and consensus is using the Agave validator code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Firedancer&lt;/strong&gt; A full from-scratch Firedancer with no Agave code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both validators are built from this codebase. The Firedancer validator is not ready for test or production use and has no releases. Frankendancer is currently available on both Solana testnet and mainnet-beta.&lt;/p&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;p&gt;Firedancer currently only supports Linux and requires a relatively new kernel, at least v4.18 to build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ git clone --recurse-submodules https://github.com/firedancer-io/firedancer.git
$ cd firedancer
$ ./deps.sh +dev
$ make -j run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;make run&lt;/code&gt; target runs the &lt;code&gt;fddev dev&lt;/code&gt; command. This development command will ensure your system is configured correctly before creating a genesis block, some keys, a faucet, and then starting a validator on the local machine. &lt;code&gt;fddev&lt;/code&gt; will use &lt;code&gt;sudo&lt;/code&gt; to make privileged changes to system configuration where needed. If &lt;code&gt;sudo&lt;/code&gt; is not available, you may need to run the command as root.&lt;/p&gt; 
&lt;p&gt;By default &lt;code&gt;fddev&lt;/code&gt; will create a new development cluster, if you wish to join this cluster with other validators, you can define &lt;code&gt;[rpc.entrypoints]&lt;/code&gt; in the configuration file to point at your first validator and run &lt;code&gt;fddev dev&lt;/code&gt; again.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Firedancer is available under the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache 2 license&lt;/a&gt;. Firedancer also includes external libraries that are available under a variety of licenses. See &lt;a href=&quot;https://raw.githubusercontent.com/firedancer-io/firedancer/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Klipper3d/klipper</title>
      <link>https://github.com/Klipper3d/klipper</link>
      <description>&lt;p&gt;Klipper is a 3d-printer firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the Klipper project!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.klipper3d.org/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo-small.png&quot; alt=&quot;Klipper&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.klipper3d.org/&quot;&gt;https://www.klipper3d.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Klipper firmware controls 3d-Printers. It combines the power of a general purpose computer with one or more micro-controllers. See the &lt;a href=&quot;https://www.klipper3d.org/Features.html&quot;&gt;features document&lt;/a&gt; for more information on why you should use the Klipper software.&lt;/p&gt; 
&lt;p&gt;Start by &lt;a href=&quot;https://www.klipper3d.org/Installation.html&quot;&gt;installing Klipper software&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Klipper software is Free Software. See the &lt;a href=&quot;https://raw.githubusercontent.com/Klipper3d/klipper/master/COPYING&quot;&gt;license&lt;/a&gt; or read the &lt;a href=&quot;https://www.klipper3d.org/Overview.html&quot;&gt;documentation&lt;/a&gt;. We depend on the generous support from our &lt;a href=&quot;https://www.klipper3d.org/Sponsors.html&quot;&gt;sponsors&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php/php-src</title>
      <link>https://github.com/php/php-src</link>
      <description>&lt;p&gt;The PHP Interpreter&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.php.net&quot;&gt; &lt;img alt=&quot;PHP&quot; src=&quot;https://www.php.net/images/logos/new-php-logo.svg?sanitize=true&quot; width=&quot;150&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;The PHP Interpreter&lt;/h1&gt; 
&lt;p&gt;PHP is a popular general-purpose scripting language that is especially suited to web development. Fast, flexible and pragmatic, PHP powers everything from your blog to the most popular websites in the world. PHP is distributed under the &lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/LICENSE&quot;&gt;PHP License v3.01&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/php/php-src/actions/workflows/push.yml&quot;&gt;&lt;img src=&quot;https://github.com/php/php-src/actions/workflows/push.yml/badge.svg?sanitize=true&quot; alt=&quot;Push&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:php&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/php.svg?sanitize=true&quot; alt=&quot;Fuzzing Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The PHP manual is available at &lt;a href=&quot;https://www.php.net/docs&quot;&gt;php.net/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prebuilt packages and binaries&lt;/h3&gt; 
&lt;p&gt;Prebuilt packages and binaries can be used to get up and running fast with PHP.&lt;/p&gt; 
&lt;p&gt;For Windows, the PHP binaries can be obtained from &lt;a href=&quot;https://windows.php.net&quot;&gt;windows.php.net&lt;/a&gt;. After extracting the archive the &lt;code&gt;*.exe&lt;/code&gt; files are ready to use.&lt;/p&gt; 
&lt;p&gt;For other systems, see the &lt;a href=&quot;https://www.php.net/install&quot;&gt;installation chapter&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Building PHP source code&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;For Windows, see &lt;a href=&quot;https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2&quot;&gt;Build your own PHP on Windows&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;For a minimal PHP build from Git, you will need autoconf, bison, and re2c. For a default build, you will additionally need libxml2 and libsqlite3.&lt;/p&gt; 
&lt;p&gt;On Ubuntu, you can install these using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install -y pkg-config build-essential autoconf bison re2c \
                    libxml2-dev libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora, you can install these using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo dnf install re2c bison autoconf make libtool ccache libxml2-devel sqlite-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generate configure:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./buildconf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Configure your build. &lt;code&gt;--enable-debug&lt;/code&gt; is recommended for development, see &lt;code&gt;./configure --help&lt;/code&gt; for a full list of options.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# For development
./configure --enable-debug
# For production
./configure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build PHP. To speed up the build, specify the maximum number of jobs using &lt;code&gt;-j&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make -j4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The number of jobs should usually match the number of available cores, which can be determined using &lt;code&gt;nproc&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Testing PHP source code&lt;/h2&gt; 
&lt;p&gt;PHP ships with an extensive test suite, the command &lt;code&gt;make test&lt;/code&gt; is used after successful compilation of the sources to run this test suite.&lt;/p&gt; 
&lt;p&gt;It is possible to run tests using multiple cores by setting &lt;code&gt;-jN&lt;/code&gt; in &lt;code&gt;TEST_PHP_ARGS&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make TEST_PHP_ARGS=-j4 test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Shall run &lt;code&gt;make test&lt;/code&gt; with a maximum of 4 concurrent jobs: Generally the maximum number of jobs should not exceed the number of cores available.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://qa.php.net&quot;&gt;qa.php.net&lt;/a&gt; site provides more detailed info about testing and quality assurance.&lt;/p&gt; 
&lt;h2&gt;Installing PHP built from source&lt;/h2&gt; 
&lt;p&gt;After a successful build (and test), PHP may be installed with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Depending on your permissions and prefix, &lt;code&gt;make install&lt;/code&gt; may need super user permissions.&lt;/p&gt; 
&lt;h2&gt;PHP extensions&lt;/h2&gt; 
&lt;p&gt;Extensions provide additional functionality on top of PHP. PHP consists of many essential bundled extensions. Additional extensions can be found in the PHP Extension Community Library - &lt;a href=&quot;https://pecl.php.net&quot;&gt;PECL&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The PHP source code is located in the Git repository at &lt;a href=&quot;https://github.com/php/php-src&quot;&gt;github.com/php/php-src&lt;/a&gt;. Contributions are most welcome by forking the repository and sending a pull request.&lt;/p&gt; 
&lt;p&gt;Discussions are done on GitHub, but depending on the topic can also be relayed to the official PHP developer mailing list &lt;a href=&quot;mailto:internals@lists.php.net&quot;&gt;internals@lists.php.net&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;New features require an RFC and must be accepted by the developers. See &lt;a href=&quot;https://wiki.php.net/rfc&quot;&gt;Request for comments - RFC&lt;/a&gt; and &lt;a href=&quot;https://wiki.php.net/rfc/voting&quot;&gt;Voting on PHP features&lt;/a&gt; for more information on the process.&lt;/p&gt; 
&lt;p&gt;Bug fixes don&#39;t require an RFC. If the bug has a GitHub issue, reference it in the commit message using &lt;code&gt;GH-NNNNNN&lt;/code&gt;. Use &lt;code&gt;#NNNNNN&lt;/code&gt; for tickets in the old &lt;a href=&quot;https://bugs.php.net&quot;&gt;bugs.php.net&lt;/a&gt; bug tracker.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Fix GH-7815: php_uname doesn&#39;t recognise latest Windows versions
Fix #55371: get_magic_quotes_gpc() throws deprecation warning
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://wiki.php.net/vcs/gitworkflow&quot;&gt;Git workflow&lt;/a&gt; for details on how pull requests are merged.&lt;/p&gt; 
&lt;h3&gt;Guidelines for contributors&lt;/h3&gt; 
&lt;p&gt;See further documents in the repository for more information on how to contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/CONTRIBUTING.md&quot;&gt;Contributing to PHP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/CODING_STANDARDS.md&quot;&gt;PHP coding standards&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://php.github.io/php-src/&quot;&gt;Internal documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/docs/mailinglist-rules.md&quot;&gt;Mailing list rules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/php/php-src/master/docs/release-process.md&quot;&gt;PHP release process&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;For the list of people who&#39;ve put work into PHP, please see the &lt;a href=&quot;https://www.php.net/credits.php&quot;&gt;PHP credits page&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>timescale/timescaledb</title>
      <link>https://github.com/timescale/timescaledb</link>
      <description>&lt;p&gt;A time-series database for high-performance real-time analytics packaged as a Postgres extension&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;picture align=&quot;center&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://assets.timescale.com/docs/images/timescale-logo-dark-mode.svg&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://assets.timescale.com/docs/images/timescale-logo-light-mode.svg&quot;&gt; 
  &lt;img alt=&quot;Timescale logo&quot;&gt; 
 &lt;/picture&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;h3&gt;TimescaleDB is a PostgreSQL extension for high-performance real-time analytics on time-series and event data&lt;/h3&gt; 
 &lt;p&gt;&lt;a href=&quot;https://docs.timescale.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Read_the_Timescale_docs-black?style=for-the-badge&amp;amp;logo=readthedocs&amp;amp;logoColor=white&quot; alt=&quot;Docs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://timescaledb.slack.com/archives/C4GT3N90X&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Ask_the_Timescale_community-black?style=for-the-badge&amp;amp;logo=slack&amp;amp;logoColor=white&quot; alt=&quot;SLACK&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://console.cloud.timescale.com/signup&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Try_Timescale_for_free-black?style=for-the-badge&amp;amp;logo=timescale&amp;amp;logoColor=white&quot; alt=&quot;Try TimescaleDB for free&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Install TimescaleDB&lt;/h2&gt; 
&lt;p&gt;Install from a Docker container:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Run the TimescaleDB container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password timescale/timescaledb:latest-pg17
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Connect to a database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker exec -it timescaledb psql -d &quot;postgres://postgres:password@localhost/postgres&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;a href=&quot;https://docs.timescale.com/self-hosted/latest/install/&quot;&gt;other installation options&lt;/a&gt; or try &lt;a href=&quot;https://docs.timescale.com/getting-started/latest/&quot;&gt;Timescale Cloud&lt;/a&gt; for free.&lt;/p&gt; 
&lt;h2&gt;Create a hypertable&lt;/h2&gt; 
&lt;p&gt;You create a regular table and then convert it into a hypertable. A hypertable automatically partitions data into chunks to accelerate your queries.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;-- Create timescaledb extension
CREATE EXTENSION IF NOT EXISTS timescaledb;

-- Create a regular SQL table
CREATE TABLE conditions (
  time        TIMESTAMPTZ       NOT NULL,
  location    TEXT              NOT NULL,
  temperature DOUBLE PRECISION  NULL,
  humidity    DOUBLE PRECISION  NULL
);

-- Convert the table into a hypertable that is partitioned by time
SELECT create_hypertable(&#39;conditions&#39;, by_range(&#39;time&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/hypertables/&quot;&gt;About hypertables&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/api/latest/hypertable/&quot;&gt;API reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Enable columnstore&lt;/h2&gt; 
&lt;p&gt;TimescaleDB&#39;s hypercore is a hybrid row-columnar store that boosts analytical query performance on your time-series and event data, while reducing data size by more than 90%. This keeps your analytics operating at lightning speed and ensures low storage costs as you scale. Data is inserted in row format in the rowstore and converted to columnar format in the columnstore based on your configuration.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Configure the columnstore on a hypertable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER TABLE conditions SET (
  timescaledb.compress,
  timescaledb.compress_segmentby = &#39;location&#39;
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a policy to automatically convert chunks in row format that are older than seven days to chunks in the columnar format:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT add_compression_policy(&#39;conditions&#39;, INTERVAL &#39;7 days&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See more:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/compression/about-compression/&quot;&gt;About columnstore&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/compression/manual-compression/&quot;&gt;Enable columnstore manually&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/api/latest/compression/&quot;&gt;API reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Insert and query data&lt;/h2&gt; 
&lt;p&gt;Insert and query data in a hypertable via regular SQL commands. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Insert data into a hypertable named &lt;code&gt;conditions&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO conditions
  VALUES
    (NOW(), &#39;office&#39;,   70.0, 50.0),
    (NOW(), &#39;basement&#39;, 66.5, 60.0),
    (NOW(), &#39;garage&#39;,   77.0, 65.2);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Return the number of entries written to the table conditions in the last 12 hours:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT
  COUNT(*)
FROM
  conditions
WHERE
  time &amp;gt; NOW() - INTERVAL &#39;12 hours&#39;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See more:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/query-data/&quot;&gt;Query data&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/write-data/&quot;&gt;Write data&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Create time buckets&lt;/h2&gt; 
&lt;p&gt;Time buckets enable you to aggregate data in hypertables by time interval and calculate summary values.&lt;/p&gt; 
&lt;p&gt;For example, calculate the average daily temperature in a table named &lt;code&gt;conditions&lt;/code&gt;. The table has a &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;temperature&lt;/code&gt; columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT
  time_bucket(&#39;1 day&#39;, time) AS bucket,
  AVG(temperature) AS avg_temp
FROM
  conditions
GROUP BY
  bucket
ORDER BY
  bucket ASC;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/time-buckets/about-time-buckets/&quot;&gt;About time buckets&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/api/latest/hyperfunctions/time_bucket/&quot;&gt;API reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/&quot;&gt;All TimescaleDB features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/tutorials/latest/&quot;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Create continuous aggregates&lt;/h2&gt; 
&lt;p&gt;Continuous aggregates make real-time analytics run faster on very large datasets. They continuously and incrementally refresh a query in the background, so that when you run such query, only the data that has changed needs to be computed, not the entire dataset. This is what makes them different from regular PostgreSQL &lt;a href=&quot;https://www.postgresql.org/docs/current/rules-materializedviews.html&quot;&gt;materialized views&lt;/a&gt;, which cannot be incrementally materialized and have to be rebuilt from scratch every time you want to refresh it.&lt;/p&gt; 
&lt;p&gt;For example, create a continuous aggregate view for daily weather data in two simple steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a materialized view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE MATERIALIZED VIEW conditions_summary_daily
WITH (timescaledb.continuous) AS
SELECT
  location,
  time_bucket(INTERVAL &#39;1 day&#39;, time) AS bucket,
  AVG(temperature),
  MAX(temperature),
  MIN(temperature)
FROM
  conditions
GROUP BY
  location,
  bucket;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a policy to refresh the view every hour:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT
  add_continuous_aggregate_policy(
    &#39;conditions_summary_daily&#39;,
    start_offset =&amp;gt; INTERVAL &#39;1 month&#39;,
    end_offset =&amp;gt; INTERVAL &#39;1 day&#39;,
    schedule_interval =&amp;gt; INTERVAL &#39;1 hour&#39;
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See more:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/continuous-aggregates/&quot;&gt;About continuous aggregates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.timescale.com/api/latest/continuous-aggregates/create_materialized_view/&quot;&gt;API reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Want TimescaleDB hosted and managed for you? Try Timescale Cloud&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.timescale.com/getting-started/latest/&quot;&gt;Timescale Cloud&lt;/a&gt; is the modern PostgreSQL data platform for all your applications. It enhances PostgreSQL to handle time series, events, real-time analytics, and vector search—all in a single database alongside transactional workloads. You get one system that handles live data ingestion, late and out-of-order updates, and low latency queries, with the performance, reliability, and scalability your app needs. Ideal for IoT, crypto, finance, SaaS, and a myriad other domains, Timescale Cloud allows you to build data-heavy, mission-critical apps while retaining the familiarity and reliability of PostgreSQL.&lt;/p&gt; 
&lt;p&gt;A Timescale Cloud service is a single optimized 100% PostgreSQL database instance that you use as is, or extend with capabilities specific to your business needs. The available capabilities are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Time-series and analytics&lt;/strong&gt;: PostgreSQL with TimescaleDB. The PostgreSQL you know and love, supercharged with functionality for storing and querying time-series data at scale for real-time analytics and other use cases. Get faster time-based queries with hypertables, continuous aggregates, and columnar storage. Save on storage with native compression, data retention policies, and bottomless data tiering to Amazon S3.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI and vector&lt;/strong&gt;: PostgreSQL with vector extensions. Use PostgreSQL as a vector database with purpose built extensions for building AI applications from start to scale. Get fast and accurate similarity search with the pgvector and pgvectorscale extensions. Create vector embeddings and perform LLM reasoning on your data with the pgai extension.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;: the trusted industry-standard RDBMS. Ideal for applications requiring strong data consistency, complex relationships, and advanced querying capabilities. Get ACID compliance, extensive SQL support, JSON handling, and extensibility through custom functions, data types, and extensions. All services include all the cloud tooling you&#39;d expect for production use: &lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/backup-restore/backup-restore-cloud/&quot;&gt;automatic backups&lt;/a&gt;, &lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/ha-replicas/&quot;&gt;high availability&lt;/a&gt;, &lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/ha-replicas/read-scaling/&quot;&gt;read replicas&lt;/a&gt;, &lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/services/service-management/#fork-a-service&quot;&gt;data forking&lt;/a&gt;, &lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/services/connection-pooling/&quot;&gt;connection pooling&lt;/a&gt;, &lt;a href=&quot;https://docs.timescale.com/use-timescale/latest/data-tiering/&quot;&gt;tiered storage&lt;/a&gt;, &lt;a href=&quot;https://docs.timescale.com/about/latest/pricing-and-account-management/&quot;&gt;usage-based storage&lt;/a&gt;, and much more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Check build status&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Linux/macOS&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Linux i386&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Windows&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Coverity&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Code Coverage&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;OpenSSF&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/timescale/timescaledb/actions/workflows/linux-build-and-test.yaml?query=workflow%3ARegression+branch%3Amain+event%3Aschedule&quot;&gt;&lt;img src=&quot;https://github.com/timescale/timescaledb/actions/workflows/linux-build-and-test.yaml/badge.svg?branch=main&amp;amp;event=schedule&quot; alt=&quot;Build Status Linux/macOS&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/timescale/timescaledb/actions/workflows/linux-32bit-build-and-test.yaml?query=workflow%3ARegression+branch%3Amain+event%3Aschedule&quot;&gt;&lt;img src=&quot;https://github.com/timescale/timescaledb/actions/workflows/linux-32bit-build-and-test.yaml/badge.svg?branch=main&amp;amp;event=schedule&quot; alt=&quot;Build Status Linux i386&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/timescale/timescaledb/actions/workflows/windows-build-and-test.yaml?query=workflow%3ARegression+branch%3Amain+event%3Aschedule&quot;&gt;&lt;img src=&quot;https://github.com/timescale/timescaledb/actions/workflows/windows-build-and-test.yaml/badge.svg?branch=main&amp;amp;event=schedule&quot; alt=&quot;Windows build status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://scan.coverity.com/projects/timescale-timescaledb&quot;&gt;&lt;img src=&quot;https://scan.coverity.com/projects/timescale-timescaledb/badge.svg?sanitize=true&quot; alt=&quot;Coverity Scan Build Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://codecov.io/gh/timescale/timescaledb&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/timescale/timescaledb/branch/main/graphs/badge.svg?branch=main&quot; alt=&quot;Code Coverage&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.bestpractices.dev/projects/8012&quot;&gt;&lt;img src=&quot;https://www.bestpractices.dev/projects/8012/badge&quot; alt=&quot;OpenSSF Best Practices&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Get involved&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to TimescaleDB! See &lt;a href=&quot;https://github.com/timescale/timescaledb/raw/main/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; and &lt;a href=&quot;https://github.com/timescale/timescaledb/raw/main/docs/StyleGuide.md&quot;&gt;Code style guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Learn about Timescale&lt;/h2&gt; 
&lt;p&gt;Timescale is PostgreSQL made powerful. To learn more about the company and its products, visit &lt;a href=&quot;https://www.timescale.com&quot;&gt;timescale.com&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openssl/openssl</title>
      <link>https://github.com/openssl/openssl</link>
      <description>&lt;p&gt;TLS/SSL and crypto library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the OpenSSL Project&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.openssl.org&quot; title=&quot;OpenSSL Homepage&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/openssl/openssl/master/doc/images/openssl.svg?sanitize=true&quot; alt=&quot;openssl logo&quot; title=&quot;OpenSSL Logo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/openssl/openssl/actions?query=workflow%3A%22GitHub+CI%22&quot; title=&quot;GitHub Actions CI&quot;&gt;&lt;img src=&quot;https://github.com/openssl/openssl/workflows/GitHub%20CI/badge.svg?sanitize=true&quot; alt=&quot;github actions ci badge&quot; title=&quot;GitHub Actions CI Status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/os-zoo.yml/badge.svg?sanitize=true&quot; alt=&quot;Nightly OS Zoo ci badge&quot;&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/provider-compatibility.yml/badge.svg?sanitize=true&quot; alt=&quot;Provider Compatibility&quot;&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/run_quic_interop.yml/badge.svg?sanitize=true&quot; alt=&quot;Quic Interop&quot;&gt; &lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/run-checker-daily.yml/badge.svg?sanitize=true&quot; alt=&quot;Daily checks&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenSSL is a robust, commercial-grade, full-featured Open Source Toolkit for the TLS (formerly SSL), DTLS and QUIC (currently client side only) protocols.&lt;/p&gt; 
&lt;p&gt;The protocol implementations are based on a full-strength general purpose cryptographic library, which can also be used stand-alone. Also included is a cryptographic module validated to conform with FIPS standards.&lt;/p&gt; 
&lt;p&gt;OpenSSL is descended from the SSLeay library developed by Eric A. Young and Tim J. Hudson.&lt;/p&gt; 
&lt;p&gt;The official Home Page of the OpenSSL Project is &lt;a href=&quot;https://www.openssl.org&quot; title=&quot;OpenSSL Homepage&quot;&gt;www.openssl.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#download&quot;&gt;Download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#build-and-install&quot;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#legalities&quot;&gt;Legalities&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;The OpenSSL toolkit includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libssl&lt;/strong&gt; an implementation of all TLS protocol versions up to TLSv1.3 (&lt;a href=&quot;https://tools.ietf.org/html/rfc8446&quot;&gt;RFC 8446&lt;/a&gt;), DTLS protocol versions up to DTLSv1.2 (&lt;a href=&quot;https://tools.ietf.org/html/rfc6347&quot;&gt;RFC 6347&lt;/a&gt;) and the QUIC (currently client side only) version 1 protocol (&lt;a href=&quot;https://tools.ietf.org/html/rfc9000&quot;&gt;RFC 9000&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libcrypto&lt;/strong&gt; a full-strength general purpose cryptographic library. It constitutes the basis of the TLS implementation, but can also be used independently.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; the OpenSSL command line tool, a swiss army knife for cryptographic tasks, testing and analyzing. It can be used for&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;creation of key parameters&lt;/li&gt; 
   &lt;li&gt;creation of X.509 certificates, CSRs and CRLs&lt;/li&gt; 
   &lt;li&gt;calculation of message digests&lt;/li&gt; 
   &lt;li&gt;encryption and decryption&lt;/li&gt; 
   &lt;li&gt;SSL/TLS/DTLS and client and server tests&lt;/li&gt; 
   &lt;li&gt;QUIC client tests&lt;/li&gt; 
   &lt;li&gt;handling of S/MIME signed or encrypted mail&lt;/li&gt; 
   &lt;li&gt;and more...&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Download&lt;/h1&gt; 
&lt;h2&gt;For Production Use&lt;/h2&gt; 
&lt;p&gt;Source code tarballs of the official releases can be downloaded from &lt;a href=&quot;https://openssl-library.org/source/&quot;&gt;openssl-library.org/source/&lt;/a&gt;. The OpenSSL project does not distribute the toolkit in binary form.&lt;/p&gt; 
&lt;p&gt;However, for a large variety of operating systems precompiled versions of the OpenSSL toolkit are available. In particular, on Linux and other Unix operating systems, it is normally recommended to link against the precompiled shared libraries provided by the distributor or vendor.&lt;/p&gt; 
&lt;p&gt;We also maintain a list of third parties that produce OpenSSL binaries for various Operating Systems (including Windows) on the &lt;a href=&quot;https://github.com/openssl/openssl/wiki/Binaries&quot; title=&quot;List of third party OpenSSL binaries&quot;&gt;Binaries&lt;/a&gt; page on our wiki.&lt;/p&gt; 
&lt;h2&gt;For Testing and Development&lt;/h2&gt; 
&lt;p&gt;Although testing and development could in theory also be done using the source tarballs, having a local copy of the git repository with the entire project history gives you much more insight into the code base.&lt;/p&gt; 
&lt;p&gt;The main OpenSSL Git repository is private. There is a public GitHub mirror of it at &lt;a href=&quot;https://github.com/openssl/openssl&quot; title=&quot;OpenSSL GitHub Mirror&quot;&gt;github.com/openssl/openssl&lt;/a&gt;, which is updated automatically from the former on every commit.&lt;/p&gt; 
&lt;p&gt;A local copy of the Git repository can be obtained by cloning it from the GitHub mirror using&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/openssl/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you intend to contribute to OpenSSL, either to fix bugs or contribute new features, you need to fork the GitHub mirror and clone your public fork instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/yourname/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is necessary because all development of OpenSSL nowadays is done via GitHub pull requests. For more details, see &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&quot;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Build and Install&lt;/h1&gt; 
&lt;p&gt;After obtaining the Source, have a look at the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/INSTALL.md&quot;&gt;INSTALL&lt;/a&gt; file for detailed instructions about building and installing OpenSSL. For some platforms, the installation instructions are amended by a platform specific document.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-UNIX.md&quot;&gt;Notes for UNIX-like platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-ANDROID.md&quot;&gt;Notes for Android platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-WINDOWS.md&quot;&gt;Notes for Windows platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-DJGPP.md&quot;&gt;Notes for the DOS platform with DJGPP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VMS.md&quot;&gt;Notes for the OpenVMS platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-PERL.md&quot;&gt;Notes on Perl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VALGRIND.md&quot;&gt;Notes on Valgrind&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Specific notes on upgrading to OpenSSL 3.x from previous versions can be found in the &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man7/ossl-guide-migration.html&quot; title=&quot;OpenSSL Migration Guide&quot;&gt;ossl-guide-migration(7ossl)&lt;/a&gt; manual page.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;h2&gt;README Files&lt;/h2&gt; 
&lt;p&gt;There are some README.md files in the top level of the source distribution containing additional information on specific topics.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-QUIC.md&quot;&gt;Information about the OpenSSL QUIC protocol implementation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-PROVIDERS.md&quot;&gt;Information about the OpenSSL Provider architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-FIPS.md&quot;&gt;Information about using the OpenSSL FIPS validated module&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-ENGINES.md&quot;&gt;Information about the legacy OpenSSL Engine architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The OpenSSL Guide&lt;/h2&gt; 
&lt;p&gt;There are some tutorial and introductory pages on some important OpenSSL topics within the &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man7/ossl-guide-introduction.html&quot; title=&quot;An introduction to OpenSSL&quot;&gt;OpenSSL Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual Pages&lt;/h2&gt; 
&lt;p&gt;The manual pages for the master branch and all current stable releases are available online.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/manmaster&quot;&gt;OpenSSL master&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/man3.0&quot;&gt;OpenSSL 3.0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/man3.1&quot;&gt;OpenSSL 3.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/docs/man3.2&quot;&gt;OpenSSL 3.2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demos&lt;/h2&gt; 
&lt;p&gt;There are numerous source code demos for using various OpenSSL capabilities in the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/demos&quot;&gt;demos subfolder&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Wiki&lt;/h2&gt; 
&lt;p&gt;There is a &lt;a href=&quot;https://github.com/openssl/openssl/wiki&quot; title=&quot;OpenSSL Wiki&quot;&gt;GitHub Wiki&lt;/a&gt; which is currently not very active.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;OpenSSL is licensed under the Apache License 2.0, which means that you are free to get and use it for commercial and non-commercial purposes as long as you fulfill its conditions.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Support&lt;/h1&gt; 
&lt;p&gt;There are various ways to get in touch. The correct channel depends on your requirement. See the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;If you are interested and willing to contribute to the OpenSSL project, please take a look at the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Legalities&lt;/h1&gt; 
&lt;p&gt;A number of nations restrict the use or export of cryptography. If you are potentially subject to such restrictions, you should seek legal advice before attempting to develop or distribute cryptographic code.&lt;/p&gt; 
&lt;h1&gt;Copyright&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 1998-2025 The OpenSSL Project Authors&lt;/p&gt; 
&lt;p&gt;Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson&lt;/p&gt; 
&lt;p&gt;All rights reserved.&lt;/p&gt; 
&lt;!-- Links  --&gt; 
&lt;!-- Logos and Badges --&gt;</description>
    </item>
    
    <item>
      <title>confluentinc/librdkafka</title>
      <link>https://github.com/confluentinc/librdkafka</link>
      <description>&lt;p&gt;The Apache Kafka C/C++ library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;librdkafka - the Apache Kafka C/C++ client library&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 2012-2022, &lt;a href=&quot;http://www.edenhill.se/&quot;&gt;Magnus Edenhill&lt;/a&gt;. 2023 &lt;a href=&quot;https://www.confluent.io/&quot;&gt;Confluent Inc.&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka&quot;&gt;https://github.com/confluentinc/librdkafka&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;librdkafka&lt;/strong&gt; is a C library implementation of the &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt; protocol, providing Producer, Consumer and Admin clients. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;librdkafka&lt;/strong&gt; is licensed under the 2-clause BSD license.&lt;/p&gt; 
&lt;p&gt;KAFKA is a registered trademark of The Apache Software Foundation and has been licensed for use by librdkafka. librdkafka has no affiliation with and is not endorsed by The Apache Software Foundation.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full Exactly-Once-Semantics (EOS) support&lt;/li&gt; 
 &lt;li&gt;High-level producer, including Idempotent and Transactional producers&lt;/li&gt; 
 &lt;li&gt;High-level balanced KafkaConsumer (requires broker &amp;gt;= 0.9)&lt;/li&gt; 
 &lt;li&gt;Simple (legacy) consumer&lt;/li&gt; 
 &lt;li&gt;Admin client&lt;/li&gt; 
 &lt;li&gt;Compression: snappy, gzip, lz4, zstd&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki/Using-SSL-with-librdkafka&quot;&gt;SSL&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki/Using-SASL-with-librdkafka&quot;&gt;SASL&lt;/a&gt; (GSSAPI/Kerberos/SSPI, PLAIN, SCRAM, OAUTHBEARER) support&lt;/li&gt; 
 &lt;li&gt;Full list of &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/INTRODUCTION.md#supported-kips&quot;&gt;supported KIPs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Broker version support: &amp;gt;=0.8 (see &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/INTRODUCTION.md#broker-version-compatibility&quot;&gt;Broker version compatibility&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Guaranteed API stability for C &amp;amp; C++ APIs (ABI safety guaranteed for C)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/STATISTICS.md&quot;&gt;Statistics&lt;/a&gt; metrics&lt;/li&gt; 
 &lt;li&gt;Debian package: librdkafka1 and librdkafka-dev in Debian and Ubuntu&lt;/li&gt; 
 &lt;li&gt;RPM package: librdkafka and librdkafka-devel&lt;/li&gt; 
 &lt;li&gt;Gentoo package: dev-libs/librdkafka&lt;/li&gt; 
 &lt;li&gt;Portable: runs on Linux, MacOS X, Windows, Solaris, FreeBSD, AIX, ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Public API in &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/src/rdkafka.h&quot;&gt;C header&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/src-cpp/rdkafkacpp.h&quot;&gt;C++ header&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Introduction and manual in &lt;a href=&quot;https://github.com/confluentinc/librdkafka/raw/master/INTRODUCTION.md&quot;&gt;INTRODUCTION.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Configuration properties in &lt;a href=&quot;https://github.com/confluentinc/librdkafka/raw/master/CONFIGURATION.md&quot;&gt;CONFIGURATION.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Statistics metrics in &lt;a href=&quot;https://github.com/confluentinc/librdkafka/raw/master/STATISTICS.md&quot;&gt;STATISTICS.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki&quot;&gt;Frequently asked questions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Step-by-step tutorial &lt;a href=&quot;https://developer.confluent.io/get-started/c/&quot;&gt;Getting Started with Apache Kafka and C/C++&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The &lt;code&gt;master&lt;/code&gt; branch is actively developed, use latest &lt;a href=&quot;https://github.com/confluentinc/librdkafka/releases&quot;&gt;release&lt;/a&gt; for production use.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Installing prebuilt packages&lt;/h2&gt; 
&lt;p&gt;On Mac OSX, install librdkafka with homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install librdkafka
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Debian and Ubuntu, install librdkafka from the Confluent APT repositories, see instructions &lt;a href=&quot;https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software&quot;&gt;here&lt;/a&gt; and then install librdkafka:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ apt install librdkafka-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On RedHat, CentOS, Fedora, install librdkafka from the Confluent YUM repositories, instructions &lt;a href=&quot;https://docs.confluent.io/current/installation/installing_cp/rhel-centos.html#get-the-software&quot;&gt;here&lt;/a&gt; and then install librdkafka:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ yum install librdkafka-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows, reference &lt;a href=&quot;https://www.nuget.org/packages/librdkafka.redist/&quot;&gt;librdkafka.redist&lt;/a&gt; NuGet package in your Visual Studio project.&lt;/p&gt; 
&lt;p&gt;For other platforms, follow the source building instructions below.&lt;/p&gt; 
&lt;h2&gt;Installing librdkafka using vcpkg&lt;/h2&gt; 
&lt;p&gt;You can download and install librdkafka using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install vcpkg if not already installed
$ git clone https://github.com/Microsoft/vcpkg.git
$ cd vcpkg
$ ./bootstrap-vcpkg.sh
$ ./vcpkg integrate install

# Install librdkafka
$ vcpkg install librdkafka
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The librdkafka package in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h2&gt;Build from source&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;The GNU toolchain
GNU make
pthreads
zlib-dev (optional, for gzip compression support)
libssl-dev (optional, for SSL and SASL SCRAM support)
libsasl2-dev (optional, for SASL GSSAPI support)
libzstd-dev (optional, for ZStd compression support)
libcurl-dev (optional, for SASL OAUTHBEARER OIDC support)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Static linking of ZStd (requires zstd &amp;gt;= 1.2.1) in the producer enables encoding the original size in the compression frame header, which will speed up the consumer. Use &lt;code&gt;STATIC_LIB_libzstd=/path/to/libzstd.a ./configure --enable-static&lt;/code&gt; to enable static ZStd linking. MacOSX example: &lt;code&gt;STATIC_LIB_libzstd=$(brew ls -v zstd | grep libzstd.a$) ./configure --enable-static&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;  ./configure
  # Or, to automatically install dependencies using the system&#39;s package manager:
  # ./configure --install-deps
  # Or, build dependencies from source:
  # ./configure --install-deps --source-deps-only

  make
  sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/README.win32&quot;&gt;README.win32&lt;/a&gt; for instructions how to build on Windows with Microsoft Visual Studio.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/packaging/cmake/README.md&quot;&gt;CMake instructions&lt;/a&gt; for experimental CMake build (unsupported).&lt;/p&gt; 
&lt;h2&gt;Usage in code&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://developer.confluent.io/get-started/c/&quot;&gt;getting Started with Apache Kafka and C/C++&lt;/a&gt; for a basic tutorial.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/examples/&quot;&gt;examples directory&lt;/a&gt; for code using:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Producers: basic producers, idempotent producers, transactional producers.&lt;/li&gt; 
   &lt;li&gt;Consumers: basic consumers, reading batches of messages.&lt;/li&gt; 
   &lt;li&gt;Performance and latency testing tools.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/confluentinc/examples/tree/master/clients/cloud/c&quot;&gt;examples GitHub repo&lt;/a&gt; for code connecting to a cloud streaming data service based on Apache Kafka&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Link your program with &lt;code&gt;-lrdkafka&lt;/code&gt; (C) or &lt;code&gt;-lrdkafka++&lt;/code&gt; (C++).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Commercial support&lt;/h2&gt; 
&lt;p&gt;Commercial support is available from &lt;a href=&quot;https://www.confluent.io/&quot;&gt;Confluent Inc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community support&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Only the &lt;a href=&quot;https://github.com/confluentinc/librdkafka/releases&quot;&gt;latest official release&lt;/a&gt; is supported for community members.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;File bug reports and feature requests using &lt;a href=&quot;https://github.com/confluentinc/librdkafka/issues&quot;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Questions and discussions are welcome on the &lt;a href=&quot;https://github.com/confluentinc/librdkafka/discussions&quot;&gt;Discussions&lt;/a&gt; forum, and on the &lt;a href=&quot;https://launchpass.com/confluentcommunity&quot;&gt;Confluent Community slack&lt;/a&gt; #clients channel.&lt;/p&gt; 
&lt;h1&gt;Language bindings&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;C#/.NET: &lt;a href=&quot;https://github.com/confluentinc/confluent-kafka-dotnet&quot;&gt;confluent-kafka-dotnet&lt;/a&gt; (based on &lt;a href=&quot;https://github.com/ah-/rdkafka-dotnet&quot;&gt;rdkafka-dotnet&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;C++: &lt;a href=&quot;https://github.com/mfontanini/cppkafka&quot;&gt;cppkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;C++: &lt;a href=&quot;https://github.com/Morgan-Stanley/modern-cpp-kafka&quot;&gt;modern-cpp-kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Common Lisp: &lt;a href=&quot;https://github.com/SahilKang/cl-rdkafka&quot;&gt;cl-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;D (C-like): &lt;a href=&quot;https://github.com/DlangApache/librdkafka/&quot;&gt;librdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;D (C++-like): &lt;a href=&quot;https://github.com/tamediadigital/librdkafka-d&quot;&gt;librdkafkad&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Erlang: &lt;a href=&quot;https://github.com/silviucpp/erlkaf&quot;&gt;erlkaf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Go: &lt;a href=&quot;https://github.com/confluentinc/confluent-kafka-go&quot;&gt;confluent-kafka-go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Haskell (kafka, conduit, avro, schema registry): &lt;a href=&quot;https://github.com/haskell-works/hw-kafka&quot;&gt;hw-kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kotlin Native: &lt;a href=&quot;https://github.com/icemachined/kafka-kotlin-native&quot;&gt;Kafka-Kotlin-Native&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lua: &lt;a href=&quot;https://github.com/mistsv/luardkafka&quot;&gt;luardkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Node.js: &lt;a href=&quot;https://github.com/Blizzard/node-rdkafka&quot;&gt;node-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OCaml: &lt;a href=&quot;https://github.com/didier-wenzek/ocaml-kafka&quot;&gt;ocaml-kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Perl: &lt;a href=&quot;https://github.com/bookingcom/perl-Net-Kafka&quot;&gt;Net::Kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP: &lt;a href=&quot;https://github.com/arnaud-lb/php-rdkafka&quot;&gt;php-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP: &lt;a href=&quot;https://github.com/php-kafka/php-simple-kafka-client&quot;&gt;php-simple-kafka-client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Python: &lt;a href=&quot;https://github.com/confluentinc/confluent-kafka-python&quot;&gt;confluent-kafka-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Python: &lt;a href=&quot;https://github.com/Parsely/pykafka&quot;&gt;PyKafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/reiseburo/hermann&quot;&gt;Hermann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/appsignal/rdkafka-ruby&quot;&gt;rdkafka-ruby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rust: &lt;a href=&quot;https://github.com/fede1024/rust-rdkafka&quot;&gt;rust-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tcl: &lt;a href=&quot;https://github.com/flightaware/kafkatcl&quot;&gt;KafkaTcl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Shell: &lt;a href=&quot;https://github.com/edenhill/kafkacat&quot;&gt;kafkacat&lt;/a&gt; - Apache Kafka command line tool&lt;/li&gt; 
 &lt;li&gt;Swift: &lt;a href=&quot;https://github.com/PerfectlySoft/Perfect-Kafka&quot;&gt;Perfect-Kafka&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki/Powered-by-librdkafka&quot;&gt;Powered by librdkafka&lt;/a&gt; for an incomplete list of librdkafka users.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis/redis</title>
      <link>https://github.com/redis/redis</link>
      <description>&lt;p&gt;Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs, Bitmaps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://codecov.io/github/redis/redis&quot;&gt;&lt;img src=&quot;https://codecov.io/github/redis/redis/graph/badge.svg?token=6bVHb5fRuz&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. You can find more detailed documentation at &lt;a href=&quot;https://redis.io&quot;&gt;redis.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What is Redis?&lt;/h2&gt; 
&lt;p&gt;Redis is often referred to as a &lt;em&gt;data structures&lt;/em&gt; server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a &lt;em&gt;server-client&lt;/em&gt; model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way.&lt;/p&gt; 
&lt;p&gt;Data structures implemented into Redis have a few special properties:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Redis cares to store them on disk, even if they are always served and modified into the server memory. This means that Redis is fast, but that it is also non-volatile.&lt;/li&gt; 
 &lt;li&gt;The implementation of data structures emphasizes memory efficiency, so data structures inside Redis will likely use less memory compared to the same data structure modelled using a high-level programming language.&lt;/li&gt; 
 &lt;li&gt;Redis offers a number of features that are natural to find in a database, like replication, tunable levels of durability, clustering, and high availability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Another good example is to think of Redis as a more complex version of memcached, where the operations are not just SETs and GETs, but operations that work with complex data types like Lists, Sets, ordered data structures, and so forth.&lt;/p&gt; 
&lt;p&gt;If you want to know more, this is a list of selected starting points:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Introduction to Redis data types. &lt;a href=&quot;https://redis.io/docs/latest/develop/data-types/&quot;&gt;https://redis.io/docs/latest/develop/data-types/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The full list of Redis commands. &lt;a href=&quot;https://redis.io/commands&quot;&gt;https://redis.io/commands&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;There is much more inside the official Redis documentation. &lt;a href=&quot;https://redis.io/documentation&quot;&gt;https://redis.io/documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Redis Community Edition?&lt;/h2&gt; 
&lt;p&gt;Redis OSS was renamed Redis Community Edition (CE) with the v7.4 release.&lt;/p&gt; 
&lt;p&gt;Redis Ltd. also offers &lt;a href=&quot;https://redis.io/enterprise/&quot;&gt;Redis Software&lt;/a&gt;, a self-managed software with additional compliance, reliability, and resiliency for enterprise scaling, and &lt;a href=&quot;https://redis.io/cloud/&quot;&gt;Redis Cloud&lt;/a&gt;, a fully managed service integrated with Google Cloud, Azure, and AWS for production-ready apps.&lt;/p&gt; 
&lt;p&gt;Read more about the differences between Redis Community Edition and Redis &lt;a href=&quot;https://redis.io/comparisons/oss-vs-enterprise/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building Redis&lt;/h2&gt; 
&lt;p&gt;Redis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; 
&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and Redis is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; 
&lt;p&gt;It is as simple as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu) and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To append a suffix to Redis program names, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&quot;-alt&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can build a 32 bit Redis binary using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make 32bit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After building Redis, it is a good idea to test it using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If TLS is built, running the tests with TLS enabled (you will need &lt;code&gt;tcl-tls&lt;/code&gt; installed):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ./utils/gen-test-certs.sh
% ./runtest --tls
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; 
&lt;p&gt;Redis has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; 
&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make distclean
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will clean: jemalloc, lua, hiredis, linenoise and other dependencies.&lt;/p&gt; 
&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; 
&lt;p&gt;If after building Redis with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the Redis distribution.&lt;/p&gt; 
&lt;p&gt;In case of build errors when trying to build a 32 bit binary of Redis, try the following steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; 
 &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&quot;-m32 -march=native&quot; LDFLAGS=&quot;-m32&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Allocator&lt;/h2&gt; 
&lt;p&gt;Selecting a non-default memory allocator when building Redis is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. Redis is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; 
&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make MALLOC=libc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Monotonic clock&lt;/h2&gt; 
&lt;p&gt;By default, Redis will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&quot;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&quot;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make CFLAGS=&quot;-DUSE_PROCESSOR_CLOCK&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Verbose build&lt;/h2&gt; 
&lt;p&gt;Redis will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make V=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Running Redis&lt;/h2&gt; 
&lt;p&gt;To run Redis with the default configuration, just type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./redis-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to provide your redis.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./redis-server /path/to/redis.conf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to alter the Redis configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ./redis-server --port 9999 --replicaof 127.0.0.1 6379
% ./redis-server /etc/redis/6379.conf --loglevel debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All the options in redis.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; 
&lt;h2&gt;Running Redis with TLS&lt;/h2&gt; 
&lt;p&gt;Please consult the &lt;a href=&quot;https://raw.githubusercontent.com/redis/redis/unstable/TLS.md&quot;&gt;TLS.md&lt;/a&gt; file for more information on how to use Redis with TLS.&lt;/p&gt; 
&lt;h2&gt;Playing with Redis&lt;/h2&gt; 
&lt;p&gt;You can use redis-cli to play with Redis. Start a redis-server instance, then in another terminal try the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd src
% ./redis-cli
redis&amp;gt; ping
PONG
redis&amp;gt; set foo bar
OK
redis&amp;gt; get foo
&quot;bar&quot;
redis&amp;gt; incr mycounter
(integer) 1
redis&amp;gt; incr mycounter
(integer) 2
redis&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find the list of all the available commands at &lt;a href=&quot;https://redis.io/commands&quot;&gt;https://redis.io/commands&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing Redis&lt;/h2&gt; 
&lt;p&gt;In order to install Redis binaries into /usr/local/bin, just use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Redis, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% cd utils
% ./install_server.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; 
&lt;p&gt;The script will ask you a few questions and will setup everything you need to run Redis properly as a background daemon that will start again on system reboots.&lt;/p&gt; 
&lt;p&gt;You&#39;ll be able to stop and start Redis using the script named &lt;code&gt;/etc/init.d/redis_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/redis_6379&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Code contributions&lt;/h2&gt; 
&lt;p&gt;By contributing code to the Redis project in any form, including sending a pull request via GitHub, a code fragment or patch via private email or public discussion groups, you agree to release your code under the terms of the &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/CONTRIBUTING.md&quot;&gt;Redis Software Grant and Contributor License Agreement&lt;/a&gt;. Redis software contains contributions to the original Redis core project, which are owned by their contributors and licensed under the 3BSD license. Any copy of that license in this repository applies only to those contributions. Redis releases all Redis Community Edition versions from 7.4.x and thereafter under the RSALv2/SSPL dual-license as described in the &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; file included in the Redis Community Edition source distribution.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; file in this source distribution for more information. For security bugs and vulnerabilities, please see &lt;a href=&quot;https://github.com/redis/redis/raw/unstable/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Redis Trademarks&lt;/h2&gt; 
&lt;p&gt;The purpose of a trademark is to identify the goods and services of a person or company without causing confusion. As the registered owner of its name and logo, Redis accepts certain limited uses of its trademarks but it has requirements that must be followed as described in its Trademark Guidelines available at: &lt;a href=&quot;https://redis.com/legal/trademark-guidelines/&quot;&gt;https://redis.com/legal/trademark-guidelines/&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Redis internals&lt;/h1&gt; 
&lt;p&gt;If you are reading this README you are likely in front of a GitHub page or you just untarred the Redis distribution tar ball. In both the cases you are basically one step away from the source code, so here we explain the Redis source code layout, what is in each file as a general idea, the most important functions and structures inside the Redis server and so forth. We keep all the discussion at a high level without digging into the details since this document would be huge otherwise and our code base changes continuously, but a general idea should be a good starting point to understand more. Moreover most of the code is heavily commented and easy to follow.&lt;/p&gt; 
&lt;h2&gt;Source code layout&lt;/h2&gt; 
&lt;p&gt;The Redis root directory just contains this README, the Makefile which calls the real Makefile inside the &lt;code&gt;src&lt;/code&gt; directory and an example configuration for Redis and Redis Sentinel. You can find a few shell scripts that are used in order to execute the Redis, Redis Cluster and Redis Sentinel unit tests, which are implemented inside the &lt;code&gt;tests&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;Inside the root are the following important directories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;src&lt;/code&gt;: contains the Redis implementation, written in C.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: contains the unit tests, implemented in Tcl.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;deps&lt;/code&gt;: contains libraries Redis uses. Everything needed to compile Redis is inside this directory; your system just needs to provide &lt;code&gt;libc&lt;/code&gt;, a POSIX compatible interface and a C compiler. Notably &lt;code&gt;deps&lt;/code&gt; contains a copy of &lt;code&gt;jemalloc&lt;/code&gt;, which is the default allocator of Redis under Linux. Note that under &lt;code&gt;deps&lt;/code&gt; there are also things which started with the Redis project, but for which the main repository is not &lt;code&gt;redis/redis&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a few more directories but they are not very important for our goals here. We&#39;ll focus mostly on &lt;code&gt;src&lt;/code&gt;, where the Redis implementation is contained, exploring what there is inside each file. The order in which files are exposed is the logical one to follow in order to disclose different layers of complexity incrementally.&lt;/p&gt; 
&lt;p&gt;Note: lately Redis was refactored quite a bit. Function names and file names have been changed, so you may find that this documentation reflects the &lt;code&gt;unstable&lt;/code&gt; branch more closely. For instance, in Redis 3.0 the &lt;code&gt;server.c&lt;/code&gt; and &lt;code&gt;server.h&lt;/code&gt; files were named &lt;code&gt;redis.c&lt;/code&gt; and &lt;code&gt;redis.h&lt;/code&gt;. However the overall structure is the same. Keep in mind that all the new developments and pull requests should be performed against the &lt;code&gt;unstable&lt;/code&gt; branch.&lt;/p&gt; 
&lt;h2&gt;server.h&lt;/h2&gt; 
&lt;p&gt;The simplest way to understand how a program works is to understand the data structures it uses. So we&#39;ll start from the main header file of Redis, which is &lt;code&gt;server.h&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All the server configuration and in general all the shared state is defined in a global structure called &lt;code&gt;server&lt;/code&gt;, of type &lt;code&gt;struct redisServer&lt;/code&gt;. A few important fields in this structure are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;server.db&lt;/code&gt; is an array of Redis databases, where data is stored.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server.commands&lt;/code&gt; is the command table.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server.clients&lt;/code&gt; is a linked list of clients connected to the server.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server.master&lt;/code&gt; is a special client, the master, if the instance is a replica.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are tons of other fields. Most fields are commented directly inside the structure definition.&lt;/p&gt; 
&lt;p&gt;Another important Redis data structure is the one defining a client. In the past it was called &lt;code&gt;redisClient&lt;/code&gt;, now just &lt;code&gt;client&lt;/code&gt;. The structure has many fields, here we&#39;ll just show the main ones:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct client {
    int fd;
    sds querybuf;
    int argc;
    robj **argv;
    redisDb *db;
    int flags;
    list *reply;
    // ... many other fields ...
    char buf[PROTO_REPLY_CHUNK_BYTES];
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The client structure defines a &lt;em&gt;connected client&lt;/em&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;fd&lt;/code&gt; field is the client socket file descriptor.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; are populated with the command the client is executing, so that functions implementing a given Redis command can read the arguments.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;querybuf&lt;/code&gt; accumulates the requests from the client, which are parsed by the Redis server according to the Redis protocol and executed by calling the implementations of the commands the client is executing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;reply&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; are dynamic and static buffers that accumulate the replies the server sends to the client. These buffers are incrementally written to the socket as soon as the file descriptor is writable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As you can see in the client structure above, arguments in a command are described as &lt;code&gt;robj&lt;/code&gt; structures. The following is the full &lt;code&gt;robj&lt;/code&gt; structure, which defines a &lt;em&gt;Redis object&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct redisObject {
    unsigned type:4;
    unsigned encoding:4;
    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or
                            * LFU data (least significant 8 bits frequency
                            * and most significant 16 bits access time). */
    int refcount;
    void *ptr;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Basically this structure can represent all the basic Redis data types like strings, lists, sets, sorted sets and so forth. The interesting thing is that it has a &lt;code&gt;type&lt;/code&gt; field, so that it is possible to know what type a given object has, and a &lt;code&gt;refcount&lt;/code&gt;, so that the same object can be referenced in multiple places without allocating it multiple times. Finally the &lt;code&gt;ptr&lt;/code&gt; field points to the actual representation of the object, which might vary even for the same type, depending on the &lt;code&gt;encoding&lt;/code&gt; used.&lt;/p&gt; 
&lt;p&gt;Redis objects are used extensively in the Redis internals, however in order to avoid the overhead of indirect accesses, recently in many places we just use plain dynamic strings not wrapped inside a Redis object.&lt;/p&gt; 
&lt;h2&gt;server.c&lt;/h2&gt; 
&lt;p&gt;This is the entry point of the Redis server, where the &lt;code&gt;main()&lt;/code&gt; function is defined. The following are the most important steps in order to startup the Redis server.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;initServerConfig()&lt;/code&gt; sets up the default values of the &lt;code&gt;server&lt;/code&gt; structure.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;initServer()&lt;/code&gt; allocates the data structures needed to operate, setup the listening socket, and so forth.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;aeMain()&lt;/code&gt; starts the event loop which listens for new connections.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are two special functions called periodically by the event loop:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;serverCron()&lt;/code&gt; is called periodically (according to &lt;code&gt;server.hz&lt;/code&gt; frequency), and performs tasks that must be performed from time to time, like checking for timed out clients.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;beforeSleep()&lt;/code&gt; is called every time the event loop fired, Redis served a few requests, and is returning back into the event loop.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Inside server.c you can find code that handles other vital things of the Redis server:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;call()&lt;/code&gt; is used in order to call a given command in the context of a given client.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;activeExpireCycle()&lt;/code&gt; handles eviction of keys with a time to live set via the &lt;code&gt;EXPIRE&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;performEvictions()&lt;/code&gt; is called when a new write command should be performed but Redis is out of memory according to the &lt;code&gt;maxmemory&lt;/code&gt; directive.&lt;/li&gt; 
 &lt;li&gt;The global variable &lt;code&gt;redisCommandTable&lt;/code&gt; defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of each command.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;commands.c&lt;/h2&gt; 
&lt;p&gt;This file is auto generated by utils/generate-command-code.py, the content is based on the JSON files in the src/commands folder. These are meant to be the single source of truth about the Redis commands, and all the metadata about them. These JSON files are not meant to be used by anyone directly, instead that metadata can be obtained via the &lt;code&gt;COMMAND&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;networking.c&lt;/h2&gt; 
&lt;p&gt;This file defines all the I/O functions with clients, masters and replicas (which in Redis are just special clients):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;createClient()&lt;/code&gt; allocates and initializes a new client.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;addReply*()&lt;/code&gt; family of functions are used by command implementations in order to append data to the client structure, that will be transmitted to the client as a reply for a given command executed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;writeToClient()&lt;/code&gt; transmits the data pending in the output buffers to the client and is called by the &lt;em&gt;writable event handler&lt;/em&gt; &lt;code&gt;sendReplyToClient()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;readQueryFromClient()&lt;/code&gt; is the &lt;em&gt;readable event handler&lt;/em&gt; and accumulates data read from the client into the query buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;processInputBuffer()&lt;/code&gt; is the entry point in order to parse the client query buffer according to the Redis protocol. Once commands are ready to be processed, it calls &lt;code&gt;processCommand()&lt;/code&gt; which is defined inside &lt;code&gt;server.c&lt;/code&gt; in order to actually execute the command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;freeClient()&lt;/code&gt; deallocates, disconnects and removes a client.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;aof.c and rdb.c&lt;/h2&gt; 
&lt;p&gt;As you can guess from the names, these files implement the RDB and AOF persistence for Redis. Redis uses a persistence model based on the &lt;code&gt;fork()&lt;/code&gt; system call in order to create a process with the same (shared) memory content of the main Redis process. This secondary process dumps the content of the memory on disk. This is used by &lt;code&gt;rdb.c&lt;/code&gt; to create the snapshots on disk and by &lt;code&gt;aof.c&lt;/code&gt; in order to perform the AOF rewrite when the append only file gets too big.&lt;/p&gt; 
&lt;p&gt;The implementation inside &lt;code&gt;aof.c&lt;/code&gt; has additional functions in order to implement an API that allows commands to append new commands into the AOF file as clients execute them.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;call()&lt;/code&gt; function defined inside &lt;code&gt;server.c&lt;/code&gt; is responsible for calling the functions that in turn will write the commands into the AOF.&lt;/p&gt; 
&lt;h2&gt;db.c&lt;/h2&gt; 
&lt;p&gt;Certain Redis commands operate on specific data types; others are general. Examples of generic commands are &lt;code&gt;DEL&lt;/code&gt; and &lt;code&gt;EXPIRE&lt;/code&gt;. They operate on keys and not on their values specifically. All those generic commands are defined inside &lt;code&gt;db.c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Moreover &lt;code&gt;db.c&lt;/code&gt; implements an API in order to perform certain operations on the Redis dataset without directly accessing the internal data structures.&lt;/p&gt; 
&lt;p&gt;The most important functions inside &lt;code&gt;db.c&lt;/code&gt; which are used in many command implementations are the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lookupKeyRead()&lt;/code&gt; and &lt;code&gt;lookupKeyWrite()&lt;/code&gt; are used in order to get a pointer to the value associated to a given key, or &lt;code&gt;NULL&lt;/code&gt; if the key does not exist.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dbAdd()&lt;/code&gt; and its higher level counterpart &lt;code&gt;setKey()&lt;/code&gt; create a new key in a Redis database.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dbDelete()&lt;/code&gt; removes a key and its associated value.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;emptyData()&lt;/code&gt; removes an entire single database or all the databases defined.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The rest of the file implements the generic commands exposed to the client.&lt;/p&gt; 
&lt;h2&gt;object.c&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;robj&lt;/code&gt; structure defining Redis objects was already described. Inside &lt;code&gt;object.c&lt;/code&gt; there are all the functions that operate with Redis objects at a basic level, like functions to allocate new objects, handle the reference counting and so forth. Notable functions inside this file:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;incrRefCount()&lt;/code&gt; and &lt;code&gt;decrRefCount()&lt;/code&gt; are used in order to increment or decrement an object reference count. When it drops to 0 the object is finally freed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;createObject()&lt;/code&gt; allocates a new object. There are also specialized functions to allocate string objects having a specific content, like &lt;code&gt;createStringObjectFromLongLong()&lt;/code&gt; and similar functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This file also implements the &lt;code&gt;OBJECT&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;replication.c&lt;/h2&gt; 
&lt;p&gt;This is one of the most complex files inside Redis, it is recommended to approach it only after getting a bit familiar with the rest of the code base. In this file there is the implementation of both the master and replica role of Redis.&lt;/p&gt; 
&lt;p&gt;One of the most important functions inside this file is &lt;code&gt;replicationFeedSlaves()&lt;/code&gt; that writes commands to the clients representing replica instances connected to our master, so that the replicas can get the writes performed by the clients: this way their data set will remain synchronized with the one in the master.&lt;/p&gt; 
&lt;p&gt;This file also implements both the &lt;code&gt;SYNC&lt;/code&gt; and &lt;code&gt;PSYNC&lt;/code&gt; commands that are used in order to perform the first synchronization between masters and replicas, or to continue the replication after a disconnection.&lt;/p&gt; 
&lt;h2&gt;Script&lt;/h2&gt; 
&lt;p&gt;The script unit is composed of 3 units:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;script.c&lt;/code&gt; - integration of scripts with Redis (commands execution, set replication/resp, ...)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;script_lua.c&lt;/code&gt; - responsible to execute Lua code, uses &lt;code&gt;script.c&lt;/code&gt; to interact with Redis from within the Lua code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;function_lua.c&lt;/code&gt; - contains the Lua engine implementation, uses &lt;code&gt;script_lua.c&lt;/code&gt; to execute the Lua code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;functions.c&lt;/code&gt; - contains Redis Functions implementation (&lt;code&gt;FUNCTION&lt;/code&gt; command), uses &lt;code&gt;functions_lua.c&lt;/code&gt; if the function it wants to invoke needs the Lua engine.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;eval.c&lt;/code&gt; - contains the &lt;code&gt;eval&lt;/code&gt; implementation using &lt;code&gt;script_lua.c&lt;/code&gt; to invoke the Lua code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other C files&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;t_hash.c&lt;/code&gt;, &lt;code&gt;t_list.c&lt;/code&gt;, &lt;code&gt;t_set.c&lt;/code&gt;, &lt;code&gt;t_string.c&lt;/code&gt;, &lt;code&gt;t_zset.c&lt;/code&gt; and &lt;code&gt;t_stream.c&lt;/code&gt; contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client command implementations for these data types.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ae.c&lt;/code&gt; implements the Redis event loop, it&#39;s a self contained library which is simple to read and understand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sds.c&lt;/code&gt; is the Redis string library, check &lt;a href=&quot;https://github.com/antirez/sds&quot;&gt;https://github.com/antirez/sds&lt;/a&gt; for more information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;anet.c&lt;/code&gt; is a library to use POSIX networking in a simpler way compared to the raw interface exposed by the kernel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dict.c&lt;/code&gt; is an implementation of a non-blocking hash table which rehashes incrementally.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cluster.c&lt;/code&gt; implements the Redis Cluster. Probably a good read only after being very familiar with the rest of the Redis code base. If you want to read &lt;code&gt;cluster.c&lt;/code&gt; make sure to read the &lt;a href=&quot;https://redis.io/docs/latest/operate/oss_and_stack/reference/cluster-spec/&quot;&gt;Redis Cluster specification&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Anatomy of a Redis command&lt;/h2&gt; 
&lt;p&gt;All the Redis commands are defined in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;void foobarCommand(client *c) {
    printf(&quot;%s&quot;,c-&amp;gt;argv[1]-&amp;gt;ptr); /* Do something with the argument. */
    addReply(c,shared.ok); /* Reply something to the client. */
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command function is referenced by a JSON file, together with its metadata, see &lt;code&gt;commands.c&lt;/code&gt; described above for details. The command flags are documented in the comment above the &lt;code&gt;struct redisCommand&lt;/code&gt; in &lt;code&gt;server.h&lt;/code&gt;. For other details, please refer to the &lt;code&gt;COMMAND&lt;/code&gt; command. &lt;a href=&quot;https://redis.io/commands/command/&quot;&gt;https://redis.io/commands/command/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;After the command operates in some way, it returns a reply to the client, usually using &lt;code&gt;addReply()&lt;/code&gt; or a similar function defined inside &lt;code&gt;networking.c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;There are tons of command implementations inside the Redis source code that can serve as examples of actual commands implementations (e.g. pingCommand). Writing a few toy commands can be a good exercise to get familiar with the code base.&lt;/p&gt; 
&lt;p&gt;There are also many other files not described here, but it is useless to cover everything. We just want to help you with the first steps. Eventually you&#39;ll find your way inside the Redis code base :-)&lt;/p&gt; 
&lt;p&gt;Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aircrack-ng/aircrack-ng</title>
      <link>https://github.com/aircrack-ng/aircrack-ng</link>
      <description>&lt;p&gt;WiFi security auditing tools suite&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aircrack-ng&lt;/h1&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;h3&gt;GitHub CI&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/almalinux.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/almalinux.yml/badge.svg?event=push&quot; alt=&quot;Alma Linux CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/alpine.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/alpine.yml/badge.svg?event=push&quot; alt=&quot;Alpine Linux&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/dragonflybsd.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/dragonflybsd.yml/badge.svg?event=push&quot; alt=&quot;DragonFlyBSD CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/freebsd.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/freebsd.yml/badge.svg?event=push&quot; alt=&quot;FreeBSD CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/gentoo.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/gentoo.yml/badge.svg?sanitize=true&quot; alt=&quot;Gentoo CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/kali.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/kali.yml/badge.svg?event=push&quot; alt=&quot;Kali Linux CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux.yml/badge.svg?event=push&quot; alt=&quot;Linux CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux-pcre.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux-pcre.yml/badge.svg?event=push&quot; alt=&quot;Linux PCRE CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/macos.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/macos.yml/badge.svg?event=push&quot; alt=&quot;macOS CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/netbsd.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/netbsd.yml/badge.svg?event=push&quot; alt=&quot;NetBSD CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/openbsd.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/openbsd.yml/badge.svg?event=push&quot; alt=&quot;OpenBSD CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/windows.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/windows.yml/badge.svg?event=push&quot; alt=&quot;Windows CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Others&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/scanbuild.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/scanbuild.yml/badge.svg?sanitize=true&quot; alt=&quot;Clang Scan-build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/codespell.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/codespell.yml/badge.svg?sanitize=true&quot; alt=&quot;Codespell&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/coverity.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/coverity.yml/badge.svg?sanitize=true&quot; alt=&quot;Coverity Scan&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/docker.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/docker.yml/badge.svg?event=push&quot; alt=&quot;Docker (git) push to DockerHub&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/markdown-link.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/markdown-link.yml/badge.svg?event=push&quot; alt=&quot;Markdown link&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/pvs-studio.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/pvs-studio.yml/badge.svg?event=push&quot; alt=&quot;PVS-Studio Analysis&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/style.yml&quot;&gt;&lt;img src=&quot;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/style.yml/badge.svg?event=push&quot; alt=&quot;Style &amp;amp; Consistency&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Repository versions&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/archlinux/v/extra/x86_64/aircrack-ng&quot; alt=&quot;Arch Linux package&quot;&gt; &lt;img src=&quot;https://img.shields.io/debian/v/aircrack-ng/stable?label=debian%20stable&quot; alt=&quot;Debian package&quot;&gt; &lt;img src=&quot;https://img.shields.io/debian/v/aircrack-ng/testing?label=debian%20testing&quot; alt=&quot;Debian package&quot;&gt; &lt;img src=&quot;https://img.shields.io/docker/v/aircrackng/git?color=blue&amp;amp;label=Docker%20Tag%20%7C%20git&quot; alt=&quot;Docker Image Version (latest by date)&quot;&gt; &lt;img src=&quot;https://img.shields.io/fedora/v/aircrack-ng&quot; alt=&quot;Fedora package&quot;&gt; &lt;img src=&quot;https://img.shields.io/homebrew/v/aircrack-ng&quot; alt=&quot;homebrew version&quot;&gt; &lt;img src=&quot;https://img.shields.io/ubuntu/v/aircrack-ng/bionic?label=Ubuntu%2018.04&quot; alt=&quot;Ubuntu package&quot;&gt; &lt;img src=&quot;https://img.shields.io/ubuntu/v/aircrack-ng/focal?label=Ubuntu%2020.04&quot; alt=&quot;Ubuntu package&quot;&gt; &lt;img src=&quot;https://img.shields.io/ubuntu/v/aircrack-ng/jammy?label=Ubuntu%2022.04&quot; alt=&quot;Ubuntu package&quot;&gt; &lt;img src=&quot;https://img.shields.io/ubuntu/v/aircrack-ng/kinetic?label=Ubuntu%2022.10&quot; alt=&quot;Ubuntu package&quot;&gt; &lt;img src=&quot;https://img.shields.io/ubuntu/v/aircrack-ng/lunar?label=Ubuntu%2023.04&quot; alt=&quot;Ubuntu package&quot;&gt; &lt;img src=&quot;https://img.shields.io/ubuntu/v/aircrack-ng/mantic?label=Ubuntu%2023.10&quot; alt=&quot;Ubuntu package&quot;&gt; &lt;img src=&quot;https://img.shields.io/ubuntu/v/aircrack-ng/noble?label=Ubuntu%2024.04&quot; alt=&quot;Ubuntu package&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;p&gt;Aircrack-ng is a complete suite of tools to assess WiFi network security.&lt;/p&gt; 
&lt;p&gt;It focuses on different areas of WiFi security:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Monitoring: Packet capture and export of data to text files for further processing by third party tools.&lt;/li&gt; 
 &lt;li&gt;Attacking: Replay attacks, deauthentication, fake access points and others via packet injection.&lt;/li&gt; 
 &lt;li&gt;Testing: Checking WiFi cards and driver capabilities (capture and injection).&lt;/li&gt; 
 &lt;li&gt;Cracking: WEP and WPA PSK (WPA 1 and 2).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All tools are command line which allows for heavy scripting. A lot of GUIs have taken advantage of this feature. It works primarily on Linux but also Windows, macOS, FreeBSD, OpenBSD, NetBSD, as well as Solaris and even eComStation 2.&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Autoconf&lt;/li&gt; 
 &lt;li&gt;Automake&lt;/li&gt; 
 &lt;li&gt;Libtool&lt;/li&gt; 
 &lt;li&gt;shtool&lt;/li&gt; 
 &lt;li&gt;OpenSSL development package or libgcrypt development package.&lt;/li&gt; 
 &lt;li&gt;Airmon-ng (Linux) requires ethtool, usbutils, and often pciutils.&lt;/li&gt; 
 &lt;li&gt;On Windows, cygwin has to be used and it also requires w32api package.&lt;/li&gt; 
 &lt;li&gt;On Windows, if using clang, libiconv and libiconv-devel&lt;/li&gt; 
 &lt;li&gt;Linux: LibNetlink 1 or 3. It can be disabled by passing --disable-libnl to configure.&lt;/li&gt; 
 &lt;li&gt;pkg-config (pkgconf on FreeBSD, DragonFlyBSD, OpenBSD and NetBSD)&lt;/li&gt; 
 &lt;li&gt;FreeBSD, DragonFlyBSD, OpenBSD, NetBSD, Solaris and OS X with Macports: gmake&lt;/li&gt; 
 &lt;li&gt;Linux/Cygwin: make and Standard C++ Library development package (Debian: libstdc++-dev)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: Airmon-ng only requires pciutils if the system has a PCI/PCIe bus and it is populated. Such bus can be present even if not physically visible. For example, it is present, and populated on the Raspberry Pi 4, therefore pciutils is required on that device.&lt;/p&gt; 
&lt;h2&gt;Optional stuff&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you want SSID filtering with regular expression in airodump-ng (--essid-regex) PCRE or PCRE2 development package is required.&lt;/li&gt; 
 &lt;li&gt;If you want to use airolib-ng and &#39;-r&#39; option in aircrack-ng, SQLite development package &amp;gt;= 3.3.17 (3.6.X version or better is recommended)&lt;/li&gt; 
 &lt;li&gt;If you want to use Airpcap, the &#39;developer&#39; directory from the CD/ISO/SDK is required.&lt;/li&gt; 
 &lt;li&gt;In order to build &lt;code&gt;besside-ng&lt;/code&gt;, &lt;code&gt;besside-ng-crawler&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;tkiptun-ng&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt;, libpcap development package is required (on Cygwin, use the Airpcap SDK instead; see above)&lt;/li&gt; 
 &lt;li&gt;rfkill&lt;/li&gt; 
 &lt;li&gt;If you want Airodump-ng to log GPS coordinates, gpsd is needed&lt;/li&gt; 
 &lt;li&gt;For best performance on SMP machines, ensure the hwloc library and headers are installed. It is strongly recommended on high core count systems, it may give a serious speed boost&lt;/li&gt; 
 &lt;li&gt;CMocka and expect for testing&lt;/li&gt; 
 &lt;li&gt;For integration testing on Linux only: tcpdump, HostAPd, WPA Supplicant and screen&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installing required and optional dependencies&lt;/h2&gt; 
&lt;p&gt;Below are instructions for installing the basic requirements to build &lt;code&gt;aircrack-ng&lt;/code&gt; for a number of operating systems.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: CMocka, tcpdump, screen, HostAPd and WPA Supplicant should not be dependencies when packaging Aircrack-ng.&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;h4&gt;Arch Linux&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo pacman -Sy base-devel libnl openssl ethtool util-linux zlib libpcap sqlite pcre2 hwloc cmocka hostapd wpa_supplicant tcpdump screen iw usbutils pciutils expect
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Debian/Ubuntu&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential autoconf automake libtool pkg-config libnl-3-dev libnl-genl-3-dev libssl-dev ethtool shtool rfkill zlib1g-dev libpcap-dev libsqlite3-dev libpcre2-dev libhwloc-dev libcmocka-dev hostapd wpasupplicant tcpdump screen iw usbutils expect
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fedora&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre2-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel expect
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;CentOS/RHEL 7&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo yum install epel-release
sudo ./centos_autotools.sh
# Remove older installation of automake/autoconf
sudo yum remove autoconf automake
sudo yum install sqlite-devel openssl-devel libpcap-devel pcre2-devel rfkill libnl3-devel ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: autoconf, automake, libtool, and pkgconfig in the repositories are too old. The script centos_autotools.sh automatically installs dependencies to compile then install the tools.&lt;/p&gt; 
&lt;h4&gt;CentOS/RHEL 8&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo yum config-manager --set-enabled powertools
sudo yum install epel-release
sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre2-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;openSUSE&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo zypper install autoconf automake libtool pkg-config libnl3-devel libopenssl-1_1-devel zlib-devel libpcap-devel sqlite3-devel pcre2-devel hwloc-devel libcmocka-devel hostapd wpa_supplicant tcpdump screen iw gcc-c++ gcc ethtool pciutils usbutils expect
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Mageia&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo urpmi autoconf automake libtool pkgconfig libnl3-devel libopenssl-devel zlib-devel libpcap-devel sqlite3-devel pcre2-devel hwloc-devel libcmocka-devel hostapd wpa_supplicant tcpdump screen iw gcc-c++ gcc make expect
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alpine&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo apk add gcc g++ make autoconf automake libtool libnl3-dev openssl-dev ethtool libpcap-dev cmocka-dev hostapd wpa_supplicant tcpdump screen iw pkgconf util-linux sqlite-dev pcre2-dev linux-headers zlib-dev pciutils usbutils expect
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Community repository needs to be enabled for iw&lt;/p&gt; 
&lt;h4&gt;Clear Linux&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;sudo swupd bundle-add c-basic devpkg-openssl devpkg-libgcrypt devpkg-libnl devpkg-hwloc devpkg-libpcap devpkg-pcre2 devpkg-sqlite-autoconf ethtool wget network-basic software-testing sysadmin-basic wpa_supplicant os-testsuite
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: hostapd must be compiled manually, it is not present in the repository&lt;/p&gt; 
&lt;h3&gt;BSD&lt;/h3&gt; 
&lt;h4&gt;FreeBSD&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;pkg install pkgconf shtool libtool gcc9 automake autoconf pcre2 sqlite3 openssl gmake hwloc cmocka
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;DragonflyBSD&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;pkg install pkgconf shtool libtool gcc8 automake autoconf pcre2 sqlite3 libgcrypt gmake cmocka
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;OpenBSD&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;pkg_add pkgconf shtool libtool gcc automake autoconf pcre2 sqlite3 openssl gmake cmocka
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;NetBSD&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;pkg_add pkgconf libtool gcc7 automake autoconf pcre2 sqlite3 openssl gmake cmocka
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;XCode, Xcode command line tools and HomeBrew are required.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install autoconf automake libtool openssl shtool pkg-config hwloc pcre2 sqlite3 libpcap cmocka
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;h4&gt;Cygwin&lt;/h4&gt; 
&lt;p&gt;Cygwin requires the full path to the &lt;code&gt;setup.exe&lt;/code&gt; utility, in order to automate the installation of the necessary packages. In addition, it requires the location of your installation, a path to the cached packages download location, and a mirror URL.&lt;/p&gt; 
&lt;p&gt;An example of automatically installing all the dependencies is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;c:\cygwin\setup-x86.exe -qnNdO -R C:/cygwin -s http://cygwin.mirror.constant.com -l C:/cygwin/var/cache/setup -P autoconf -P automake -P bison -P gcc-core -P gcc-g++ -P mingw-runtime -P mingw-binutils -P mingw-gcc-core -P mingw-gcc-g++ -P mingw-pthreads -P mingw-w32api -P libtool -P make -P python -P gettext-devel -P gettext -P intltool -P libiconv -P pkg-config -P git -P wget -P curl -P libpcre2-devel -P libssl-devel -P libsqlite3-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;MSYS2&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;pacman -Sy autoconf automake-wrapper libtool msys2-w32api-headers msys2-w32api-runtime gcc pkg-config git python openssl-devel openssl libopenssl msys2-runtime-devel gcc binutils make pcre2-devel libsqlite-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GNU/Hurd&lt;/h3&gt; 
&lt;h4&gt;Debian&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;apt-get install build-essential autoconf automake libtool pkg-config libssl-dev shtool zlib1g-dev libpcap-dev libsqlite3-dev libpcre2-dev libhwloc-dev libcmocka-dev screen expect libbsd-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Docker containers&lt;/h2&gt; 
&lt;p&gt;We have two repositories on DockerHub:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/aircrackng/release&quot;&gt;aircrackng/release&lt;/a&gt;: Each release&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/aircrackng/git&quot;&gt;aircrackng/git&lt;/a&gt;: every commit in the git repository&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Base command for the &lt;code&gt;git&lt;/code&gt; version:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sudo docker run --rm -it aircrackng/git&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Available platforms/CPU architectures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;linux/386 (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/amd64 (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/arm/v5 (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/arm/v6 (base image: alpine:3)&lt;/li&gt; 
 &lt;li&gt;linux/arm/v7 (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/arm64/v8 (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/mips64le (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/ppc64le (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/riscv64 (base image: debian:unstable-slim)&lt;/li&gt; 
 &lt;li&gt;linux/s390x (base image: debian:unstable-slim)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;To build &lt;code&gt;aircrack-ng&lt;/code&gt;, the Autotools build system is utilized. Autotools replaces the older method of compilation.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If utilizing a developer version, eg: one checked out from source control, you will need to run a pre-&lt;code&gt;configure&lt;/code&gt; script. The script to use is one of the following: &lt;code&gt;autoreconf -i&lt;/code&gt; or &lt;code&gt;env NOCONFIGURE=1 ./autogen.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;First, &lt;code&gt;./configure&lt;/code&gt; the project for building with the appropriate options specified for your environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure &amp;lt;options&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: If the above fails, please see above about developer source control versions.&lt;/p&gt; 
&lt;p&gt;Next, compile the project (respecting if &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;gmake&lt;/code&gt; is needed):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Compilation:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compilation on *BSD or Solaris:&lt;/p&gt; &lt;p&gt;&lt;code&gt;gmake&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Finally, the additional targets listed below may be of use in your environment:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Execute all unit testing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make check&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Execute all integration testing (requires root):&lt;/p&gt; &lt;p&gt;&lt;code&gt;make integration&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Installing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Uninstall:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make uninstall&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;./configure&lt;/code&gt; flags&lt;/h3&gt; 
&lt;p&gt;When configuring, the following flags can be used and combined to adjust the suite to your choosing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-airpcap=DIR&lt;/strong&gt;: needed for supporting airpcap devices on Windows (Cygwin or MSYS2 only). Replace DIR above with the absolute location to the root of the extracted source code from the Airpcap CD or downloaded SDK available online. Required on Windows to build &lt;code&gt;besside-ng&lt;/code&gt;, &lt;code&gt;besside-ng-crawler&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;tkiptun-ng&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt; when building experimental tools. The developer pack (Compatible with version 4.1.1 and 4.1.3) can be downloaded at &lt;a href=&quot;https://support.riverbed.com/content/support/software/steelcentral-npm/airpcap.html&quot;&gt;https://support.riverbed.com/content/support/software/steelcentral-npm/airpcap.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-experimental&lt;/strong&gt;: needed to compile &lt;code&gt;tkiptun-ng&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;buddy-ng&lt;/code&gt;, &lt;code&gt;buddy-ng-crawler&lt;/code&gt;, &lt;code&gt;airventriloquist&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt;. libpcap development package is also required to compile most of the tools. If not present, not all experimental tools will be built. On Cygwin, libpcap is not present and the Airpcap SDK replaces it. See --with-airpcap option above.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-ext-scripts&lt;/strong&gt;: needed to build &lt;code&gt;airoscript-ng&lt;/code&gt;, &lt;code&gt;versuck-ng&lt;/code&gt;, &lt;code&gt;airgraph-ng&lt;/code&gt; and &lt;code&gt;airdrop-ng&lt;/code&gt;. Note: Each script has its own dependencies.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-gcrypt&lt;/strong&gt;: Use libgcrypt crypto library instead of the default OpenSSL. And also use internal fast sha1 implementation (borrowed from GIT). Dependency (Debian): libgcrypt20-dev&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-duma&lt;/strong&gt;: Compile with DUMA support. DUMA is a library to detect buffer overruns and underruns. Dependency (Debian): duma&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;disable-libnl&lt;/strong&gt;: Set up the project to be compiled without libnl (1 or 3). Linux option only.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;without-opt&lt;/strong&gt;: Do not enable -O3 optimizations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;enable-shared&lt;/strong&gt;: Make OSdep a shared library.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;disable-shared&lt;/strong&gt;: When combined with &lt;strong&gt;enable-static&lt;/strong&gt;, it will statically compile Aircrack-ng.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-avx512&lt;/strong&gt;: On x86, add support for AVX512 instructions in aircrack-ng. Only use it when the current CPU supports AVX512.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-static-simd=
    &lt;simd&gt;&lt;/simd&gt;&lt;/strong&gt;: Compile a single optimization in aircrack-ng binary. Useful when compiling statically and/or for space-constrained devices. Valid SIMD options: x86-sse2, x86-avx, x86-avx2, x86-avx512, ppc-altivec, ppc-power8, arm-neon, arm-asimd. Must be used with --enable-static --disable-shared. When using those 2 options, the default is to compile the generic optimization in the binary. --with-static-simd merely allows to choose another one.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;enable-maintainer-mode&lt;/strong&gt;: It is important to enable this flag when developing with Aircrack-ng. This flag enables additional compile warnings and safety features.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Examples:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Configure and compiling:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental
make
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling with gcrypt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-gcrypt
make
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Installing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Installing (strip binaries):&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install-strip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Installing, with external scripts:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental --with-ext-scripts
make
make install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Testing (with sqlite, experimental and pcre2)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental
make
make check
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling on OS X with macports (and all options):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental
gmake
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling on macOS running on M1/AARCH64 and Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;autoreconf -vif
env CPPFLAGS=&quot;-Wno-deprecated-declarations&quot; ./configure --with-experimental
make
make check
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling on OS X 10.10 with XCode 7.1 and Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc-4.9 CXX=g++-4.9 ./configure
make
make check
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Older XCode ships with a version of LLVM that does not support CPU feature detection; which causes the &lt;code&gt;./configure&lt;/code&gt; to fail. To work around this older LLVM, it is required that a different compile suite is used, such as GCC or a newer LLVM from Homebrew.&lt;/p&gt; &lt;p&gt;If you wish to use OpenSSL from Homebrew, you may need to specify the location to its installation. To figure out where OpenSSL lives, run:&lt;/p&gt; &lt;p&gt;&lt;code&gt;brew --prefix openssl&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the output above as the DIR for &lt;code&gt;--with-openssl=DIR&lt;/code&gt; in the &lt;code&gt;./configure&lt;/code&gt; line:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc-4.9 CXX=g++-4.9 ./configure --with-openssl=DIR
make
make check
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling on FreeBSD with gcc9&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc9 CXX=g++9 MAKE=gmake ./configure
gmake
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling on Cygwin with Airpcap (assuming Airpcap devpack is unpacked in Aircrack-ng directory)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src
cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-osdep
cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-crypto
cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-util
dlltool -D Airpcap_Devpack/bin/x86/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x86/libairpcap.dll.a
autoreconf -i
./configure --with-experimental --with-airpcap=$(pwd)
make
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling on DragonflyBSD with gcrypt using GCC 8&lt;/p&gt; &lt;pre&gt;&lt;code&gt;autoreconf -i
env CC=gcc8 CXX=g++8 MAKE=gmake ./configure --with-experimental --with-gcrypt
gmake
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling on OpenBSD (with autoconf 2.69 and automake 1.16)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export AUTOCONF_VERSION=2.69
export AUTOMAKE_VERSION=1.16
autoreconf -i
env MAKE=gmake CC=cc CXX=c++ ./configure
gmake
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling and debugging aircrack-ng&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CFLAGS=&#39;-O0 -g&#39;
export CXXFLAGS=&#39;-O0 -g&#39;
./configure --with-experimental --enable-maintainer-mode --without-opt
make
LD_LIBRARY_PATH=.libs gdb --args ./aircrack-ng [PARAMETERS]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;IDE development&lt;/h1&gt; 
&lt;h2&gt;VS Code - devcontainers&lt;/h2&gt; 
&lt;p&gt;A VS Code development environment is provided, as is, for rapid setup of a development environment. This additionally adds support for GitHub Codespaces.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;The first requirement is a working &lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Docker Engine&lt;/a&gt; environment.&lt;/p&gt; 
&lt;p&gt;Next, an installation of &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; with the following extension(s):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&quot;&gt;&lt;code&gt;Remote - Containers&lt;/code&gt;&lt;/a&gt; by Microsoft.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The &quot;Remote - Containers&quot; extension will refuse to work with OSS Code.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone this repository to your working folder:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/aircrack-ng/aircrack-ng.git
$ cd aircrack-ng
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;After cloning this repository, open the folder inside VS Code.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;$ code .
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;IMPORTANT: You should answer &quot;Yes&quot;, if it asks if the folder should be opened inside a remote container. If it does not ask, then press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and type &lt;code&gt;open in container&lt;/code&gt;. This should bring up the correct command, for which pressing enter will run said command.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;A number of warnings might appear about a missing &lt;code&gt;compile_commands.json&lt;/code&gt; file. These are safe to ignore for a moment, as this file is automatically generated after the initial compilation.&lt;/li&gt; 
 &lt;li&gt;Now build the entire project by pressing &lt;code&gt;Ctrl+R&lt;/code&gt; and selecting &lt;code&gt;Build Full&lt;/code&gt; from the pop-up menu that appears.&lt;/li&gt; 
 &lt;li&gt;VS Code should detect the &lt;code&gt;compile_commands.json&lt;/code&gt; file and ask if it should be used; selecting &quot;Yes, always&quot; will complete the initial setup of a fully working IDE.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;IMPORTANT: If it doesn&#39;t detect the file, pressing &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and typing &lt;code&gt;reload window&lt;/code&gt; will bring up the selection to fully reload the environment.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;6&quot;&gt; 
 &lt;li&gt;At this point, nearly all features of VS Code will function; from Intellisense, auto-completion, live documentation, to code formatting. Additionally, there are pre-configured tasks for builds and tests, as well as an example GDB/LLDB configuration for debugging &lt;code&gt;aircrack-ng&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Packaging&lt;/h1&gt; 
&lt;p&gt;Automatic detection of CPU optimization is done at run time. This behavior &lt;strong&gt;is&lt;/strong&gt; desirable when packaging Aircrack-ng (for a Linux or other distribution.)&lt;/p&gt; 
&lt;p&gt;Also, in some cases it may be desired to provide your own flags completely and not having the suite auto-detect a number of optimizations. To do this, add the additional flag &lt;code&gt;--without-opt&lt;/code&gt; to the &lt;code&gt;./configure&lt;/code&gt; line:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./configure --without-opt&lt;/code&gt;&lt;/p&gt; 
&lt;h1&gt;Using pre-compiled binaries&lt;/h1&gt; 
&lt;h2&gt;Linux/BSD&lt;/h2&gt; 
&lt;p&gt;Aircrack-ng is available in most distributions repositories. However, it is not always up-to-date.&lt;/p&gt; 
&lt;h2&gt;Windows&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the appropriate &quot;monitor&quot; driver for your card; standard drivers don&#39;t work for capturing data.&lt;/li&gt; 
 &lt;li&gt;Aircrack-ng suite is command line tools. So, you have to open a command-line &lt;code&gt;Start menu -&amp;gt; Run... -&amp;gt; cmd.exe&lt;/code&gt; then use them&lt;/li&gt; 
 &lt;li&gt;Run the executables without any parameters to have help&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Some more information is present in the &lt;a href=&quot;https://raw.githubusercontent.com/aircrack-ng/aircrack-ng/master/README&quot;&gt;README&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Documentation, tutorials, ... can be found on &lt;a href=&quot;https://aircrack-ng.org&quot;&gt;https://aircrack-ng.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Support is available in the &lt;a href=&quot;https://github.com/aircrack-ng/aircrack-ng/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; and on IRC (in #aircrack-ng on Libera Chat).&lt;/p&gt; 
&lt;p&gt;Every tool has its own manpage. For aircrack-ng, &lt;code&gt;man aircrack-ng&lt;/code&gt;&lt;/p&gt; 
&lt;h1&gt;Infrastructure sponsors&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>u-boot/u-boot</title>
      <link>https://github.com/u-boot/u-boot</link>
      <description>&lt;p&gt;&quot;Das U-Boot&quot; Source Tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SPDX-License-Identifier: GPL-2.0+&lt;/h1&gt; 
&lt;h1&gt;&lt;/h1&gt; 
&lt;h1&gt;(C) Copyright 2000 - 2013&lt;/h1&gt; 
&lt;h1&gt;Wolfgang Denk, DENX Software Engineering, &lt;a href=&quot;mailto:wd@denx.de&quot;&gt;wd@denx.de&lt;/a&gt;.&lt;/h1&gt; 
&lt;h1&gt;Summary:&lt;/h1&gt; 
&lt;p&gt;This directory contains the source code for U-Boot, a boot loader for Embedded boards based on PowerPC, ARM, MIPS and several other processors, which can be installed in a boot ROM and used to initialize and test the hardware or to download and run application code.&lt;/p&gt; 
&lt;p&gt;The development of U-Boot is closely related to Linux: some parts of the source code originate in the Linux source tree, we have some header files in common, and special provision has been made to support booting of Linux images.&lt;/p&gt; 
&lt;p&gt;Some attention has been paid to make this software easily configurable and extendable. For instance, all monitor commands are implemented with the same call interface, so that it&#39;s very easy to add new commands. Also, instead of permanently adding rarely used code (for instance hardware test utilities) to the monitor, you can load and run it dynamically.&lt;/p&gt; 
&lt;h1&gt;Status:&lt;/h1&gt; 
&lt;p&gt;In general, all boards for which a default configuration file exists in the configs/ directory have been tested to some extent and can be considered &quot;working&quot;. In fact, many of them are used in production systems.&lt;/p&gt; 
&lt;p&gt;In case of problems you can use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; scripts/get_maintainer.pl &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to identify the people or companies responsible for various boards and subsystems. Or have a look at the git log.&lt;/p&gt; 
&lt;h1&gt;Where to get help:&lt;/h1&gt; 
&lt;p&gt;In case you have questions about, problems with or contributions for U-Boot, you should send a message to the U-Boot mailing list at &lt;a href=&quot;mailto:u-boot@lists.denx.de&quot;&gt;u-boot@lists.denx.de&lt;/a&gt;. There is also an archive of previous traffic on the mailing list - please search the archive before asking FAQ&#39;s. Please see &lt;a href=&quot;https://lists.denx.de/pipermail/u-boot&quot;&gt;https://lists.denx.de/pipermail/u-boot&lt;/a&gt; and &lt;a href=&quot;https://marc.info/?l=u-boot&quot;&gt;https://marc.info/?l=u-boot&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Where to get source code:&lt;/h1&gt; 
&lt;p&gt;The U-Boot source code is maintained in the Git repository at &lt;a href=&quot;https://source.denx.de/u-boot/u-boot.git&quot;&gt;https://source.denx.de/u-boot/u-boot.git&lt;/a&gt; ; you can browse it online at &lt;a href=&quot;https://source.denx.de/u-boot/u-boot&quot;&gt;https://source.denx.de/u-boot/u-boot&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &quot;Tags&quot; links on this page allow you to download tarballs of any version you might be interested in. Official releases are also available from the DENX file server through HTTPS or FTP. &lt;a href=&quot;https://ftp.denx.de/pub/u-boot/&quot;&gt;https://ftp.denx.de/pub/u-boot/&lt;/a&gt; &lt;a href=&quot;ftp://ftp.denx.de/pub/u-boot/&quot;&gt;ftp://ftp.denx.de/pub/u-boot/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Where we come from:&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;start from 8xxrom sources&lt;/li&gt; 
 &lt;li&gt;create PPCBoot project (&lt;a href=&quot;https://sourceforge.net/projects/ppcboot&quot;&gt;https://sourceforge.net/projects/ppcboot&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;clean up code&lt;/li&gt; 
 &lt;li&gt;make it easier to add custom boards&lt;/li&gt; 
 &lt;li&gt;make it possible to add other [PowerPC] CPUs&lt;/li&gt; 
 &lt;li&gt;extend functions, especially: 
  &lt;ul&gt; 
   &lt;li&gt;Provide extended interface to Linux boot loader&lt;/li&gt; 
   &lt;li&gt;S-Record download&lt;/li&gt; 
   &lt;li&gt;network boot&lt;/li&gt; 
   &lt;li&gt;ATA disk / SCSI ... boot&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;create ARMBoot project (&lt;a href=&quot;https://sourceforge.net/projects/armboot&quot;&gt;https://sourceforge.net/projects/armboot&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;add other CPU families (starting with ARM)&lt;/li&gt; 
 &lt;li&gt;create U-Boot project (&lt;a href=&quot;https://sourceforge.net/projects/u-boot&quot;&gt;https://sourceforge.net/projects/u-boot&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;current project page: see &lt;a href=&quot;https://www.denx.de/wiki/U-Boot&quot;&gt;https://www.denx.de/wiki/U-Boot&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Names and Spelling:&lt;/h1&gt; 
&lt;p&gt;The &quot;official&quot; name of this project is &quot;Das U-Boot&quot;. The spelling &quot;U-Boot&quot; shall be used in all written text (documentation, comments in source files etc.). Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;This is the README file for the U-Boot project.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;File names etc. shall be based on the string &quot;u-boot&quot;. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;include/asm-ppc/u-boot.h

#include &amp;lt;asm/u-boot.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variable names, preprocessor constants etc. shall be either based on the string &quot;u_boot&quot; or on &quot;U_BOOT&quot;. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;U_BOOT_VERSION		u_boot_logo
IH_OS_U_BOOT		u_boot_hush_start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Software Configuration:&lt;/h1&gt; 
&lt;h2&gt;Selection of Processor Architecture and Board Type:&lt;/h2&gt; 
&lt;p&gt;For all supported boards there are ready-to-use default configurations available; just type &quot;make &amp;lt;board_name&amp;gt;_defconfig&quot;.&lt;/p&gt; 
&lt;p&gt;Example: For a TQM823L module type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd u-boot
make TQM823L_defconfig
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: If you&#39;re looking for the default configuration file for a board you&#39;re sure used to be there but is now missing, check the file doc/README.scrapyard for a list of no longer supported boards.&lt;/p&gt; 
&lt;h2&gt;Sandbox Environment:&lt;/h2&gt; 
&lt;p&gt;U-Boot can be built natively to run on a Linux host using the &#39;sandbox&#39; board. This allows feature development which is not board- or architecture- specific to be undertaken on a native platform. The sandbox is also used to run some of U-Boot&#39;s tests.&lt;/p&gt; 
&lt;p&gt;See doc/arch/sandbox/sandbox.rst for more details.&lt;/p&gt; 
&lt;p&gt;The following options need to be configured:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CPU Type: Define exactly one, e.g. CONFIG_MPC85XX.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Board Type: Define exactly one, e.g. CONFIG_MPC8540ADS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;85xx CPU Options: CONFIG_SYS_PPC64&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Specifies that the core is a 64-bit PowerPC implementation (implements
  the &quot;64&quot; category of the Power ISA). This is necessary for ePAPR
  compliance, among other possible reasons.

  CONFIG_SYS_FSL_ERRATUM_A004510

  Enables a workaround for erratum A004510.  If set,
  then CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV and
  CFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY must be set.

  CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV
  CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV2 (optional)

  Defines one or two SoC revisions (low 8 bits of SVR)
  for which the A004510 workaround should be applied.

  The rest of SVR is either not relevant to the decision
  of whether the erratum is present (e.g. p2040 versus
  p2041) or is implied by the build target, which controls
  whether CONFIG_SYS_FSL_ERRATUM_A004510 is set.

  See Freescale App Note 4493 for more information about
  this erratum.

  CFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY

  This is the value to write into CCSR offset 0x18600
  according to the A004510 workaround.

  CONFIG_SYS_FSL_SINGLE_SOURCE_CLK
  Single Source Clock is clocking mode present in some of FSL SoC&#39;s.
  In this mode, a single differential clock is used to supply
  clocks to the sysclock, ddrclock and usbclock.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Generic CPU options:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_SYS_FSL_DDR
  Freescale DDR driver in use. This type of DDR controller is
  found in mpc83xx, mpc85xx as well as some ARM core SoCs.

  CFG_SYS_FSL_DDR_ADDR
  Freescale DDR memory-mapped register base.

  CONFIG_SYS_FSL_IFC_CLK_DIV
  Defines divider of platform clock(clock input to IFC controller).

  CONFIG_SYS_FSL_LBC_CLK_DIV
  Defines divider of platform clock(clock input to eLBC controller).

  CFG_SYS_FSL_DDR_SDRAM_BASE_PHY
  Physical address from the view of DDR controllers. It is the
  same as CFG_SYS_DDR_SDRAM_BASE for  all Power SoCs. But
  it could be different for ARM SoCs.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ARM options: CFG_SYS_EXCEPTION_VECTORS_HIGH&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Select high exception vectors of the ARM core, e.g., do not
  clear the V bit of the c1 register of CP15.

  COUNTER_FREQUENCY
  Generic timer clock source frequency.

  COUNTER_FREQUENCY_REAL
  Generic timer clock source frequency if the real clock is
  different from COUNTER_FREQUENCY, and can only be determined
  at run time.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Linux Kernel Interface: CONFIG_OF_LIBFDT&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  New kernel versions are expecting firmware settings to be
  passed using flattened device trees (based on open firmware
  concepts).

  CONFIG_OF_LIBFDT
   * New libfdt-based support
   * Adds the &quot;fdt&quot; command
   * The bootm command automatically updates the fdt

  OF_TBCLK - The timebase frequency.

  boards with QUICC Engines require OF_QE to set UCC MAC
  addresses

  CONFIG_OF_IDE_FIXUP

  U-Boot can detect if an IDE device is present or not.
  If not, and this new config option is activated, U-Boot
  removes the ATA node from the DTS before booting Linux,
  so the Linux IDE driver does not probe the device and
  crash. This is needed for buggy hardware (uc101) where
  no pull down resistor is connected to the signal IDE5V_DD7.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;vxWorks boot parameters:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  bootvx constructs a valid bootline using the following
  environments variables: bootdev, bootfile, ipaddr, netmask,
  serverip, gatewayip, hostname, othbootargs.
  It loads the vxWorks image pointed bootfile.

  Note: If a &quot;bootargs&quot; environment is defined, it will override
  the defaults discussed just above.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cache Configuration for ARM: CFG_SYS_PL310_BASE - Physical base address of PL310 controller register space&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Serial Ports: CFG_PL011_CLOCK&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have Amba PrimeCell PL011 UARTs, set this variable to
  the clock speed of the UARTs.

  CFG_PL01x_PORTS

  If you have Amba PrimeCell PL010 or PL011 UARTs on your board,
  define this to a list of base addresses for each (supported)
  port. See e.g. include/configs/versatile.h

  CONFIG_SERIAL_HW_FLOW_CONTROL

  Define this variable to enable hw flow control in serial driver.
  Current user of this option is drivers/serial/nsl16550.c driver
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Removal of commands If no commands are needed to boot, you can disable CONFIG_CMDLINE to remove them. In this case, the command line will not be available, and when U-Boot wants to execute the boot command (on start-up) it will call board_run_command() instead. This can reduce image size significantly for very simple boot procedures.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Regular expression support: CONFIG_REGEX If this variable is defined, U-Boot is linked against the SLRE (Super Light Regular Expression) library, which adds regex support to some commands, as for example &quot;env grep&quot; and &quot;setexpr&quot;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Watchdog: CFG_SYS_WATCHDOG_FREQ Some platforms automatically call WATCHDOG_RESET() from the timer interrupt handler every CFG_SYS_WATCHDOG_FREQ interrupts. If not set by the board configuration file, a default of CONFIG_SYS_HZ/2 (i.e. 500) is used. Setting CFG_SYS_WATCHDOG_FREQ to 0 disables calling WATCHDOG_RESET() from the timer interrupt.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;GPIO Support: The CFG_SYS_I2C_PCA953X_WIDTH option specifies a list of chip-ngpio pairs that tell the PCA953X driver the number of pins supported by a particular chip.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Note that if the GPIO device uses I2C, then the I2C interface
  must also be configured. See I2C Support, below.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;I/O tracing: When CONFIG_IO_TRACE is selected, U-Boot intercepts all I/O accesses and can checksum them or write a list of them out to memory. See the &#39;iotrace&#39; command for details. This is useful for testing device drivers since it can confirm that the driver behaves the same way before and after a code change. Currently this is supported on sandbox and arm. To add support for your architecture, add &#39;#include &amp;lt;iotrace.h&amp;gt;&#39; to the bottom of arch/
   &lt;arch&gt;
    /include/asm/io.h and test.
   &lt;/arch&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Example output from the &#39;iotrace stats&#39; command is below.
  Note that if the trace buffer is exhausted, the checksum will
  still continue to operate.

  	iotrace is enabled
  	Start:  10000000	(buffer start address)
  	Size:   00010000	(buffer size)
  	Offset: 00000120	(current buffer offset)
  	Output: 10000120	(start + offset)
  	Count:  00000018	(number of trace records)
  	CRC32:  9526fb66	(CRC32 of all trace records)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Timestamp Support:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  When CONFIG_TIMESTAMP is selected, the timestamp
  (date and time) of an image is printed by image
  commands like bootm or iminfo. This option is
  automatically enabled when you select CONFIG_CMD_DATE .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Partition Labels (disklabels) Supported: Zero or more of the following: CONFIG_MAC_PARTITION Apple&#39;s MacOS partition table. CONFIG_ISO_PARTITION ISO partition table, used on CDROM etc. CONFIG_EFI_PARTITION GPT partition table, common when EFI is the bootloader. Note 2TB partition limit; see disk/part_efi.c CONFIG_SCSI) you must configure support for at least one non-MTD partition type as well.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;NETWORK Support (PCI): CONFIG_E1000_SPI Utility code for direct access to the SPI bus on Intel 8257x. This does not do anything useful unless you set at least one of CONFIG_CMD_E1000 or CONFIG_E1000_SPI_GENERIC.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_NATSEMI
  Support for National dp83815 chips.

  CONFIG_NS8382X
  Support for National dp8382[01] gigabit chips.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;NETWORK Support (other): CONFIG_CALXEDA_XGMAC Support for the Calxeda XGMAC device&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_LAN91C96
  Support for SMSC&#39;s LAN91C96 chips.

  	CONFIG_LAN91C96_USE_32_BIT
  	Define this to enable 32 bit addressing

  	CFG_SYS_DAVINCI_EMAC_PHY_COUNT
  	Define this if you have more then 3 PHYs.

  CONFIG_FTGMAC100
  Support for Faraday&#39;s FTGMAC100 Gigabit SoC Ethernet

  	CONFIG_FTGMAC100_EGIGA
  	Define this to use GE link update with gigabit PHY.
  	Define this if FTGMAC100 is connected to gigabit PHY.
  	If your system has 10/100 PHY only, it might not occur
  	wrong behavior. Because PHY usually return timeout or
  	useless data when polling gigabit status and gigabit
  	control registers. This behavior won&#39;t affect the
  	correctnessof 10/100 link speed update.

  CONFIG_SH_ETHER
  Support for Renesas on-chip Ethernet controller

  	CFG_SH_ETHER_USE_PORT
  	Define the number of ports to be used

  	CFG_SH_ETHER_PHY_ADDR
  	Define the ETH PHY&#39;s address

  	CFG_SH_ETHER_CACHE_WRITEBACK
  	If this option is set, the driver enables cache flush.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;TPM Support: CONFIG_TPM Support TPM devices.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_TPM_TIS_INFINEON
  Support for Infineon i2c bus TPM devices. Only one device
  per system is supported at this time.

  	CONFIG_TPM_TIS_I2C_BURST_LIMITATION
  	Define the burst count bytes upper limit

  CONFIG_TPM_ST33ZP24
  Support for STMicroelectronics TPM devices. Requires DM_TPM support.

  	CONFIG_TPM_ST33ZP24_I2C
  	Support for STMicroelectronics ST33ZP24 I2C devices.
  	Requires TPM_ST33ZP24 and I2C.

  	CONFIG_TPM_ST33ZP24_SPI
  	Support for STMicroelectronics ST33ZP24 SPI devices.
  	Requires TPM_ST33ZP24 and SPI.

  CONFIG_TPM_ATMEL_TWI
  Support for Atmel TWI TPM device. Requires I2C support.

  CONFIG_TPM_TIS_LPC
  Support for generic parallel port TPM devices. Only one device
  per system is supported at this time.

  CONFIG_TPM
  Define this to enable the TPM support library which provides
  functional interfaces to some TPM commands.
  Requires support for a TPM device.

  CONFIG_TPM_AUTH_SESSIONS
  Define this to enable authorized functions in the TPM library.
  Requires CONFIG_TPM and CONFIG_SHA1.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB Support: At the moment only the UHCI host controller is supported (PIP405, MIP405); define CONFIG_USB_UHCI to enable it. define CONFIG_USB_KEYBOARD to enable the USB Keyboard and define CONFIG_USB_STORAGE to enable the USB storage devices. Note: Supported are USB Keyboards and USB Floppy drives (TEAC FD-05PUB).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_USB_DWC2_REG_ADDR the physical CPU address of the DWC2
  HW module registers.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB Device: Define the below if you wish to use the USB console. Once firmware is rebuilt from a serial console issue the command &quot;setenv stdin usbtty; setenv stdout usbtty&quot; and attach your USB cable. The Unix command &quot;dmesg&quot; should print it has found a new device. The environment variable usbtty can be set to gserial or cdc_acm to enable your device to appear to a USB host as a Linux gserial device or a Common Device Class Abstract Control Model serial device. If you select usbtty = gserial you should be able to enumerate a Linux host by # modprobe usbserial vendor=0xVendorID product=0xProductID else if using cdc_acm, simply setting the environment variable usbtty to be cdc_acm should suffice. The following might be defined in YourBoardName.h&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have a USB-IF assigned VendorID then you may wish to
  define your own vendor specific values either in BoardName.h
  or directly in usbd_vendor_info.h. If you don&#39;t define
  CONFIG_USBD_MANUFACTURER, CONFIG_USBD_PRODUCT_NAME,
  CONFIG_USBD_VENDORID and CONFIG_USBD_PRODUCTID, then U-Boot
  should pretend to be a Linux device to it&#39;s target host.

  	CONFIG_USBD_MANUFACTURER
  	Define this string as the name of your company for
  	- CONFIG_USBD_MANUFACTURER &quot;my company&quot;

  	CONFIG_USBD_PRODUCT_NAME
  	Define this string as the name of your product
  	- CONFIG_USBD_PRODUCT_NAME &quot;acme usb device&quot;

  	CONFIG_USBD_VENDORID
  	Define this as your assigned Vendor ID from the USB
  	Implementors Forum. This *must* be a genuine Vendor ID
  	to avoid polluting the USB namespace.
  	- CONFIG_USBD_VENDORID 0xFFFF

  	CONFIG_USBD_PRODUCTID
  	Define this as the unique Product ID
  	for your device
  	- CONFIG_USBD_PRODUCTID 0xFFFF
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ULPI Layer Support: The ULPI (UTMI Low Pin (count) Interface) PHYs are supported via the generic ULPI layer. The generic layer accesses the ULPI PHY via the platform viewport, so you need both the genric layer and the viewport enabled. Currently only Chipidea/ARC based viewport is supported. To enable the ULPI layer support, define CONFIG_USB_ULPI and CONFIG_USB_ULPI_VIEWPORT in your board configuration file. If your ULPI phy needs a different reference clock than the standard 24 MHz then you have to define CFG_ULPI_REF_CLK to the appropriate value in Hz.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MMC Support: CONFIG_SH_MMCIF Support for Renesas on-chip MMCIF controller&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  	CONFIG_SH_MMCIF_ADDR
  	Define the base address of MMCIF registers

  	CONFIG_SH_MMCIF_CLK
  	Define the clock frequency for MMCIF
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB Device Firmware Update (DFU) class support: CONFIG_DFU_OVER_USB This enables the USB portion of the DFU USB class&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_DFU_NAND
  This enables support for exposing NAND devices via DFU.

  CONFIG_DFU_RAM
  This enables support for exposing RAM via DFU.
  Note: DFU spec refer to non-volatile memory usage, but
  allow usages beyond the scope of spec - here RAM usage,
  one that would help mostly the developer.

  CONFIG_SYS_DFU_DATA_BUF_SIZE
  Dfu transfer uses a buffer before writing data to the
  raw storage device. Make the size (in bytes) of this buffer
  configurable. The size of this buffer is also configurable
  through the &quot;dfu_bufsiz&quot; environment variable.

  CONFIG_SYS_DFU_MAX_FILE_SIZE
  When updating files rather than the raw storage device,
  we use a static buffer to copy the file into and then write
  the buffer once we&#39;ve been given the whole file.  Define
  this to the maximum filesize (in bytes) for the buffer.
  Default is 4 MiB if undefined.

  DFU_DEFAULT_POLL_TIMEOUT
  Poll timeout [ms], is the timeout a device can send to the
  host. The host must wait for this timeout before sending
  a subsequent DFU_GET_STATUS request to the device.

  DFU_MANIFEST_POLL_TIMEOUT
  Poll timeout [ms], which the device sends to the host when
  entering dfuMANIFEST state. Host waits this timeout, before
  sending again an USB request to the device.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keyboard Support: See Kconfig help for available keyboard drivers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MII/PHY support: CONFIG_PHY_CLOCK_FREQ (ppc4xx)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  The clock frequency of the MII bus

  CONFIG_PHY_CMD_DELAY (ppc4xx)

  Some PHY like Intel LXT971A need extra delay after
  command issued before MII status register can be read
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;BOOTP Recovery Mode: CONFIG_BOOTP_RANDOM_DELAY&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have many targets in a network that try to
  boot using BOOTP, you may want to avoid that all
  systems send out BOOTP requests at precisely the same
  moment (which would happen for instance at recovery
  from a power failure, when all systems will try to
  boot, thus flooding the BOOTP server. Defining
  CONFIG_BOOTP_RANDOM_DELAY causes a random delay to be
  inserted before sending out BOOTP requests. The
  following delays are inserted then:

  1st BOOTP request:	delay 0 ... 1 sec
  2nd BOOTP request:	delay 0 ... 2 sec
  3rd BOOTP request:	delay 0 ... 4 sec
  4th and following
  BOOTP requests:		delay 0 ... 8 sec

  CFG_BOOTP_ID_CACHE_SIZE

  BOOTP packets are uniquely identified using a 32-bit ID. The
  server will copy the ID from client requests to responses and
  U-Boot will use this to determine if it is the destination of
  an incoming response. Some servers will check that addresses
  aren&#39;t in use before handing them out (usually using an ARP
  ping) and therefore take up to a few hundred milliseconds to
  respond. Network congestion may also influence the time it
  takes for a response to make it back to the client. If that
  time is too long, U-Boot will retransmit requests. In order
  to allow earlier responses to still be accepted after these
  retransmissions, U-Boot&#39;s BOOTP client keeps a small cache of
  IDs. The CFG_BOOTP_ID_CACHE_SIZE controls the size of this
  cache. The default is to keep IDs for up to four outstanding
  requests. Increasing this will allow U-Boot to accept offers
  from a BOOTP client in networks with unusually high latency.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;DHCP Advanced Options:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Link-local IP address negotiation: Negotiate with other link-local clients on the local network for an address that doesn&#39;t require explicit configuration. This is especially useful if a DHCP server cannot be guaranteed to exist in all environments that the device must operate.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; See doc/README.link-local for more information.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MAC address from environment variables&lt;/p&gt; &lt;pre&gt;&lt;code&gt; FDT_SEQ_MACADDR_FROM_ENV

 Fix-up device tree with MAC addresses fetched sequentially from
 environment variables. This config work on assumption that
 non-usable ethernet node of device-tree are either not present
 or their status has been marked as &quot;disabled&quot;.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CDP Options: CONFIG_CDP_DEVICE_ID&lt;/p&gt; &lt;pre&gt;&lt;code&gt; The device id used in CDP trigger frames.

 CONFIG_CDP_DEVICE_ID_PREFIX

 A two character string which is prefixed to the MAC address
 of the device.

 CONFIG_CDP_PORT_ID

 A printf format string which contains the ascii name of
 the port. Normally is set to &quot;eth%d&quot; which sets
 eth0 for the first Ethernet, eth1 for the second etc.

 CONFIG_CDP_CAPABILITIES

 A 32bit integer which indicates the device capabilities;
 0x00000010 for a normal host which does not forwards.

 CONFIG_CDP_VERSION

 An ascii string containing the version of the software.

 CONFIG_CDP_PLATFORM

 An ascii string containing the name of the platform.

 CONFIG_CDP_TRIGGER

 A 32bit integer sent on the trigger.

 CONFIG_CDP_POWER_CONSUMPTION

 A 16bit integer containing the power consumption of the
 device in .1 of milliwatts.

 CONFIG_CDP_APPLIANCE_VLAN_TYPE

 A byte containing the id of the VLAN.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Status LED: CONFIG_LED_STATUS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Several configurations allow to display the current
  status using a LED. For instance, the LED will blink
  fast while running U-Boot code, stop blinking as
  soon as a reply to a BOOTP request was received, and
  start blinking slow once the Linux kernel is running
  (supported by a status LED driver in the Linux
  kernel). Defining CONFIG_LED_STATUS enables this
  feature in U-Boot.

  Additional options:

  CONFIG_LED_STATUS_GPIO
  The status LED can be connected to a GPIO pin.
  In such cases, the gpio_led driver can be used as a
  status LED backend implementation. Define CONFIG_LED_STATUS_GPIO
  to include the gpio_led driver in the U-Boot binary.

  CFG_GPIO_LED_INVERTED_TABLE
  Some GPIO connected LEDs may have inverted polarity in which
  case the GPIO high value corresponds to LED off state and
  GPIO low value corresponds to LED on state.
  In such cases CFG_GPIO_LED_INVERTED_TABLE may be defined
  with a list of GPIO LEDs that have inverted polarity.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;I2C Support: CFG_SYS_NUM_I2C_BUSES Hold the number of i2c buses you want to use.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CFG_SYS_I2C_BUSES
  hold a list of buses you want to use

   CFG_SYS_I2C_BUSES	{{0, {I2C_NULL_HOP}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 1}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 2}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 3}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 4}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 5}}}, \
  			{1, {I2C_NULL_HOP}}, \
  			{1, {{I2C_MUX_PCA9544, 0x72, 1}}}, \
  			{1, {{I2C_MUX_PCA9544, 0x72, 2}}}, \
  			}

  which defines
  	bus 0 on adapter 0 without a mux
  	bus 1 on adapter 0 with a PCA9547 on address 0x70 port 1
  	bus 2 on adapter 0 with a PCA9547 on address 0x70 port 2
  	bus 3 on adapter 0 with a PCA9547 on address 0x70 port 3
  	bus 4 on adapter 0 with a PCA9547 on address 0x70 port 4
  	bus 5 on adapter 0 with a PCA9547 on address 0x70 port 5
  	bus 6 on adapter 1 without a mux
  	bus 7 on adapter 1 with a PCA9544 on address 0x72 port 1
  	bus 8 on adapter 1 with a PCA9544 on address 0x72 port 2

  If you do not have i2c muxes on your board, omit this define.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Legacy I2C Support: If you use the software i2c interface (CONFIG_SYS_I2C_SOFT) then the following macros need to be defined (examples are from include/configs/lwmon.h):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  I2C_INIT

  (Optional). Any commands necessary to enable the I2C
  controller or configure ports.

  eg: #define I2C_INIT (immr-&amp;gt;im_cpm.cp_pbdir |=	PB_SCL)

  I2C_ACTIVE

  The code necessary to make the I2C data line active
  (driven).  If the data line is open collector, this
  define can be null.

  eg: #define I2C_ACTIVE (immr-&amp;gt;im_cpm.cp_pbdir |=  PB_SDA)

  I2C_TRISTATE

  The code necessary to make the I2C data line tri-stated
  (inactive).  If the data line is open collector, this
  define can be null.

  eg: #define I2C_TRISTATE (immr-&amp;gt;im_cpm.cp_pbdir &amp;amp;= ~PB_SDA)

  I2C_READ

  Code that returns true if the I2C data line is high,
  false if it is low.

  eg: #define I2C_READ ((immr-&amp;gt;im_cpm.cp_pbdat &amp;amp; PB_SDA) != 0)

  I2C_SDA(bit)

  If &amp;lt;bit&amp;gt; is true, sets the I2C data line high. If it
  is false, it clears it (low).

  eg: #define I2C_SDA(bit) \
  	if(bit) immr-&amp;gt;im_cpm.cp_pbdat |=  PB_SDA; \
  	else	immr-&amp;gt;im_cpm.cp_pbdat &amp;amp;= ~PB_SDA

  I2C_SCL(bit)

  If &amp;lt;bit&amp;gt; is true, sets the I2C clock line high. If it
  is false, it clears it (low).

  eg: #define I2C_SCL(bit) \
  	if(bit) immr-&amp;gt;im_cpm.cp_pbdat |=  PB_SCL; \
  	else	immr-&amp;gt;im_cpm.cp_pbdat &amp;amp;= ~PB_SCL

  I2C_DELAY

  This delay is invoked four times per clock cycle so this
  controls the rate of data transfer.  The data rate thus
  is 1 / (I2C_DELAY * 4). Often defined to be something
  like:

  #define I2C_DELAY  udelay(2)

  CONFIG_SOFT_I2C_GPIO_SCL / CONFIG_SOFT_I2C_GPIO_SDA

  If your arch supports the generic GPIO framework (asm/gpio.h),
  then you may alternatively define the two GPIOs that are to be
  used as SCL / SDA.  Any of the previous I2C_xxx macros will
  have GPIO-based defaults assigned to them as appropriate.

  You should define these to the GPIO value as given directly to
  the generic GPIO functions.

  CFG_SYS_I2C_NOPROBES

  This option specifies a list of I2C devices that will be skipped
  when the &#39;i2c probe&#39; command is issued.

  e.g.
  	#define CFG_SYS_I2C_NOPROBES {0x50,0x68}

  will skip addresses 0x50 and 0x68 on a board with one I2C bus

  CONFIG_SOFT_I2C_READ_REPEATED_START

  defining this will force the i2c_read() function in
  the soft_i2c driver to perform an I2C repeated start
  between writing the address pointer and reading the
  data.  If this define is omitted the default behaviour
  of doing a stop-start sequence will be used.  Most I2C
  devices can use either method, but some require one or
  the other.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SPI Support: CONFIG_SPI&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Enables SPI driver (so far only tested with
  SPI EEPROM, also an instance works with Crystal A/D and
  D/As on the SACSng board)

  CFG_SYS_SPI_MXC_WAIT
  Timeout for waiting until spi transfer completed.
  default: (CONFIG_SYS_HZ/100)     /* 10 ms */
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;FPGA Support: CONFIG_FPGA&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Enables FPGA subsystem.

  CONFIG_FPGA_&amp;lt;vendor&amp;gt;

  Enables support for specific chip vendors.
  (ALTERA, XILINX)

  CONFIG_FPGA_&amp;lt;family&amp;gt;

  Enables support for FPGA family.
  (SPARTAN2, SPARTAN3, VIRTEX2, CYCLONE2, ACEX1K, ACEX)

  CONFIG_SYS_FPGA_CHECK_BUSY

  Enable checks on FPGA configuration interface busy
  status by the configuration function. This option
  will require a board or device specific function to
  be written.

  CFG_FPGA_DELAY

  If defined, a function that provides delays in the FPGA
  configuration driver.

  CFG_SYS_FPGA_CHECK_ERROR

  Check for configuration errors during FPGA bitfile
  loading. For example, abort during Virtex II
  configuration if the INIT_B line goes low (which
  indicated a CRC error).

  CFG_SYS_FPGA_WAIT_INIT

  Maximum time to wait for the INIT_B line to de-assert
  after PROB_B has been de-asserted during a Virtex II
  FPGA configuration sequence. The default time is 500
  ms.

  CFG_SYS_FPGA_WAIT_BUSY

  Maximum time to wait for BUSY to de-assert during
  Virtex II FPGA configuration. The default is 5 ms.

  CFG_SYS_FPGA_WAIT_CONFIG

  Time to wait after FPGA configuration. The default is
  200 ms.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Vendor Parameter Protection:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  U-Boot considers the values of the environment
  variables &quot;serial#&quot; (Board Serial Number) and
  &quot;ethaddr&quot; (Ethernet Address) to be parameters that
  are set once by the board vendor / manufacturer, and
  protects these variables from casual modification by
  the user. Once set, these variables are read-only,
  and write or delete attempts are rejected. You can
  change this behaviour:

  If CONFIG_ENV_OVERWRITE is #defined in your config
  file, the write protection for vendor parameters is
  completely disabled. Anybody can change or delete
  these parameters.

  The same can be accomplished in a more flexible way
  for any variable by configuring the type of access
  to allow for those variables in the &quot;.flags&quot; variable
  or define CFG_ENV_FLAGS_LIST_STATIC.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Protected RAM: CFG_PRAM&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Define this variable to enable the reservation of
  &quot;protected RAM&quot;, i. e. RAM which is not overwritten
  by U-Boot. Define CFG_PRAM to hold the number of
  kB you want to reserve for pRAM. You can overwrite
  this default value by defining an environment
  variable &quot;pram&quot; to the number of kB you want to
  reserve. Note that the board info structure will
  still show the full amount of RAM. If pRAM is
  reserved, a new environment variable &quot;mem&quot; will
  automatically be defined to hold the amount of
  remaining RAM in a form that can be passed as boot
  argument to Linux, for instance like that:

  	setenv bootargs ... mem=\${mem}
  	saveenv

  This way you can tell Linux not to use this memory,
  either, which results in a memory region that will
  not be affected by reboots.

  *WARNING* If your board configuration uses automatic
  detection of the RAM size, you must make sure that
  this memory test is non-destructive. So far, the
  following board configurations are known to be
  &quot;pRAM-clean&quot;:

  	IVMS8, IVML24, SPD8xx,
  	HERMES, IP860, RPXlite, LWMON,
  	FLAGADM
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Error Recovery: Note:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  In the current implementation, the local variables
  space and global environment variables space are
  separated. Local variables are those you define by
  simply typing `name=value&#39;. To access a local
  variable later on, you have write `$name&#39; or
  `${name}&#39;; to execute the contents of a variable
  directly type `$name&#39; at the command prompt.

  Global environment variables are those you use
  setenv/printenv to work with. To run a command stored
  in such a variable, you need to use the run command,
  and you must not use the &#39;$&#39; sign to access them.

  To store commands and special characters in a
  variable, please use double quotation marks
  surrounding the whole text of the variable, instead
  of the backslashes before semicolons and special
  symbols.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Default Environment: CFG_EXTRA_ENV_SETTINGS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Define this to contain any number of null terminated
  strings (variable = value pairs) that will be part of
  the default environment compiled into the boot image.

  For example, place something like this in your
  board&#39;s config file:

  #define CFG_EXTRA_ENV_SETTINGS \
  	&quot;myvar1=value1\0&quot; \
  	&quot;myvar2=value2\0&quot;

  Warning: This method is based on knowledge about the
  internal format how the environment is stored by the
  U-Boot code. This is NOT an official, exported
  interface! Although it is unlikely that this format
  will change soon, there is no guarantee either.
  You better know what you are doing here.

  Note: overly (ab)use of the default environment is
  discouraged. Make sure to check other ways to preset
  the environment like the &quot;source&quot; command or the
  boot command first.

  CONFIG_DELAY_ENVIRONMENT

  Normally the environment is loaded when the board is
  initialised so that it is available to U-Boot. This inhibits
  that so that the environment is not available until
  explicitly loaded later by U-Boot code. With CONFIG_OF_CONTROL
  this is instead controlled by the value of
  /config/load-environment.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Automatic software updates via TFTP server CONFIG_UPDATE_TFTP CONFIG_UPDATE_TFTP_CNT_MAX CONFIG_UPDATE_TFTP_MSEC_MAX&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  These options enable and control the auto-update feature;
  for a more detailed description refer to doc/README.update.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MTD Support (mtdparts command, UBI support) CONFIG_MTD_UBI_WL_THRESHOLD This parameter defines the maximum difference between the highest erase counter value and the lowest erase counter value of eraseblocks of UBI devices. When this threshold is exceeded, UBI starts performing wear leveling by means of moving data from eraseblock with low erase counter to eraseblocks with high erase counter.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  The default value should be OK for SLC NAND flashes, NOR flashes and
  other flashes which have eraseblock life-cycle 100000 or more.
  However, in case of MLC NAND flashes which typically have eraseblock
  life-cycle less than 10000, the threshold should be lessened (e.g.,
  to 128 or 256, although it does not have to be power of 2).

  default: 4096

  CONFIG_MTD_UBI_BEB_LIMIT
  This option specifies the maximum bad physical eraseblocks UBI
  expects on the MTD device (per 1024 eraseblocks). If the
  underlying flash does not admit of bad eraseblocks (e.g. NOR
  flash), this value is ignored.

  NAND datasheets often specify the minimum and maximum NVM
  (Number of Valid Blocks) for the flashes&#39; endurance lifetime.
  The maximum expected bad eraseblocks per 1024 eraseblocks
  then can be calculated as &quot;1024 * (1 - MinNVB / MaxNVB)&quot;,
  which gives 20 for most NANDs (MaxNVB is basically the total
  count of eraseblocks on the chip).

  To put it differently, if this value is 20, UBI will try to
  reserve about 1.9% of physical eraseblocks for bad blocks
  handling. And that will be 1.9% of eraseblocks on the entire
  NAND chip, not just the MTD partition UBI attaches. This means
  that if you have, say, a NAND flash chip admits maximum 40 bad
  eraseblocks, and it is split on two MTD partitions of the same
  size, UBI will reserve 40 eraseblocks when attaching a
  partition.

  default: 20

  CONFIG_MTD_UBI_FASTMAP
  Fastmap is a mechanism which allows attaching an UBI device
  in nearly constant time. Instead of scanning the whole MTD device it
  only has to locate a checkpoint (called fastmap) on the device.
  The on-flash fastmap contains all information needed to attach
  the device. Using fastmap makes only sense on large devices where
  attaching by scanning takes long. UBI will not automatically install
  a fastmap on old images, but you can set the UBI parameter
  CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT to 1 if you want so. Please note
  that fastmap-enabled images are still usable with UBI implementations
  without	fastmap support. On typical flash devices the whole fastmap
  fits into one PEB. UBI will reserve PEBs to hold two fastmaps.

  CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT
  Set this parameter to enable fastmap automatically on images
  without a fastmap.
  default: 0

  CONFIG_MTD_UBI_FM_DEBUG
  Enable UBI fastmap debug
  default: 0
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SPL framework CONFIG_SPL Enable building of SPL globally.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_SPL_PANIC_ON_RAW_IMAGE
  When defined, SPL will panic() if the image it has
  loaded does not have a signature.
  Defining this is useful when code which loads images
  in SPL cannot guarantee that absolutely all read errors
  will be caught.
  An example is the LPC32XX MLC NAND driver, which will
  consider that a completely unreadable NAND block is bad,
  and thus should be skipped silently.

  CONFIG_SPL_DISPLAY_PRINT
  For ARM, enable an optional function to print more information
  about the running system.

  CONFIG_SPL_MPC83XX_WAIT_FOR_NAND
  Set this for NAND SPL on PPC mpc83xx targets, so that
  start.S waits for the rest of the SPL to load before
  continuing (the hardware starts execution after just
  loading the first page rather than the full 4K).

  CONFIG_SPL_UBI
  Support for a lightweight UBI (fastmap) scanner and
  loader

  CONFIG_SYS_NAND_5_ADDR_CYCLE, CONFIG_SYS_NAND_PAGE_SIZE,
  CONFIG_SYS_NAND_OOBSIZE, CONFIG_SYS_NAND_BLOCK_SIZE,
  CONFIG_SYS_NAND_BAD_BLOCK_POS, CFG_SYS_NAND_ECCPOS,
  CFG_SYS_NAND_ECCSIZE, CFG_SYS_NAND_ECCBYTES
  Defines the size and behavior of the NAND that SPL uses
  to read U-Boot

  CFG_SYS_NAND_U_BOOT_DST
  Location in memory to load U-Boot to

  CFG_SYS_NAND_U_BOOT_SIZE
  Size of image to load

  CFG_SYS_NAND_U_BOOT_START
  Entry point in loaded image to jump to

  CONFIG_SPL_RAM_DEVICE
  Support for running image already present in ram, in SPL binary

  CONFIG_SPL_FIT_PRINT
  Printing information about a FIT image adds quite a bit of
  code to SPL. So this is normally disabled in SPL. Use this
  option to re-enable it. This will affect the output of the
  bootm command when booting a FIT image.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Interrupt support (PPC):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  There are common interrupt_init() and timer_interrupt()
  for all PPC archs. interrupt_init() calls interrupt_init_cpu()
  for CPU specific initialization. interrupt_init_cpu()
  should set decrementer_count to appropriate value. If
  CPU resets decrementer automatically after interrupt
  (ppc4xx) it should set decrementer_count to zero.
  timer_interrupt() calls timer_interrupt_cpu() for CPU
  specific handling. If board has watchdog / status_led
  / other_activity_monitor it works automatically from
  general timer_interrupt().
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Board initialization settings:&lt;/h2&gt; 
&lt;p&gt;During Initialization u-boot calls a number of board specific functions to allow the preparation of board specific prerequisites, e.g. pin setup before drivers are initialized. To enable these callbacks the following configuration macros have to be defined. Currently this is architecture specific, so please check arch/your_architecture/lib/board.c typically in board_init_f() and board_init_r().&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CONFIG_BOARD_EARLY_INIT_F: Call board_early_init_f()&lt;/li&gt; 
 &lt;li&gt;CONFIG_BOARD_EARLY_INIT_R: Call board_early_init_r()&lt;/li&gt; 
 &lt;li&gt;CONFIG_BOARD_LATE_INIT: Call board_late_init()&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration Settings:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_LONGHELP: Defined when you want long help messages included; undefine this when you&#39;re short of memory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_HELP_CMD_WIDTH: Defined when you want to override the default width of the commands listed in the &#39;help&#39; command output.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_PROMPT: This is what U-Boot prints on the console to prompt for user input.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_BAUDRATE_TABLE: List of legal baudrate settings for this board.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_MEM_RESERVE_SECURE Only implemented for ARMv8 for now. If defined, the size of CFG_SYS_MEM_RESERVE_SECURE memory is substracted from total RAM and won&#39;t be reported to OS. This memory can be used as secure memory. A variable gd-&amp;gt;arch.secure_ram is used to track the location. In systems the RAM base is not zero, or RAM is divided into banks, this variable needs to be recalcuated to get the address.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_SDRAM_BASE: Physical start address of SDRAM. &lt;em&gt;Must&lt;/em&gt; be 0 here.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_FLASH_BASE: Physical start address of Flash memory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_MALLOC_LEN: Size of DRAM reserved for malloc() use.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_BOOTMAPSZ: Maximum size of memory mapped by the startup code of the Linux kernel; all data that must be processed by the Linux kernel (bd_info, boot arguments, FDT blob if used) must be put below this limit, unless &quot;bootm_low&quot; environment variable is defined and non-zero. In such case all data for the Linux kernel must be between &quot;bootm_low&quot; and &quot;bootm_low&quot; + CFG_SYS_BOOTMAPSZ. The environment variable &quot;bootm_mapsize&quot; will override the value of CFG_SYS_BOOTMAPSZ. If CFG_SYS_BOOTMAPSZ is undefined, then the value in &quot;bootm_size&quot; will be used instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_BOOT_GET_CMDLINE: Enables allocating and saving kernel cmdline in space between &quot;bootm_low&quot; and &quot;bootm_low&quot; + BOOTMAPSZ.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_BOOT_GET_KBD: Enables allocating and saving a kernel copy of the bd_info in space between &quot;bootm_low&quot; and &quot;bootm_low&quot; + BOOTMAPSZ.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_PROTECTION If defined, hardware flash sectors protection is used instead of U-Boot software protection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_CFI: Define if the flash driver uses extra elements in the common flash structure for storing flash geometry.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FLASH_CFI_DRIVER This option also enables the building of the cfi_flash driver in the drivers directory&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FLASH_CFI_MTD This option enables the building of the cfi_mtd driver in the drivers directory. The driver exports CFI flash to the MTD layer.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_USE_BUFFER_WRITE Use buffered writes to flash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_ENV_FLAGS_LIST_DEFAULT&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_ENV_FLAGS_LIST_STATIC Enable validation of the values given to environment variables when calling env set. Variables can be restricted to only decimal, hexadecimal, or boolean. If CONFIG_CMD_NET is also defined, the variables can also be restricted to IP address or MAC address.&lt;/p&gt; &lt;p&gt;The format of the list is: type_attribute = [s|d|x|b|i|m] access_attribute = [a|r|o|c] attributes = type_attribute[access_attribute] entry = variable_name[:attributes] list = entry[,list]&lt;/p&gt; &lt;p&gt;The type attributes are: s - String (default) d - Decimal x - Hexadecimal b - Boolean ([1yYtT|0nNfF]) i - IP address m - MAC address&lt;/p&gt; &lt;p&gt;The access attributes are: a - Any (default) r - Read-only o - Write-once c - Change-default&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;CONFIG_ENV_FLAGS_LIST_DEFAULT Define this to a list (string) to define the &quot;.flags&quot; environment variable in the default or embedded environment.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;CFG_ENV_FLAGS_LIST_STATIC Define this to a list (string) to define validation that should be done if an entry is not found in the &quot;.flags&quot; environment variable. To override a setting in the static list, simply add an entry for the same variable name to the &quot;.flags&quot; variable.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If CONFIG_REGEX is defined, the variable_name above is evaluated as a regular expression. This allows multiple variables to define the same flags without explicitly listing them for each variable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following definitions that deal with the placement and management of environment data (variable area); in general, we support the following configurations:&lt;/p&gt; 
&lt;p&gt;BE CAREFUL! The first access to the environment happens quite early in U-Boot initialization (when we try to get the setting of for the console baudrate). You &lt;em&gt;MUST&lt;/em&gt; have mapped your NVRAM area then, or U-Boot will hang.&lt;/p&gt; 
&lt;p&gt;Please note that even with NVRAM we still use a copy of the environment in RAM: we could work on NVRAM directly, but we want to keep settings there always unmodified except somebody uses &quot;saveenv&quot; to save the current settings.&lt;/p&gt; 
&lt;p&gt;BE CAREFUL! For some special cases, the local device can not use &quot;saveenv&quot; command. For example, the local device will get the environment stored in a remote NOR flash by SRIO or PCIE link, but it can not erase, write this NOR flash by SRIO or PCIE interface.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_NAND_ENV_DST&lt;/p&gt; &lt;p&gt;Defines address in RAM to which the nand_spl code should copy the environment. If redundant environment is used, it will be copied to CONFIG_NAND_ENV_DST + CONFIG_ENV_SIZE.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please note that the environment is read-only until the monitor has been relocated to RAM and a RAM copy of the environment has been created; also, when using EEPROM you will have to use env_get_f() until then to read environment variables.&lt;/p&gt; 
&lt;p&gt;The environment is protected by a CRC32 checksum. Before the monitor is relocated into RAM, as a result of a bad CRC you will be working with the compiled-in default environment - &lt;em&gt;silently&lt;/em&gt;!!! [This is necessary, because the first environment variable we need is the &quot;baudrate&quot; setting for the console - if we have a bad CRC, we don&#39;t have any device yet where we could complain.]&lt;/p&gt; 
&lt;p&gt;Note: once the monitor has been relocated, then it will complain if the default environment is used; a new CRC is computed as soon as you use the &quot;saveenv&quot; command to store a valid environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FAULT_MII_ADDR: MII address of the PHY to check for the Ethernet link state.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_DISPLAY_BOARDINFO Display information about the board that U-Boot is running on when U-Boot starts up. The board function checkboard() is called to do this.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_DISPLAY_BOARDINFO_LATE Similar to the previous option, but display this information later, once stdio is running and output goes to the LCD, if present.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Low Level (hardware related) configuration options:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_CACHELINE_SIZE: Cache Line Size of the CPU.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_CCSRBAR_DEFAULT: Default (power-on reset) physical address of CCSR on Freescale PowerPC SOCs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR: Virtual address of CCSR. On a 32-bit build, this is typically the same value as CONFIG_SYS_CCSRBAR_DEFAULT.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS: Physical address of CCSR. CCSR can be relocated to a new physical address, if desired. In this case, this macro should be set to that address. Otherwise, it should be set to the same value as CONFIG_SYS_CCSRBAR_DEFAULT. For example, CCSR is typically relocated on 36-bit builds. It is recommended that this macro be defined via the _HIGH and _LOW macros:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  #define CFG_SYS_CCSRBAR_PHYS ((CFG_SYS_CCSRBAR_PHYS_HIGH
  	* 1ull) &amp;lt;&amp;lt; 32 | CFG_SYS_CCSRBAR_PHYS_LOW)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS_HIGH: Bits 33-36 of CFG_SYS_CCSRBAR_PHYS. This value is typically either 0 (32-bit build) or 0xF (36-bit build). This macro is used in assembly code, so it must not contain typecasts or integer size suffixes (e.g. &quot;ULL&quot;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS_LOW: Lower 32-bits of CFG_SYS_CCSRBAR_PHYS. This macro is used in assembly code, so it must not contain typecasts or integer size suffixes (e.g. &quot;ULL&quot;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_IMMR: Physical address of the Internal Memory. DO NOT CHANGE unless you know exactly what you&#39;re doing! (11-4) [MPC8xx systems only]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_INIT_RAM_ADDR:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Start address of memory area that can be used for
  initial data and stack; please note that this must be
  writable memory that is working WITHOUT special
  initialization, i. e. you CANNOT use normal RAM which
  will become available only after programming the
  memory controller and running certain initialization
  sequences.

  U-Boot uses the following memory types:
  - MPC8xx: IMMR (internal memory of the CPU)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SCCR: System Clock and reset Control Register (15-27)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_OR_TIMING_SDRAM: SDRAM timing&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_VIRT: Virtual Address of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_PHYxS: Physical Address of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_SIZE: Size of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_NAND_BUSWIDTH_16BIT Defined to tell the NAND controller that the NAND chip is using a 16 bit bus. Not all NAND drivers use this symbol. Example of drivers that use it: - drivers/mtd/nand/raw/ndfc.c - drivers/mtd/nand/raw/mxc_nand.c&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_NDFC_EBC0_CFG Sets the EBC0_CFG register for the NDFC. If not defined a default value will be used.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SPD_BUS_NUM If SPD EEPROM is on an I2C bus other than the first one, specify here. Note that the value must resolve to something your driver can deal with.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_INTERACTIVE Enable interactive DDR debugging. See doc/README.fsl-ddr.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_SYNC_REFRESH Enable sync of refresh for multiple controllers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_BIST Enable built-in memory test for Freescale DDR controllers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_RMII Enable RMII mode for all FECs. Note that this is a global option, we can&#39;t have one FEC in standard MII mode and another in RMII mode.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_CRC32_VERIFY Add a verify option to the crc32 command. The syntax is:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  =&amp;gt; crc32 -v &amp;lt;address&amp;gt; &amp;lt;count&amp;gt; &amp;lt;crc32&amp;gt;

  Where address/count indicate a memory area
  and crc32 is the correct crc32 which the
  area should have.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_LOOPW Add the &quot;loopw&quot; memory command. This only takes effect if the memory commands are activated globally (CONFIG_CMD_MEMORY).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_CMD_MX_CYCLIC Add the &quot;mdc&quot; and &quot;mwc&quot; memory commands. These are cyclic &quot;md/mw&quot; commands. Examples:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  =&amp;gt; mdc.b 10 4 500
  This command will print 4 bytes (10,11,12,13) each 500 ms.

  =&amp;gt; mwc.l 100 12345678 10
  This command will write 12345678 to address 100 all 10 ms.

  This only takes effect if the memory commands are activated
  globally (CONFIG_CMD_MEMORY).
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_XPL_BUILD Set when the currently running compilation is for an artifact that will end up in one of the &#39;xPL&#39; builds, i.e. SPL, TPL or VPL. Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Note that CONFIG_XPL_BUILD *is* always defined when either
  of CONFIG_TPL_BUILD / CONFIG_VPL_BUILD is defined. This can be
  counter-intuitive and should perhaps be changed.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_TPL_BUILD Set when the currently running compilation is for an artifact that will end up in the TPL build (as opposed to SPL, VPL or U-Boot proper). Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_VPL_BUILD Set when the currently running compilation is for an artifact that will end up in the VPL build (as opposed to the SPL, TPL or U-Boot proper). Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_ARCH_MAP_SYSMEM Generally U-Boot (and in particular the md command) uses effective address. It is therefore not necessary to regard U-Boot address as virtual addresses that need to be translated to physical addresses. However, sandbox requires this, since it maintains its own little RAM buffer which contains all addressable memory. This option causes some memory accesses to be mapped through map_sysmem() / unmap_sysmem().&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_X86_RESET_VECTOR If defined, the x86 reset vector code is included. This is not needed when U-Boot is running from Coreboot.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Freescale QE/FMAN Firmware Support:&lt;/h2&gt; 
&lt;p&gt;The Freescale QUICCEngine (QE) and Frame Manager (FMAN) both support the loading of &quot;firmware&quot;, which is encoded in the QE firmware binary format. This firmware often needs to be loaded during U-Boot booting, so macros are used to identify the storage device (NOR flash, SPI, etc) and the address within that device.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FMAN_FW_ADDR The address in the storage device where the FMAN microcode is located. The meaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro is also specified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FW_ADDR The address in the storage device where the QE microcode is located. The meaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro is also specified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_LENGTH The maximum possible size of the firmware. The firmware binary format has a field that specifies the actual size of the firmware, but it might not be possible to read any part of the firmware unless some local storage is allocated to hold the entire firmware first.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_NOR Specifies that QE/FMAN firmware is located in NOR flash, mapped as normal addressable memory via the LBC. CONFIG_SYS_FMAN_FW_ADDR is the virtual address in NOR flash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_NAND Specifies that QE/FMAN firmware is located in NAND flash. CONFIG_SYS_FMAN_FW_ADDR is the offset within NAND flash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_MMC Specifies that QE/FMAN firmware is located on the primary SD/MMC device. CONFIG_SYS_FMAN_FW_ADDR is the byte offset on that device.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_REMOTE Specifies that QE/FMAN firmware is located in the remote (master) memory space. CONFIG_SYS_FMAN_FW_ADDR is a virtual address which can be mapped from slave TLB-&amp;gt;slave LAW-&amp;gt;slave SRIO or PCIE outbound window-&amp;gt;master inbound window-&amp;gt;master LAW-&amp;gt;the ucode address in master&#39;s memory space.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Freescale Layerscape Management Complex Firmware Support:&lt;/h2&gt; 
&lt;p&gt;The Freescale Layerscape Management Complex (MC) supports the loading of &quot;firmware&quot;. This firmware often needs to be loaded during U-Boot booting, so macros are used to identify the storage device (NOR flash, SPI, etc) and the address within that device.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CONFIG_FSL_MC_ENET Enable the MC driver for Layerscape SoCs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Freescale Layerscape Debug Server Support:&lt;/h2&gt; 
&lt;p&gt;The Freescale Layerscape Debug Server Support supports the loading of &quot;Debug Server firmware&quot; and triggering SP boot-rom. This firmware often needs to be loaded during U-Boot booting.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CONFIG_SYS_MC_RSV_MEM_ALIGN Define alignment of reserved memory MC requires&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Building the Software:&lt;/h1&gt; 
&lt;p&gt;Building U-Boot has been tested in several native build environments and in many different cross environments. Of course we cannot support all possibly existing versions of cross development tools in all (potentially obsolete) versions. In case of tool chain problems we recommend to use the ELDK (see &lt;a href=&quot;https://www.denx.de/wiki/DULG/ELDK&quot;&gt;https://www.denx.de/wiki/DULG/ELDK&lt;/a&gt;) which is extensively used to build and test U-Boot.&lt;/p&gt; 
&lt;p&gt;If you are not using a native environment, it is assumed that you have GNU cross compiling tools available in your path. In this case, you must set the environment variable CROSS_COMPILE in your shell. Note that no changes to the Makefile or any other source files are necessary. For example using the ELDK on a 4xx CPU, please enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ CROSS_COMPILE=ppc_4xx-
$ export CROSS_COMPILE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;U-Boot is intended to be simple to build. After installing the sources you must configure U-Boot for one specific board type. This is done by typing:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make NAME_defconfig
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &quot;NAME_defconfig&quot; is the name of one of the existing configu- rations; see configs/*_defconfig for supported names.&lt;/p&gt; 
&lt;p&gt;Note: for some boards special configuration names may exist; check if additional information is available from the board vendor; for instance, the TQM823L systems are available without (standard) or with LCD support. You can select such additional &quot;features&quot; when choosing the configuration, i. e.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  make TQM823L_defconfig
- will configure for a plain TQM823L, i. e. no LCD support

  make TQM823L_LCD_defconfig
- will configure for a TQM823L with U-Boot console on LCD

  etc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, type &quot;make all&quot;, and you should get some working U-Boot images ready for download to / installation on your system:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&quot;u-boot.bin&quot; is a raw binary image&lt;/li&gt; 
 &lt;li&gt;&quot;u-boot&quot; is an image in ELF binary format&lt;/li&gt; 
 &lt;li&gt;&quot;u-boot.srec&quot; is in Motorola S-Record format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;User specific CPPFLAGS, AFLAGS and CFLAGS can be passed to the compiler by setting the according environment variables KCPPFLAGS, KAFLAGS and KCFLAGS. For example to treat all compiler warnings as errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make KCFLAGS=-Werror
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please be aware that the Makefiles assume you are using GNU make, so for instance on NetBSD you might need to use &quot;gmake&quot; instead of native &quot;make&quot;.&lt;/p&gt; 
&lt;p&gt;If the system board that you have is not listed, then you will need to port U-Boot to your hardware platform. To do this, follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a new directory to hold your board specific code. Add any files you need. In your board directory, you will need at least the &quot;Makefile&quot; and a &quot;
  &lt;board&gt;
   .c&quot;.
  &lt;/board&gt;&lt;/li&gt; 
 &lt;li&gt;Create a new configuration file &quot;include/configs/
  &lt;board&gt;
   .h&quot; for your board.
  &lt;/board&gt;&lt;/li&gt; 
 &lt;li&gt;If you&#39;re porting U-Boot to a new CPU, then also create a new directory to hold your CPU specific code. Add any files you need.&lt;/li&gt; 
 &lt;li&gt;Run &quot;make 
  &lt;board&gt;
   _defconfig&quot; with your new name.
  &lt;/board&gt;&lt;/li&gt; 
 &lt;li&gt;Type &quot;make&quot;, and you should get a working &quot;u-boot.srec&quot; file to be installed on your target system.&lt;/li&gt; 
 &lt;li&gt;Debug and solve any problems that might arise. [Of course, this last step is much harder than it sounds.]&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Testing of U-Boot Modifications, Ports to New Hardware, etc.:&lt;/h1&gt; 
&lt;p&gt;If you have modified U-Boot sources (for instance added a new board or support for new devices, a new CPU, etc.) you are expected to provide feedback to the other developers. The feedback normally takes the form of a &quot;patch&quot;, i.e. a context diff against a certain (latest official or latest in the git repository) version of U-Boot sources.&lt;/p&gt; 
&lt;p&gt;But before you submit such a patch, please verify that your modifi- cation did not break existing code. At least make sure that &lt;em&gt;ALL&lt;/em&gt; of the supported boards compile WITHOUT ANY compiler warnings. To do so, just run the buildman script (tools/buildman/buildman), which will configure and build U-Boot for ALL supported system. Be warned, this will take a while. Please see the buildman README, or run &#39;buildman -H&#39; for documentation.&lt;/p&gt; 
&lt;p&gt;See also &quot;U-Boot Porting Guide&quot; below.&lt;/p&gt; 
&lt;h1&gt;Monitor Commands - Overview:&lt;/h1&gt; 
&lt;p&gt;go - start application at address &#39;addr&#39; run - run commands in an environment variable bootm - boot application image from memory bootp - boot image via network using BootP/TFTP protocol bootz - boot zImage from memory tftpboot- boot image via network using TFTP protocol and env variables &quot;ipaddr&quot; and &quot;serverip&quot; (and eventually &quot;gatewayip&quot;) tftpput - upload a file via network using TFTP protocol rarpboot- boot image via network using RARP/TFTP protocol diskboot- boot from IDE devicebootd - boot default, i.e., run &#39;bootcmd&#39; loads - load S-Record file over serial line loadb - load binary file over serial line (kermit mode) loadm - load binary blob from source address to destination address md - memory display mm - memory modify (auto-incrementing) nm - memory modify (constant address) mw - memory write (fill) ms - memory search cp - memory copy cmp - memory compare crc32 - checksum calculation i2c - I2C sub-system sspi - SPI utility commands base - print or set address offset printenv- print environment variables pwm - control pwm channels seama - load SEAMA NAND image setenv - set environment variables saveenv - save environment variables to persistent storage protect - enable or disable FLASH write protection erase - erase FLASH memory flinfo - print FLASH memory information nand - NAND memory operations (see doc/README.nand) bdinfo - print Board Info structure iminfo - print header information for application image coninfo - print console devices and informations ide - IDE sub-system loop - infinite loop on address range loopw - infinite write loop on address range mtest - simple RAM test icache - enable or disable instruction cache dcache - enable or disable data cache reset - Perform RESET of the CPU echo - echo args to console version - print monitor version help - print online help ? - alias for &#39;help&#39;&lt;/p&gt; 
&lt;h1&gt;Monitor Commands - Detailed Description:&lt;/h1&gt; 
&lt;p&gt;TODO.&lt;/p&gt; 
&lt;p&gt;For now: just type &quot;help &lt;command&gt;&quot;.&lt;/p&gt; 
&lt;h1&gt;Note for Redundant Ethernet Interfaces:&lt;/h1&gt; 
&lt;p&gt;Some boards come with redundant Ethernet interfaces; U-Boot supports such configurations and is capable of automatic selection of a &quot;working&quot; interface when needed. MAC assignment works as follows:&lt;/p&gt; 
&lt;p&gt;Network interfaces are numbered eth0, eth1, eth2, ... Corresponding MAC addresses can be stored in the environment as &quot;ethaddr&quot; (=&amp;gt;eth0), &quot;eth1addr&quot; (=&amp;gt;eth1), &quot;eth2addr&quot;, ...&lt;/p&gt; 
&lt;p&gt;If the network interface stores some valid MAC address (for instance in SROM), this is used as default address if there is NO correspon- ding setting in the environment; if the corresponding environment variable is set, this overrides the settings in the card; that means:&lt;/p&gt; 
&lt;p&gt;o If the SROM has a valid MAC address, and there is no address in the environment, the SROM&#39;s address is used.&lt;/p&gt; 
&lt;p&gt;o If there is no valid address in the SROM, and a definition in the environment exists, then the value from the environment variable is used.&lt;/p&gt; 
&lt;p&gt;o If both the SROM and the environment contain a MAC address, and both addresses are the same, this MAC address is used.&lt;/p&gt; 
&lt;p&gt;o If both the SROM and the environment contain a MAC address, and the addresses differ, the value from the environment is used and a warning is printed.&lt;/p&gt; 
&lt;p&gt;o If neither SROM nor the environment contain a MAC address, an error is raised. If CONFIG_NET_RANDOM_ETHADDR is defined, then in this case a random, locally-assigned MAC is used.&lt;/p&gt; 
&lt;p&gt;If Ethernet drivers implement the &#39;write_hwaddr&#39; function, valid MAC addresses will be programmed into hardware as part of the initialization process. This may be skipped by setting the appropriate &#39;ethmacskip&#39; environment variable. The naming convention is as follows: &quot;ethmacskip&quot; (=&amp;gt;eth0), &quot;eth1macskip&quot; (=&amp;gt;eth1) etc.&lt;/p&gt; 
&lt;h1&gt;Image Formats:&lt;/h1&gt; 
&lt;p&gt;U-Boot is capable of booting (and performing other auxiliary operations on) images in two formats:&lt;/p&gt; 
&lt;h2&gt;New uImage format (FIT)&lt;/h2&gt; 
&lt;p&gt;Flexible and powerful format based on Flattened Image Tree -- FIT (similar to Flattened Device Tree). It allows the use of images with multiple components (several kernels, ramdisks, etc.), with contents protected by SHA1, MD5 or CRC32. More details are found in the doc/uImage.FIT directory.&lt;/p&gt; 
&lt;h2&gt;Old uImage format&lt;/h2&gt; 
&lt;p&gt;Old image format is based on binary files which can be basically anything, preceded by a special header; see the definitions in include/image.h for details; basically, the header defines the following image properties:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Target Operating System (Provisions for OpenBSD, NetBSD, FreeBSD, 4.4BSD, Linux, SVR4, Esix, Solaris, Irix, SCO, Dell, NCR, VxWorks, LynxOS, pSOS, QNX, RTEMS, INTEGRITY; Currently supported: Linux, NetBSD, VxWorks, QNX, RTEMS, INTEGRITY).&lt;/li&gt; 
 &lt;li&gt;Target CPU Architecture (Provisions for Alpha, ARM, Intel x86, IA64, MIPS, Nios II, PowerPC, IBM S390, SuperH, Sparc, Sparc 64 Bit; Currently supported: ARM, Intel x86, MIPS, Nios II, PowerPC).&lt;/li&gt; 
 &lt;li&gt;Compression Type (uncompressed, gzip, bzip2)&lt;/li&gt; 
 &lt;li&gt;Load Address&lt;/li&gt; 
 &lt;li&gt;Entry Point&lt;/li&gt; 
 &lt;li&gt;Image Name&lt;/li&gt; 
 &lt;li&gt;Image Timestamp&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The header is marked by a special Magic Number, and both the header and the data portions of the image are secured against corruption by CRC32 checksums.&lt;/p&gt; 
&lt;h1&gt;Linux Support:&lt;/h1&gt; 
&lt;p&gt;Although U-Boot should support any OS or standalone application easily, the main focus has always been on Linux during the design of U-Boot.&lt;/p&gt; 
&lt;p&gt;U-Boot includes many features that so far have been part of some special &quot;boot loader&quot; code within the Linux kernel. Also, any &quot;initrd&quot; images to be used are no longer part of one big Linux image; instead, kernel and &quot;initrd&quot; are separate images. This implementation serves several purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;the same features can be used for other OS or standalone applications (for instance: using compressed images to reduce the Flash memory footprint)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;it becomes much easier to port new Linux kernel versions because lots of low-level, hardware dependent stuff are done by U-Boot&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;the same Linux kernel image can now be used with different &quot;initrd&quot; images; of course this also means that different kernel images can be run with the same &quot;initrd&quot;. This makes testing easier (you don&#39;t have to build a new &quot;zImage.initrd&quot; Linux image when you just change a file in your &quot;initrd&quot;). Also, a field-upgrade of the software is easier now.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Linux HOWTO:&lt;/h1&gt; 
&lt;h2&gt;Porting Linux to U-Boot based systems:&lt;/h2&gt; 
&lt;p&gt;U-Boot cannot save you from doing all the necessary modifications to configure the Linux device drivers for use with your target hardware (no, we don&#39;t intend to provide a full virtual machine interface to Linux :-).&lt;/p&gt; 
&lt;p&gt;But now you can ignore ALL boot loader code (in arch/powerpc/mbxboot).&lt;/p&gt; 
&lt;p&gt;Just make sure your machine specific header file (for instance include/asm-ppc/tqm8xx.h) includes the same definition of the Board Information structure as we define in include/asm-
 &lt;arch&gt;
  /u-boot.h, and make sure that your definition of IMAP_ADDR uses the same value as your U-Boot configuration in CONFIG_SYS_IMMR.
 &lt;/arch&gt;&lt;/p&gt; 
&lt;p&gt;Note that U-Boot now has a driver model, a unified model for drivers. If you are adding a new driver, plumb it into driver model. If there is no uclass available, you are encouraged to create one. See doc/driver-model.&lt;/p&gt; 
&lt;h2&gt;Configuring the Linux kernel:&lt;/h2&gt; 
&lt;p&gt;No specific requirements for U-Boot. Make sure you have some root device (initial ramdisk, NFS) for your target system.&lt;/p&gt; 
&lt;h2&gt;Building a Linux Image:&lt;/h2&gt; 
&lt;p&gt;With U-Boot, &quot;normal&quot; build targets like &quot;zImage&quot; or &quot;bzImage&quot; are not used. If you use recent kernel source, a new build target &quot;uImage&quot; will exist which automatically builds an image usable by U-Boot. Most older kernels also have support for a &quot;pImage&quot; target, which was introduced for our predecessor project PPCBoot and uses a 100% compatible format.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make TQM850L_defconfig
make oldconfig
make dep
make uImage
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &quot;uImage&quot; build target uses a special tool (in &#39;tools/mkimage&#39;) to encapsulate a compressed Linux kernel image with header information, CRC32 checksum etc. for use with U-Boot. This is what we are doing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;build a standard &quot;vmlinux&quot; kernel image (in ELF binary format):&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;convert the kernel into a raw binary image:&lt;/p&gt; &lt;p&gt;${CROSS_COMPILE}-objcopy -O binary &lt;br&gt; -R .note -R .comment &lt;br&gt; -S vmlinux linux.bin&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;compress the binary image:&lt;/p&gt; &lt;p&gt;gzip -9 linux.bin&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;package compressed binary image for U-Boot:&lt;/p&gt; &lt;p&gt;mkimage -A ppc -O linux -T kernel -C gzip &lt;br&gt; -a 0 -e 0 -n &quot;Linux Kernel Image&quot; &lt;br&gt; -d linux.bin.gz uImage&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &quot;mkimage&quot; tool can also be used to create ramdisk images for use with U-Boot, either separated from the Linux kernel image, or combined into one file. &quot;mkimage&quot; encapsulates the images with a 64 byte header containing information about target architecture, operating system, image type, compression method, entry points, time stamp, CRC32 checksums, etc.&lt;/p&gt; 
&lt;p&gt;&quot;mkimage&quot; can be called in two ways: to verify existing images and print the header information, or to build new images.&lt;/p&gt; 
&lt;p&gt;In the first form (with &quot;-l&quot; option) mkimage lists the information contained in the header of an existing U-Boot image; this includes checksum verification:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tools/mkimage -l image
  -l ==&amp;gt; list image header information
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The second form (with &quot;-d&quot; option) is used to build a U-Boot image from a &quot;data file&quot; which is used as image payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tools/mkimage -A arch -O os -T type -C comp -a addr -e ep \
	      -n name -d data_file image
  -A ==&amp;gt; set architecture to &#39;arch&#39;
  -O ==&amp;gt; set operating system to &#39;os&#39;
  -T ==&amp;gt; set image type to &#39;type&#39;
  -C ==&amp;gt; set compression type &#39;comp&#39;
  -a ==&amp;gt; set load address to &#39;addr&#39; (hex)
  -e ==&amp;gt; set entry point to &#39;ep&#39; (hex)
  -n ==&amp;gt; set image name to &#39;name&#39;
  -d ==&amp;gt; use image data from &#39;datafile&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Right now, all Linux kernels for PowerPC systems use the same load address (0x00000000), but the entry point address depends on the kernel version:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2.2.x kernels have the entry point at 0x0000000C,&lt;/li&gt; 
 &lt;li&gt;2.3.x and later kernels have the entry point at 0x00000000.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So a typical call to build a U-Boot image would read:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -n &#39;2.4.4 kernel for TQM850L&#39; \
&amp;gt; -A ppc -O linux -T kernel -C gzip -a 0 -e 0 \
&amp;gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz \
&amp;gt; examples/uImage.TQM850L
Image Name:   2.4.4 kernel for TQM850L
Created:      Wed Jul 19 02:34:59 2000
Image Type:   PowerPC Linux Kernel Image (gzip compressed)
Data Size:    335725 Bytes = 327.86 kB = 0.32 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To verify the contents of the image (or check for corruption):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -l examples/uImage.TQM850L
Image Name:   2.4.4 kernel for TQM850L
Created:      Wed Jul 19 02:34:59 2000
Image Type:   PowerPC Linux Kernel Image (gzip compressed)
Data Size:    335725 Bytes = 327.86 kB = 0.32 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NOTE: for embedded systems where boot time is critical you can trade speed for memory and install an UNCOMPRESSED image instead: this needs more space in Flash, but boots much faster since it does not need to be uncompressed:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; gunzip /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz
-&amp;gt; tools/mkimage -n &#39;2.4.4 kernel for TQM850L&#39; \
&amp;gt; -A ppc -O linux -T kernel -C none -a 0 -e 0 \
&amp;gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux \
&amp;gt; examples/uImage.TQM850L-uncompressed
Image Name:   2.4.4 kernel for TQM850L
Created:      Wed Jul 19 02:34:59 2000
Image Type:   PowerPC Linux Kernel Image (uncompressed)
Data Size:    792160 Bytes = 773.59 kB = 0.76 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similar you can build U-Boot images from a &#39;ramdisk.image.gz&#39; file when your kernel is intended to use an initial ramdisk:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -n &#39;Simple Ramdisk Image&#39; \
&amp;gt; -A ppc -O linux -T ramdisk -C gzip \
&amp;gt; -d /LinuxPPC/images/SIMPLE-ramdisk.image.gz examples/simple-initrd
Image Name:   Simple Ramdisk Image
Created:      Wed Jan 12 14:01:50 2000
Image Type:   PowerPC Linux RAMDisk Image (gzip compressed)
Data Size:    566530 Bytes = 553.25 kB = 0.54 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &quot;dumpimage&quot; tool can be used to disassemble or list the contents of images built by mkimage. See dumpimage&#39;s help output (-h) for details.&lt;/p&gt; 
&lt;h2&gt;Installing a Linux Image:&lt;/h2&gt; 
&lt;p&gt;To downloading a U-Boot image over the serial (console) interface, you must convert the image to S-Record format:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;objcopy -I binary -O srec examples/image examples/image.srec
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &#39;objcopy&#39; does not understand the information in the U-Boot image header, so the resulting S-Record file will be relative to address 0x00000000. To load it to a given address, you need to specify the target address as &#39;offset&#39; parameter with the &#39;loads&#39; command.&lt;/p&gt; 
&lt;p&gt;Example: install the image to address 0x40100000 (which on the TQM8xxL is in the first Flash bank):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; erase 40100000 401FFFFF

.......... done
Erased 8 sectors

=&amp;gt; loads 40100000
## Ready for S-Record download ...
~&amp;gt;examples/image.srec
1 2 3 4 5 6 7 8 9 10 11 12 13 ...
...
15989 15990 15991 15992
[file transfer complete]
[connected]
## Start Addr = 0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check the success of the download using the &#39;iminfo&#39; command; this includes a checksum verification so you can be sure no data corruption happened:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; imi 40100000

## Checking Image at 40100000 ...
   Image Name:	 2.2.13 for initrd on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 335725 Bytes = 327 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Boot Linux:&lt;/h2&gt; 
&lt;p&gt;The &quot;bootm&quot; command is used to boot an application that is stored in memory (RAM or Flash). In case of a Linux kernel image, the contents of the &quot;bootargs&quot; environment variable is passed to the kernel as parameters. You can check and modify this variable using the &quot;printenv&quot; and &quot;setenv&quot; commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; printenv bootargs
bootargs=root=/dev/ram

=&amp;gt; setenv bootargs root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2

=&amp;gt; printenv bootargs
bootargs=root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2

=&amp;gt; bootm 40020000
## Booting Linux kernel at 40020000 ...
   Image Name:	 2.2.13 for NFS on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 381681 Bytes = 372 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK
Linux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:35:17 MEST 2000
Boot arguments: root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2
time_init: decrementer frequency = 187500000/60
Calibrating delay loop... 49.77 BogoMIPS
Memory: 15208k available (700k kernel code, 444k data, 32k init) [c0000000,c1000000]
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to boot a Linux kernel with initial RAM disk, you pass the memory addresses of both the kernel and the initrd image (PPBCOOT format!) to the &quot;bootm&quot; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; imi 40100000 40200000

## Checking Image at 40100000 ...
   Image Name:	 2.2.13 for initrd on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 335725 Bytes = 327 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK

## Checking Image at 40200000 ...
   Image Name:	 Simple Ramdisk Image
   Image Type:	 PowerPC Linux RAMDisk Image (gzip compressed)
   Data Size:	 566530 Bytes = 553 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 00000000
   Verifying Checksum ... OK

=&amp;gt; bootm 40100000 40200000
## Booting Linux kernel at 40100000 ...
   Image Name:	 2.2.13 for initrd on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 335725 Bytes = 327 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK
## Loading RAMDisk Image at 40200000 ...
   Image Name:	 Simple Ramdisk Image
   Image Type:	 PowerPC Linux RAMDisk Image (gzip compressed)
   Data Size:	 566530 Bytes = 553 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 00000000
   Verifying Checksum ... OK
   Loading Ramdisk ... OK
Linux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:32:08 MEST 2000
Boot arguments: root=/dev/ram
time_init: decrementer frequency = 187500000/60
Calibrating delay loop... 49.77 BogoMIPS
...
RAMDISK: Compressed image found at block 0
VFS: Mounted root (ext2 filesystem).

bash#
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Boot Linux and pass a flat device tree:&lt;/h2&gt; 
&lt;p&gt;First, U-Boot must be compiled with the appropriate defines. See the section titled &quot;Linux Kernel Interface&quot; above for a more in depth explanation. The following is an example of how to start a kernel and pass an updated flat device tree:&lt;/p&gt; 
&lt;p&gt;=&amp;gt; print oftaddr oftaddr=0x300000 =&amp;gt; print oft oft=oftrees/mpc8540ads.dtb =&amp;gt; tftp $oftaddr $oft Speed: 1000, full duplex Using TSEC0 device TFTP from server 192.168.1.1; our IP address is 192.168.1.101 Filename &#39;oftrees/mpc8540ads.dtb&#39;. Load address: 0x300000 Loading: # done Bytes transferred = 4106 (100a hex) =&amp;gt; tftp $loadaddr $bootfile Speed: 1000, full duplex Using TSEC0 device TFTP from server 192.168.1.1; our IP address is 192.168.1.2 Filename &#39;uImage&#39;. Load address: 0x200000 Loading:############ done Bytes transferred = 1029407 (fb51f hex) =&amp;gt; print loadaddr loadaddr=200000 =&amp;gt; print oftaddr oftaddr=0x300000 =&amp;gt; bootm $loadaddr - $oftaddr&lt;/p&gt; 
&lt;h2&gt;Booting image at 00200000 ...&lt;/h2&gt; 
&lt;p&gt;Image Name: Linux-2.6.17-dirty Image Type: PowerPC Linux Kernel Image (gzip compressed) Data Size: 1029343 Bytes = 1005.2 kB Load Address: 00000000 Entry Point: 00000000 Verifying Checksum ... OK Uncompressing Kernel Image ... OK Booting using flat device tree at 0x300000 Using MPC85xx ADS machine description Memory CAM mapping: CAM0=256Mb, CAM1=256Mb, CAM2=0Mb residual: 0Mb [snip]&lt;/p&gt; 
&lt;h2&gt;More About U-Boot Image Types:&lt;/h2&gt; 
&lt;p&gt;U-Boot supports the following image types:&lt;/p&gt; 
&lt;p&gt;&quot;Standalone Programs&quot; are directly runnable in the environment provided by U-Boot; it is expected that (if they behave well) you can continue to work in U-Boot after return from the Standalone Program. &quot;OS Kernel Images&quot; are usually images of some Embedded OS which will take over control completely. Usually these programs will install their own set of exception handlers, device drivers, set up the MMU, etc. - this means, that you cannot expect to re-enter U-Boot except by resetting the CPU. &quot;RAMDisk Images&quot; are more or less just data blocks, and their parameters (address, size) are passed to an OS kernel that is being started. &quot;Multi-File Images&quot; contain several images, typically an OS (Linux) kernel image and one or more data images like RAMDisks. This construct is useful for instance when you want to boot over the network using BOOTP etc., where the boot server provides just a single image file, but you want to get for instance an OS kernel and a RAMDisk image.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&quot;Multi-File Images&quot; start with a list of image sizes, each
image size (in bytes) specified by an &quot;uint32_t&quot; in network
byte order. This list is terminated by an &quot;(uint32_t)0&quot;.
Immediately after the terminating 0 follow the images, one by
one, all aligned on &quot;uint32_t&quot; boundaries (size rounded up to
a multiple of 4 bytes).
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&quot;Firmware Images&quot; are binary images containing firmware (like U-Boot or FPGA images) which usually will be programmed to flash memory.&lt;/p&gt; 
&lt;p&gt;&quot;Script files&quot; are command sequences that will be executed by U-Boot&#39;s command interpreter; this feature is especially useful when you configure U-Boot to use a real shell (hush) as command interpreter.&lt;/p&gt; 
&lt;h2&gt;Booting the Linux zImage:&lt;/h2&gt; 
&lt;p&gt;On some platforms, it&#39;s possible to boot Linux zImage. This is done using the &quot;bootz&quot; command. The syntax of &quot;bootz&quot; command is the same as the syntax of &quot;bootm&quot; command.&lt;/p&gt; 
&lt;p&gt;Note, defining the CONFIG_SUPPORT_RAW_INITRD allows user to supply kernel with raw initrd images. The syntax is slightly different, the address of the initrd must be augmented by it&#39;s size, in the following format: &quot;
 &lt;initrd addres&gt;
  :
  &lt;initrd size&gt;
   &quot;.
  &lt;/initrd&gt;
 &lt;/initrd&gt;&lt;/p&gt; 
&lt;h1&gt;Standalone HOWTO:&lt;/h1&gt; 
&lt;p&gt;One of the features of U-Boot is that you can dynamically load and run &quot;standalone&quot; applications, which can use some resources of U-Boot like console I/O functions or interrupt services.&lt;/p&gt; 
&lt;p&gt;Two simple examples are included with the sources:&lt;/p&gt; 
&lt;h2&gt;&quot;Hello World&quot; Demo:&lt;/h2&gt; 
&lt;p&gt;&#39;examples/hello_world.c&#39; contains a small &quot;Hello World&quot; Demo application; it is automatically compiled when you build U-Boot. It&#39;s configured to run at address 0x00040004, so you can play with it like that:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; loads
## Ready for S-Record download ...
~&amp;gt;examples/hello_world.srec
1 2 3 4 5 6 7 8 9 10 11 ...
[file transfer complete]
[connected]
## Start Addr = 0x00040004

=&amp;gt; go 40004 Hello World! This is a test.
## Starting application at 0x00040004 ...
Hello World
argc = 7
argv[0] = &quot;40004&quot;
argv[1] = &quot;Hello&quot;
argv[2] = &quot;World!&quot;
argv[3] = &quot;This&quot;
argv[4] = &quot;is&quot;
argv[5] = &quot;a&quot;
argv[6] = &quot;test.&quot;
argv[7] = &quot;&amp;lt;NULL&amp;gt;&quot;
Hit any key to exit ...

## Application terminated, rc = 0x0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another example, which demonstrates how to register a CPM interrupt handler with the U-Boot code, can be found in &#39;examples/timer.c&#39;. Here, a CPM timer is set up to generate an interrupt every second. The interrupt service routine is trivial, just printing a &#39;.&#39; character, but this is just a demo program. The application can be controlled by the following keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;? - print current values og the CPM Timer registers
b - enable interrupts and start timer
e - stop timer and disable interrupts
q - quit application

=&amp;gt; loads
## Ready for S-Record download ...
~&amp;gt;examples/timer.srec
1 2 3 4 5 6 7 8 9 10 11 ...
[file transfer complete]
[connected]
## Start Addr = 0x00040004

=&amp;gt; go 40004
## Starting application at 0x00040004 ...
TIMERS=0xfff00980
Using timer 1
  tgcr @ 0xfff00980, tmr @ 0xfff00990, trr @ 0xfff00994, tcr @ 0xfff00998, tcn @ 0xfff0099c, ter @ 0xfff009b0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hit &#39;b&#39;: [q, b, e, ?] Set interval 1000000 us Enabling timer Hit &#39;?&#39;: [q, b, e, ?] ........ tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0xef6, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x2ad4, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x1efc, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x169d, ter=0x0 Hit &#39;e&#39;: [q, b, e, ?] ...Stopping timer Hit &#39;q&#39;: [q, b, e, ?] ## Application terminated, rc = 0x0&lt;/p&gt; 
&lt;h1&gt;Implementation Internals:&lt;/h1&gt; 
&lt;p&gt;The following is not intended to be a complete description of every implementation detail. However, it should help to understand the inner workings of U-Boot and make it easier to port it to custom hardware.&lt;/p&gt; 
&lt;h2&gt;Initial Stack, Global Data:&lt;/h2&gt; 
&lt;p&gt;The implementation of U-Boot is complicated by the fact that U-Boot starts running out of ROM (flash memory), usually without access to system RAM (because the memory controller is not initialized yet). This means that we don&#39;t have writable Data or BSS segments, and BSS is not initialized as zero. To be able to get a C environment working at all, we have to allocate at least a minimal stack. Implementation options for this are defined and restricted by the CPU used: Some CPU models provide on-chip memory (like the IMMR area on MPC8xx and MPC826x processors), on others (parts of) the data cache can be locked as (mis-) used as memory, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Chris Hallinan posted a good summary of these issues to the
U-Boot mailing list:

Subject: RE: [U-Boot-Users] RE: More On Memory Bank x (nothingness)?
From: &quot;Chris Hallinan&quot; &amp;lt;clh@net1plus.com&amp;gt;
Date: Mon, 10 Feb 2003 16:43:46 -0500 (22:43 MET)
...

Correct me if I&#39;m wrong, folks, but the way I understand it
is this: Using DCACHE as initial RAM for Stack, etc, does not
require any physical RAM backing up the cache. The cleverness
is that the cache is being used as a temporary supply of
necessary storage before the SDRAM controller is setup. It&#39;s
beyond the scope of this list to explain the details, but you
can see how this works by studying the cache architecture and
operation in the architecture and processor-specific manuals.

OCM is On Chip Memory, which I believe the 405GP has 4K. It
is another option for the system designer to use as an
initial stack/RAM area prior to SDRAM being available. Either
option should work for you. Using CS 4 should be fine if your
board designers haven&#39;t used it for something that would
cause you grief during the initial boot! It is frequently not
used.

CFG_SYS_INIT_RAM_ADDR should be somewhere that won&#39;t interfere
with your processor/board/system design. The default value
you will find in any recent u-boot distribution in
walnut.h should work for you. I&#39;d set it to a value larger
than your SDRAM module. If you have a 64MB SDRAM module, set
it above 400_0000. Just make sure your board has no resources
that are supposed to respond to that address! That code in
start.S has been around a while and should work as is when
you get the config right.

-Chris Hallinan
DS4.COM, Inc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is essential to remember this, since it has some impact on the C code for the initialization procedures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Initialized global data (data segment) is read-only. Do not attempt to write it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Do not use any uninitialized global data (or implicitly initialized as zero data - BSS segment) at all - this is undefined, initiali- zation is performed later (when relocating to RAM).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Stack space is very limited. Avoid big data buffers or things like that.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Having only the stack as writable memory limits means we cannot use normal global data to share information between the code. But it turned out that the implementation of U-Boot can be greatly simplified by making a global data structure (gd_t) available to all functions. We could pass a pointer to this data as argument to &lt;em&gt;all&lt;/em&gt; functions, but this would bloat the code. Instead we use a feature of the GCC compiler (Global Register Variables) to share the data: we place a pointer (gd) to the global data into a register which we reserve for this purpose.&lt;/p&gt; 
&lt;p&gt;When choosing a register for such a purpose we are restricted by the relevant (E)ABI specifications for the current architecture, and by GCC&#39;s implementation.&lt;/p&gt; 
&lt;p&gt;For PowerPC, the following registers have specific use: R1: stack pointer R2: reserved for system use R3-R4: parameter passing and return values R5-R10: parameter passing R13: small data area pointer R30: GOT pointer R31: frame pointer&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(U-Boot also uses R12 as internal GOT pointer. r12
is a volatile register so r12 needs to be reset when
going back and forth between asm and C)

==&amp;gt; U-Boot will use R2 to hold a pointer to the global data

Note: on PPC, we could use a static initializer (since the
address of the global data structure is known at compile time),
but it turned out that reserving a register results in somewhat
smaller code - although the code savings are not that big (on
average for all boards 752 bytes for the whole U-Boot image,
624 text + 127 data).
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On ARM, the following registers are used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;R0:	function argument word/integer result
R1-R3:	function argument word
R9:	platform specific
R10:	stack limit (used only if stack checking is enabled)
R11:	argument (frame) pointer
R12:	temporary workspace
R13:	stack pointer
R14:	link register
R15:	program counter

==&amp;gt; U-Boot will use R9 to hold a pointer to the global data

Note: on ARM, only R_ARM_RELATIVE relocations are supported.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Nios II, the ABI is documented here: &lt;a href=&quot;https://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf&quot;&gt;https://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;==&amp;gt; U-Boot will use gp to hold a pointer to the global data

Note: on Nios II, we give &quot;-G0&quot; option to gcc and don&#39;t use gp
to access small data sections, so gp is free.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On RISC-V, the following registers are used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;x0: hard-wired zero (zero)
x1: return address (ra)
x2:	stack pointer (sp)
x3:	global pointer (gp)
x4:	thread pointer (tp)
x5:	link register (t0)
x8:	frame pointer (fp)
x10-x11:	arguments/return values (a0-1)
x12-x17:	arguments (a2-7)
x28-31:	 temporaries (t3-6)
pc:	program counter (pc)

==&amp;gt; U-Boot will use gp to hold a pointer to the global data
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;System Initialization:&lt;/h2&gt; 
&lt;p&gt;In the reset configuration, U-Boot starts at the reset entry point (on most PowerPC systems at address 0x00000100). Because of the reset configuration for CS0# this is a mirror of the on board Flash memory. To be able to re-map memory U-Boot then jumps to its link address. To be able to implement the initialization code in C, a (small!) initial stack is set up in the internal Dual Ported RAM (in case CPUs which provide such a feature like), or in a locked part of the data cache. After that, U-Boot initializes the CPU core, the caches and the SIU.&lt;/p&gt; 
&lt;p&gt;Next, all (potentially) available memory banks are mapped using a preliminary mapping. For example, we put them on 512 MB boundaries (multiples of 0x20000000: SDRAM on 0x00000000 and 0x20000000, Flash on 0x40000000 and 0x60000000, SRAM on 0x80000000). Then UPM A is programmed for SDRAM access. Using the temporary configuration, a simple memory test is run that determines the size of the SDRAM banks.&lt;/p&gt; 
&lt;p&gt;When there is more than one SDRAM bank, and the banks are of different size, the largest is mapped first. For equal size, the first bank (CS2#) is mapped first. The first mapping is always for address 0x00000000, with any additional banks following immediately to create contiguous memory starting from 0.&lt;/p&gt; 
&lt;p&gt;Then, the monitor installs itself at the upper end of the SDRAM area and allocates memory for use by malloc() and for the global Board Info data; also, the exception vector code is copied to the low RAM pages, and the final stack is set up.&lt;/p&gt; 
&lt;p&gt;Only after this relocation will you have a &quot;normal&quot; C environment; until that you are restricted in several ways, mostly because you are running from ROM, and because the code will have to be relocated to a new address in RAM.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;The U-Boot projects depends on contributions from the user community. If you want to participate, please, have a look at the &#39;General&#39; section of &lt;a href=&quot;https://docs.u-boot.org/en/latest/develop/index.html&quot;&gt;https://docs.u-boot.org/en/latest/develop/index.html&lt;/a&gt; where we describe coding standards and the patch submission process.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mbed-TLS/mbedtls</title>
      <link>https://github.com/Mbed-TLS/mbedtls</link>
      <description>&lt;p&gt;An open source, portable, easy to use, readable and flexible TLS library, and reference implementation of the PSA Cryptography API. Releases are on a varying cadence, typically around 3 - 6 months between releases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; 
&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&quot;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; 
&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; 
&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The main Mbed TLS documentation is available via &lt;a href=&quot;https://mbed-tls.readthedocs.io/&quot;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Documentation for the PSA Cryptography API is available &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure that &lt;a href=&quot;http://www.doxygen.nl/&quot;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For other sources of documentation, see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make&lt;/li&gt; 
 &lt;li&gt;CMake&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; 
&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto/libtfpsacrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto/libtfpsacrypto, and libmbedx509 depends on libmbedcrypto/libtfpsacrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tool versions&lt;/h3&gt; 
&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; 
 &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, Arm Compiler 6, IAR 8 and Visual Studio 2017. More recent versions should work. Slightly older versions may work.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 to generate the test code. Python is also needed to integrate PSA drivers and to build the development branch (see next section).&lt;/li&gt; 
 &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; 
 &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio 2017 or later (if using Visual Studio).&lt;/li&gt; 
 &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Git usage&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;development&lt;/code&gt; branch and the &lt;code&gt;mbedtls-3.6&lt;/code&gt; long-term support branch of Mbed TLS use a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules#_cloning_submodules&quot;&gt;Git submodule&lt;/a&gt; (&lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-framework&quot;&gt;framework&lt;/a&gt;). This is not needed to merely compile the library at a release tag. This is not needed to consume a release archive (zip or tar).&lt;/p&gt; 
&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; 
&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; 
&lt;p&gt;The following tools are required:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run: &lt;pre&gt;&lt;code&gt;python3 -m pip install --user -r scripts/basic.requirements.txt
&lt;/code&gt;&lt;/pre&gt; Depending on your Python installation, you may need to invoke &lt;code&gt;python&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;. To install the packages system-wide, omit the &lt;code&gt;--user&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; 
&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; 
 &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;tests/scripts/check-generated-files.sh -u&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Make&lt;/h3&gt; 
&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; 
&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; 
&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make no_test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; 
&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; 
&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; 
&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; 
&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CMake&lt;/h3&gt; 
&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir
cmake /path/to/mbedtls_source
cmake --build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ctest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -LH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; 
&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now make the desired change:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; 
&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; 
&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::tfpsacrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;add_executable(xyz)

target_link_libraries(xyz
    PUBLIC MbedTLS::mbedtls
           MbedTLS::tfpsacrypto
           MbedTLS::mbedx509)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; 
&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; 
&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; 
&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; 
&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2017.&lt;/p&gt; 
&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; 
&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&quot;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Example programs&lt;/h2&gt; 
&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&quot;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_ssl.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; 
&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/depends.py&lt;/code&gt; test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-test/raw/main/README.md#quick-start&quot;&gt;our testing infrastructure repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; 
&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/&quot;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/&quot;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/&quot;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; 
 &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; 
 &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; 
 &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; 
 &lt;li&gt;Mixed-endian platforms are not supported.&lt;/li&gt; 
 &lt;li&gt;SIZE_MAX must be at least as big as INT_MAX and UINT_MAX.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;PSA cryptography API&lt;/h2&gt; 
&lt;h3&gt;PSA API&lt;/h3&gt; 
&lt;p&gt;Arm&#39;s &lt;a href=&quot;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&quot;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; 
&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; 
 &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; 
 &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; 
 &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; 
 &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&quot;mailto:mbed-crypto@arm.com&quot;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; 
&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. However, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.&lt;/p&gt; 
&lt;h3&gt;PSA drivers&lt;/h3&gt; 
&lt;p&gt;Mbed TLS supports drivers for cryptographic accelerators, secure elements and random generators. This is work in progress. Please note that the driver interfaces are not fully stable yet and may change without notice. We intend to preserve backward compatibility for application code (using the PSA Crypto API), but the code of the drivers may have to change in future minor releases of Mbed TLS.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/Mbed-TLS/TF-PSA-Crypto/raw/development/docs/psa-driver-example-and-guide.md&quot;&gt;PSA driver example and guide&lt;/a&gt; for information on writing a driver.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual &lt;a href=&quot;https://spdx.org/licenses/Apache-2.0.html&quot;&gt;Apache-2.0&lt;/a&gt; OR &lt;a href=&quot;https://spdx.org/licenses/GPL-2.0-or-later.html&quot;&gt;GPL-2.0-or-later&lt;/a&gt; license. See the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for the full text of these licenses, and &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md#License-and-Copyright&quot;&gt;the &#39;License and Copyright&#39; section in the contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Third-party code included in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;This project contains code from other projects. This code is located within the &lt;code&gt;tf-psa-crypto/drivers/&lt;/code&gt; directory. The original license text is included within project subdirectories, where it differs from the normal Mbed TLS license, and/or in source files. The projects are listed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;drivers/everest/&lt;/code&gt;: Files stem from &lt;a href=&quot;https://project-everest.github.io/&quot;&gt;Project Everest&lt;/a&gt; and are distributed under the Apache 2.0 license.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;drivers/p256-m/p256-m/&lt;/code&gt;: Files have been taken from the &lt;a href=&quot;https://github.com/mpg/p256-m&quot;&gt;p256-m&lt;/a&gt; repository. The code in the original repository is distributed under the Apache 2.0 license. It is distributed in Mbed TLS under a dual Apache-2.0 OR GPL-2.0-or-later license with permission from the author.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&quot;mailto:mbed-tls-security@lists.trustedfirmware.org&quot;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&quot;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&quot;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>gojue/ecapture</title>
      <link>https://github.com/gojue/ecapture</link>
      <description>&lt;p&gt;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-logo-400x400.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/README_CN.md&quot;&gt;简体中文&lt;/a&gt; | English | &lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/README_JA.md&quot;&gt;日本語&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/gojue/ecapture&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/gojue/ecapture.svg?label=Stars&amp;amp;logo=github&quot; alt=&quot;GitHub stars&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/gojue/ecapture&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/forks/gojue/ecapture?label=Forks&amp;amp;logo=github&quot; alt=&quot;GitHub forks&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/gojue/ecapture/actions/workflows/code-analysis.yml&quot;&gt;&lt;img src=&quot;https://github.com/gojue/ecapture/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/gojue/ecapture/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/gojue/ecapture?display_name=tag&amp;amp;include_prereleases&amp;amp;sort=semver&quot; alt=&quot;Github Version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;eCapture(旁观者): capture SSL/TLS text content without a CA certificate using eBPF.&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;br&gt; Supports Linux/Android kernel versions x86_64 4.18 and above, &lt;strong&gt;aarch64 5.5&lt;/strong&gt; and above. Need ROOT permission. Does not support Windows and macOS system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;!-- MarkdownTOC autolink=&quot;true&quot; --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#getting-started&quot;&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#download&quot;&gt;Download&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#elf-binary-file&quot;&gt;ELF binary file&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#docker-image&quot;&gt;Docker image&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#capture-openssl-text-content&quot;&gt;Capture openssl text content.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#modules&quot;&gt;Modules&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#openssl-module&quot;&gt;OpenSSL Module&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#gotls-module&quot;&gt;GoTLS Module&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#bash-module&quot;&gt;Other Modules&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#videos&quot;&gt;Videos&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/#compilation&quot;&gt;Compilation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /MarkdownTOC --&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;SSL/TLS plaintext capture, support openssl\libressl\boringssl\gnutls\nspr(nss) libraries.&lt;/li&gt; 
 &lt;li&gt;GoTLS plaintext support go tls library, which refers to encrypted communication in https/tls programs written in the golang language.&lt;/li&gt; 
 &lt;li&gt;Bash audit, capture bash command for Host Security Audit.&lt;/li&gt; 
 &lt;li&gt;Zsh audit, capture zsh command for Host Security Audit.&lt;/li&gt; 
 &lt;li&gt;MySQL query SQL audit, support mysqld 5.6\5.7\8.0, and MariaDB.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-help-v0.8.9.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Getting started&lt;/h1&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;h3&gt;ELF binary file&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] support Linux/Android x86_64/aarch64.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Download ELF zip file &lt;a href=&quot;https://github.com/gojue/ecapture/releases&quot;&gt;release&lt;/a&gt; , unzip and use by command &lt;code&gt;sudo ecapture --help&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker image&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Linux only.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# pull docker image
docker pull gojue/ecapture:latest
# run
docker run --rm --privileged=true --net=host -v ${HOST_PATH}:${CONTAINER_PATH} gojue/ecapture ARGS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;see &lt;a href=&quot;https://hub.docker.com/r/gojue/ecapture&quot;&gt;Docker Hub&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Capture openssl text content.&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo ecapture tls
2024-09-15T11:51:31Z INF AppName=&quot;eCapture(旁观者)&quot;
2024-09-15T11:51:31Z INF HomePage=https://ecapture.cc
2024-09-15T11:51:31Z INF Repository=https://github.com/gojue/ecapture
2024-09-15T11:51:31Z INF Author=&quot;CFC4N &amp;lt;cfc4ncs@gmail.com&amp;gt;&quot;
2024-09-15T11:51:31Z INF Description=&quot;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&quot;
2024-09-15T11:51:31Z INF Version=linux_arm64:0.8.6-20240915-d87ae48:5.15.0-113-generic
2024-09-15T11:51:31Z INF Listen=localhost:28256
2024-09-15T11:51:31Z INF eCapture running logs logger=
2024-09-15T11:51:31Z INF the file handler that receives the captured event eventCollector=
2024-09-15T11:51:31Z INF listen=localhost:28256
2024-09-15T11:51:31Z INF https server starting...You can update the configuration file via the HTTP interface.
2024-09-15T11:51:31Z WRN ========== module starting. ==========
2024-09-15T11:51:31Z INF Kernel Info=5.15.152 Pid=233698
2024-09-15T11:51:31Z INF BTF bytecode mode: CORE. btfMode=0
2024-09-15T11:51:31Z INF master key keylogger has been set. eBPFProgramType=Text keylogger=
2024-09-15T11:51:31Z INF module initialization. isReload=false moduleName=EBPFProbeOPENSSL
2024-09-15T11:51:31Z INF Module.Run()
2024-09-15T11:51:31Z WRN OpenSSL/BoringSSL version not found from shared library file, used default version OpenSSL Version=linux_default_3_0
2024-09-15T11:51:31Z INF Hook masterKey function ElfType=2 Functions=[&quot;SSL_get_wbio&quot;,&quot;SSL_in_before&quot;,&quot;SSL_do_handshake&quot;] binrayPath=/usr/lib/aarch64-linux-gnu/libssl.so.3
2024-09-15T11:51:31Z INF target all process.
2024-09-15T11:51:31Z INF target all users.
2024-09-15T11:51:31Z INF setupManagers eBPFProgramType=Text
2024-09-15T11:51:31Z INF BPF bytecode file is matched. bpfFileName=user/bytecode/openssl_3_0_0_kern_core.o
2024-09-15T11:51:32Z INF perfEventReader created mapSize(MB)=4
2024-09-15T11:51:32Z INF perfEventReader created mapSize(MB)=4
2024-09-15T11:51:32Z INF module started successfully. isReload=false moduleName=EBPFProbeOPENSSL
2024-09-15T11:51:53Z ??? UUID:233851_233851_curl_5_1_172.16.71.1:51837, Name:HTTP2Request, Type:2, Length:304

Frame Type	=&amp;gt;	SETTINGS

Frame Type	=&amp;gt;	WINDOW_UPDATE

Frame Type	=&amp;gt;	HEADERS
header field &quot;:method&quot; = &quot;GET&quot;
header field &quot;:path&quot; = &quot;/&quot;
header field &quot;:scheme&quot; = &quot;https&quot;
header field &quot;:authority&quot; = &quot;google.com&quot;
header field &quot;user-agent&quot; = &quot;curl/7.81.0&quot;
header field &quot;accept&quot; = &quot;*/*&quot;

Frame Type	=&amp;gt;	SETTINGS

2024-09-15T11:51:53Z ??? UUID:233851_233851_curl_5_0_172.16.71.1:51837, Name:HTTP2Response, Type:4, Length:1160

Frame Type	=&amp;gt;	SETTINGS

Frame Type	=&amp;gt;	WINDOW_UPDATE

Frame Type	=&amp;gt;	SETTINGS

Frame Type	=&amp;gt;	HEADERS
header field &quot;:status&quot; = &quot;301&quot;
header field &quot;location&quot; = &quot;https://www.google.com/&quot;
header field &quot;content-type&quot; = &quot;text/html; charset=UTF-8&quot;
header field &quot;content-security-policy-report-only&quot; = &quot;object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-qvZZ0XreBfeqRnUEV1WoYw&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp&quot;
header field &quot;date&quot; = &quot;Sun, 15 Sep 2024 11:51:52 GMT&quot;
header field &quot;expires&quot; = &quot;Tue, 15 Oct 2024 11:51:52 GMT&quot;
header field &quot;cache-control&quot; = &quot;public, max-age=2592000&quot;
header field &quot;server&quot; = &quot;gws&quot;
header field &quot;content-length&quot; = &quot;220&quot;
header field &quot;x-xss-protection&quot; = &quot;0&quot;
header field &quot;x-frame-options&quot; = &quot;SAMEORIGIN&quot;
header field &quot;alt-svc&quot; = &quot;h3=\&quot;:443\&quot;; ma=2592000,h3-29=\&quot;:443\&quot;; ma=2592000&quot;

Frame Type	=&amp;gt;	PING

Frame Type	=&amp;gt;	DATA
&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&amp;gt;
&amp;lt;TITLE&amp;gt;301 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;
&amp;lt;H1&amp;gt;301 Moved&amp;lt;/H1&amp;gt;
The document has moved
&amp;lt;A HREF=&quot;https://www.google.com/&quot;&amp;gt;here&amp;lt;/A&amp;gt;.
&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;p&gt;The eCapture tool comprises 8 modules that respectively support plaintext capture for TLS/SSL encryption libraries like OpenSSL, GnuTLS, NSPR, BoringSSL, and GoTLS. Additionally, it facilitates software audits for Bash, MySQL, and PostgreSQL applications.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;bash capture bash command&lt;/li&gt; 
 &lt;li&gt;zsh capture zsh command&lt;/li&gt; 
 &lt;li&gt;gnutls capture gnutls text content without CA cert for gnutls libraries.&lt;/li&gt; 
 &lt;li&gt;gotls Capturing plaintext communication from Golang programs encrypted with TLS/HTTPS.&lt;/li&gt; 
 &lt;li&gt;mysqld capture sql queries from mysqld 5.6/5.7/8.0 .&lt;/li&gt; 
 &lt;li&gt;nss capture nss/nspr encrypted text content without CA cert for nss/nspr libraries.&lt;/li&gt; 
 &lt;li&gt;postgres capture sql queries from postgres 10+.&lt;/li&gt; 
 &lt;li&gt;tls use to capture tls/ssl text content without CA cert. (Support openssl 1.0.x/1.1.x/3.0.x or newer). You can use &lt;code&gt;ecapture -h&lt;/code&gt; to view the list of subcommands.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OpenSSL Module&lt;/h3&gt; 
&lt;p&gt;eCapture search &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; file default, to search load directories of &lt;code&gt;SO&lt;/code&gt; file, and search &lt;code&gt;openssl&lt;/code&gt; shard libraries location. or you can use &lt;code&gt;--libssl&lt;/code&gt; flag to set shard library path.&lt;/p&gt; 
&lt;p&gt;If target program is compile statically, you can set program path as &lt;code&gt;--libssl&lt;/code&gt; flag value directly。&lt;/p&gt; 
&lt;p&gt;The OpenSSL module supports three capture modes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pcap&lt;/code&gt;/&lt;code&gt;pcapng&lt;/code&gt; mode stores captured plaintext data in &lt;code&gt;pcap-NG&lt;/code&gt; format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;keylog&lt;/code&gt;/&lt;code&gt;key&lt;/code&gt; mode saves the TLS handshake keys to a file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;text&lt;/code&gt; mode directly captures plaintext data, either outputting to a specified file or printing to the command line.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Pcap Mode&lt;/h4&gt; 
&lt;p&gt;Supported TLS encrypted http &lt;code&gt;1.0/1.1/2.0&lt;/code&gt; over TCP, and http3 &lt;code&gt;QUIC&lt;/code&gt; protocol over UDP. You can specify &lt;code&gt;-m pcap&lt;/code&gt; or &lt;code&gt;-m pcapng&lt;/code&gt; and use it in conjunction with &lt;code&gt;--pcapfile&lt;/code&gt; and &lt;code&gt;-i&lt;/code&gt; parameters. The default value for &lt;code&gt;--pcapfile&lt;/code&gt; is &lt;code&gt;ecapture_openssl.pcapng&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo ecapture tls -m pcap -i eth0 --pcapfile=ecapture.pcapng tcp port 443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command saves captured plaintext data packets as a pcapng file, which can be viewed using &lt;code&gt;Wireshark&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo ecapture tls -m pcap -w ecap.pcapng -i ens160
2024-09-15T06:54:12Z INF AppName=&quot;eCapture(旁观者)&quot;
2024-09-15T06:54:12Z INF HomePage=https://ecapture.cc
2024-09-15T06:54:12Z INF Repository=https://github.com/gojue/ecapture
2024-09-15T06:54:12Z INF Author=&quot;CFC4N &amp;lt;cfc4ncs@gmail.com&amp;gt;&quot;
2024-09-15T06:54:12Z INF Description=&quot;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&quot;
2024-09-15T06:54:12Z INF Version=linux_arm64:0.8.6-20240915-d87ae48:5.15.0-113-generic
2024-09-15T06:54:12Z INF Listen=localhost:28256
2024-09-15T06:54:12Z INF eCapture running logs logger=
2024-09-15T06:54:12Z INF the file handler that receives the captured event eventCollector=
2024-09-15T06:54:12Z WRN ========== module starting. ==========
2024-09-15T06:54:12Z INF Kernel Info=5.15.152 Pid=230440
2024-09-15T06:54:12Z INF BTF bytecode mode: CORE. btfMode=0
2024-09-15T06:54:12Z INF listen=localhost:28256
2024-09-15T06:54:12Z INF module initialization. isReload=false moduleName=EBPFProbeOPENSSL
2024-09-15T06:54:12Z INF Module.Run()
2024-09-15T06:54:12Z INF https server starting...You can update the configuration file via the HTTP interface.
2024-09-15T06:54:12Z WRN OpenSSL/BoringSSL version not found from shared library file, used default version OpenSSL Version=linux_default_3_0
2024-09-15T06:54:12Z INF HOOK type:Openssl elf ElfType=2 IFindex=2 IFname=ens160 PcapFilter= binrayPath=/usr/lib/aarch64-linux-gnu/libssl.so.3
2024-09-15T06:54:12Z INF Hook masterKey function Functions=[&quot;SSL_get_wbio&quot;,&quot;SSL_in_before&quot;,&quot;SSL_do_handshake&quot;]
2024-09-15T06:54:12Z INF target all process.
2024-09-15T06:54:12Z INF target all users.
2024-09-15T06:54:12Z INF setupManagers eBPFProgramType=PcapNG
2024-09-15T06:54:12Z INF BPF bytecode file is matched. bpfFileName=user/bytecode/openssl_3_0_0_kern_core.o
2024-09-15T06:54:12Z INF packets saved into pcapng file. pcapng path=/home/ecapture/ecap.pcapng
2024-09-15T06:54:12Z INF perfEventReader created mapSize(MB)=4
2024-09-15T06:54:12Z INF perfEventReader created mapSize(MB)=4
2024-09-15T06:54:12Z INF module started successfully. isReload=false moduleName=EBPFProbeOPENSSL
2024-09-15T06:54:14Z INF packets saved into pcapng file. count=4
2024-09-15T06:54:16Z INF non-TLSv1.3 cipher suite found CLientRandom=f08e8d784962d1693c042f9fe266345507ccfaba58b823904a357f30dbfa1e71 CipherId=0
2024-09-15T06:54:16Z INF non-TLSv1.3 cipher suite found CLientRandom=f08e8d784962d1693c042f9fe266345507ccfaba58b823904a357f30dbfa1e71 CipherId=0
2024-09-15T06:54:16Z INF packets saved into pcapng file. count=183
2024-09-15T06:54:16Z INF CLIENT_RANDOM save success CLientRandom=f08e8d784962d1693c042f9fe266345507ccfaba58b823904a357f30dbfa1e71 TlsVersion=TLS1_2_VERSION bytes=176
2024-09-15T06:54:18Z INF packets saved into pcapng file. count=65
^C2024-09-15T06:54:18Z INF module close.
2024-09-15T06:54:18Z INF packets saved into pcapng file. count=3
2024-09-15T06:54:18Z INF packets saved into pcapng file. count=255
2024-09-15T06:54:18Z INF Module closed,message recived from Context
2024-09-15T06:54:18Z INF iModule module close
2024-09-15T06:54:18Z INF bye bye.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Used &lt;code&gt;Wireshark&lt;/code&gt; to open &lt;code&gt;ecap.pcapng&lt;/code&gt; file to view the plaintext data packets.&lt;/p&gt; 
&lt;h4&gt;Keylog Mode&lt;/h4&gt; 
&lt;p&gt;You can specify &lt;code&gt;-m keylog&lt;/code&gt; or &lt;code&gt;-m key&lt;/code&gt; and use it in conjunction with the &lt;code&gt;--keylogfile&lt;/code&gt; parameter, which defaults to &lt;code&gt;ecapture_masterkey.log&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The captured OpenSSL TLS &lt;code&gt;Master Secret&lt;/code&gt; information is saved to &lt;code&gt;--keylogfile&lt;/code&gt;. You can also enable &lt;code&gt;tcpdump&lt;/code&gt; packet capture and then use &lt;code&gt;Wireshark&lt;/code&gt; to open the file and set the &lt;code&gt;Master Secret&lt;/code&gt; path to view plaintext data packets.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo ecapture tls -m keylog -keylogfile=openssl_keylog.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also directly use the &lt;code&gt;tshark&lt;/code&gt; software for real-time decryption and display:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;tshark -o tls.keylog_file:ecapture_masterkey.log -Y http -T fields -e http.file_data -f &quot;port 443&quot; -i eth0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Text Mode&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;sudo ecapture tls -m text&lt;/code&gt; will output all plaintext data packets. (Starting from v0.7.0, it no longer captures SSLKEYLOG information.)&lt;/p&gt; 
&lt;h3&gt;GoTLS Module&lt;/h3&gt; 
&lt;p&gt;Similar to the OpenSSL module.&lt;/p&gt; 
&lt;h4&gt;gotls command&lt;/h4&gt; 
&lt;p&gt;capture tls text context.&lt;/p&gt; 
&lt;p&gt;Step 1:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo ecapture gotls --elfpath=/home/cfc4n/go_https_client --hex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Step 2:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;/home/cfc4n/go_https_client
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;more help&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo ecapture gotls -h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Other Modules&lt;/h3&gt; 
&lt;p&gt;such as &lt;code&gt;bash\mysqld\postgres&lt;/code&gt; modules, you can use &lt;code&gt;ecapture -h&lt;/code&gt; to view the list of subcommands.&lt;/p&gt; 
&lt;h2&gt;Videos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Youtube video: &lt;a href=&quot;https://www.youtube.com/watch?v=CoDIjEQCvvA&quot; title=&quot;eCapture User Manual&quot;&gt;How to use eCapture v0.1.0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@cfc4ncs/ecapture-supports-capturing-plaintext-of-golang-tls-https-traffic-f16874048269&quot;&gt;eCapture:supports capturing plaintext of Golang TLS/HTTPS traffic&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/gojue/ecapture&quot;&gt;&lt;img src=&quot;https://starchart.cc/gojue/ecapture.svg?sanitize=true&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; 
&lt;h1&gt;Compilation&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/gojue/ecapture/master/COMPILATION.md&quot;&gt;COMPILATION&lt;/a&gt; for details on compiling the eCapture source code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tianocore/edk2</title>
      <link>https://github.com/tianocore/edk2</link>
      <description>&lt;p&gt;EDK II&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;============== EDK II Project&lt;/h1&gt; 
&lt;p&gt;A modern, feature-rich, cross-platform firmware development environment for the UEFI and PI specifications from &lt;a href=&quot;http://www.uefi.org&quot;&gt;www.uefi.org&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;.. image:: &lt;a href=&quot;https://img.shields.io/badge/dynamic/toml?url=https%3A%2F%2Fraw.githubusercontent.com%2Ftianocore%2Fedk2-pytool-extensions%2Frefs%2Fheads%2Fmaster%2Fpyproject.toml&amp;amp;query=%24.%5B&#39;requires-python&#39;%5D&amp;amp;style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffd343&amp;amp;label=Minimum%20Python%20Version%20for%20CI&amp;amp;color=3776ab&amp;amp;link=https%3A%2F%2Fwww.python.org%2Fdownloads%2F&quot;&gt;https://img.shields.io/badge/dynamic/toml?url=https%3A%2F%2Fraw.githubusercontent.com%2Ftianocore%2Fedk2-pytool-extensions%2Frefs%2Fheads%2Fmaster%2Fpyproject.toml&amp;amp;query=%24.%5B&#39;requires-python&#39;%5D&amp;amp;style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffd343&amp;amp;label=Minimum%20Python%20Version%20for%20CI&amp;amp;color=3776ab&amp;amp;link=https%3A%2F%2Fwww.python.org%2Fdownloads%2F&lt;/a&gt; :alt: CI Minimum Python Version&lt;/p&gt; 
&lt;p&gt;It is recommended to install this Python version to run the full set of scripts that enable CI in the project.&lt;/p&gt; 
&lt;p&gt;Other Python requirements for build can be found in the &lt;code&gt;EDK II Build Instructions &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/Build-Instructions/&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;h2&gt;Core CI Build Status&lt;/h2&gt; 
&lt;p&gt;============================= ================= =============== =================== Host Type &amp;amp; Toolchain Build Status Test Status Code Coverage ============================= ================= =============== =================== Windows_VS2022_ |WindowsCiBuild| |WindowsCiTest| |WindowsCiCoverage| Ubuntu_GCC5_ |UbuntuCiBuild| |UbuntuCiTest| |UbuntuCiCoverage| ============================= ================= =============== ===================&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;More CI Build information &amp;lt;.pytool/Readme.md&amp;gt;&lt;/code&gt;__&lt;/p&gt; 
&lt;h2&gt;Platform CI Build Status&lt;/h2&gt; 
&lt;p&gt;Microsoft Windows VS2022&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
============================= ================= ============= ============= ==============
 Toolchain                    CONFIG            DEBUG         RELEASE       NOOPT
============================= ================= ============= ============= ==============
EmulatorPkg_Win_VS2022_       | IA32            |em32d|       |em32r|       |em32n|
|                             | X64             |em64d|       |em64r|       |em64n|
|                             | IA32 FULL       |em32fd|      |em32fr|      |em32fn|
|                             | X64 FULL        |em64fd|      |em64fr|      |em64fn|
OvmfPkg_Win_VS2022_           | IA32            |op32d|       |op32r|       |op32n|
|                             | X64             |op64d|       |op64r|       |op64n|
|                             | IA32 X64        |op3264d|     |op3264r|     |op3264n|
|                             | IA32 X64 FULL   |op3264fd|    |op3264fr|    |op3264fn|
============================= ================= ============= ============= ==============

Ubuntu 18.04 GCC5
`````````````````

============================= ================= ============= ============= ==============
 Toolchain                    CONFIG            DEBUG         RELEASE       NOOPT
============================= ================= ============= ============= ==============
ArmVirtPkg_Ubuntu_GCC5_       | AARCH64         |avAArch64du| |avAArch64ru| |avAArch64nu|
|                             | ARM             |avArmdu|     |avArmru|     |avArmnu|
EmulatorPkg_Ubuntu_GCC5_      | IA32            |em32du|      |em32ru|      |em32nu|
|                             | X64             |em64du|      |em64ru|      |em64nu|
|                             | IA32 FULL       |em32fdu|     |em32fru|     |em32fnu|
|                             | X64 FULL        |em64fdu|     |em64fru|     |em64fnu|
OvmfPkg_Ubuntu_GCC5_          | IA32            |op32du|      |op32ru|      |op32nu|
|                             | X64             |op64du|      |op64ru|      |op64nu|
|                             | IA32 X64        |op3264du|    |op3264ru|    |op3264nu|
|                             | IA32 X64 FULL   |op3264fdu|   |op3264fru|   |op3264fru|
============================= ================= ============= ============= ==============

|TCBZ_2639|_ - EmulatorPkg Ubuntu GCC5 Segfaults during execution.

`More ArmVirtPkg CI Build Information &amp;lt;ArmVirtPkg/PlatformCI/ReadMe.md&amp;gt;`__

`More EmulatorPkg CI Build Information &amp;lt;EmulatorPkg/PlatformCI/ReadMe.md&amp;gt;`__

`More OvmfPkg CI Build Information &amp;lt;OvmfPkg/PlatformCI/ReadMe.md&amp;gt;`__


License Details
---------------

The majority of the content in the EDK II open source project uses a
`BSD-2-Clause Plus Patent License &amp;lt;License.txt&amp;gt;`__. The EDK II open
source project contains the following components that are covered by additional
licenses:

-  `BaseTools/Plugin/CodeQL/analyze &amp;lt;https://www.apache.org/licenses/LICENSE-2.0&amp;gt;`__
-  `BaseTools/Source/C/LzmaCompress &amp;lt;BaseTools/Source/C/LzmaCompress/LZMA-SDK-README.txt&amp;gt;`__
-  `BaseTools/Source/C/VfrCompile/Pccts &amp;lt;BaseTools/Source/C/VfrCompile/Pccts/RIGHTS&amp;gt;`__
-  `CryptoPkg\Library\BaseCryptLib\SysCall\inet_pton.c &amp;lt;CryptoPkg\Library\BaseCryptLib\SysCall\inet_pton.c&amp;gt;`__
-  `CryptoPkg\Library\Include\crypto\dso_conf.h &amp;lt;https://github.com/openssl/openssl/blob/e2e09d9fba1187f8d6aafaa34d4172f56f1ffb72/LICENSE&amp;gt;`__
-  `CryptoPkg\Library\Include\openssl\opensslconf.h &amp;lt;https://github.com/openssl/openssl/blob/e2e09d9fba1187f8d6aafaa34d4172f56f1ffb72/LICENSE&amp;gt;`__
-  `EmbeddedPkg/Library/FdtLib &amp;lt;EmbeddedPkg/Library/FdtLib/fdt.c&amp;gt;`__.  (EDK II uses BSD License)
-  `EmbeddedPkg/Include/fdt.h &amp;lt;EmbeddedPkg/Include/fdt.h&amp;gt;`__.  (EDK II uses BSD Licence)
-  `EmbeddedPkg/Include/libfdt.h &amp;lt;EmbeddedPkg/Include/libfdt.h&amp;gt;`__.  (EDK II uses BSD License)
-  `MdeModulePkg/Library/LzmaCustomDecompressLib &amp;lt;MdeModulePkg/Library/LzmaCustomDecompressLib/LZMA-SDK-README.txt&amp;gt;`__
-  `OvmfPkg &amp;lt;OvmfPkg/License.txt&amp;gt;`__

The EDK II open source project uses content from upstream projects as git submodules
that are covered by additional licenses.

-  `BaseTools/Source/C/BrotliCompress/brotli &amp;lt;https://github.com/google/brotli/blob/666c3280cc11dc433c303d79a83d4ffbdd12cc8d/LICENSE&amp;gt;`__
-  `CryptoPkg/Library/OpensslLib/openssl &amp;lt;https://github.com/openssl/openssl/blob/e2e09d9fba1187f8d6aafaa34d4172f56f1ffb72/LICENSE&amp;gt;`__
-  `CryptoPkg/Library/MbedTlsLib/mbedtls &amp;lt;https://github.com/Mbed-TLS/mbedtls/blob/8c89224991adff88d53cd380f42a2baa36f91454/LICENSE&amp;gt;`__
-  `MdeModulePkg/Library/BrotliCustomDecompressLib/brotli &amp;lt;https://github.com/google/brotli/blob/666c3280cc11dc433c303d79a83d4ffbdd12cc8d/LICENSE&amp;gt;`__
-  `MdeModulePkg/Universal/RegularExpressionDxe/oniguruma &amp;lt;https://github.com/kkos/oniguruma/blob/abfc8ff81df4067f309032467785e06975678f0d/COPYING&amp;gt;`__
-  `UnitTestFrameworkPkg/Library/CmockaLib/cmocka &amp;lt;https://github.com/tianocore/edk2-cmocka/blob/f5e2cd77c88d9f792562888d2b70c5a396bfbf7a/COPYING&amp;gt;`__
-  `UnitTestFrameworkPkg/Library/GoogleTestLib/googletest &amp;lt;https://github.com/google/googletest/blob/86add13493e5c881d7e4ba77fb91c1f57752b3a4/LICENSE&amp;gt;`__
-  `UnitTestFrameworkPkg/Library/SubhookLib/subhook &amp;lt;https://github.com/tianocore/edk2-subhook/blob/83d4e1ebef3588fae48b69a7352cc21801cb70bc/LICENSE.txt&amp;gt;`__
-  `RedfishPkg/Library/JsonLib/jansson &amp;lt;https://github.com/akheron/jansson/blob/2882ead5bb90cf12a01b07b2c2361e24960fae02/LICENSE&amp;gt;`__
-  `MdePkg/Library/BaseFdtLib/libfdt &amp;lt;https://github.com/devicetree-org/pylibfdt/blob/f39368a217496d32c4091a2dba4045b60649e3a5/BSD-2-Clause&amp;gt;`__
-  `MdePkg/Library/MipiSysTLib/mipisyst &amp;lt;https://github.com/MIPI-Alliance/public-mipi-sys-t/blob/aae857d0d05ac65152ed24992a4acd834a0a107c/LICENSE&amp;gt;`__
-  `SecurityPkg/DeviceSecurity/SpdmLib/libspdm &amp;lt;https://github.com/DMTF/libspdm/blob/main/LICENSE.md&amp;gt;`__

The EDK II Project is composed of packages. The maintainers for each package
are listed in `Maintainers.txt &amp;lt;Maintainers.txt&amp;gt;`__.

Resources
---------

-  `TianoCore &amp;lt;http://www.tianocore.org&amp;gt;`__
-  `EDK
   II &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/EDK-II&amp;gt;`__
-  `Getting Started with EDK
   II &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/Getting-Started-with-EDK-II&amp;gt;`__
-  `Mailing
   Lists &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/Mailing-Lists&amp;gt;`__
-  `How To
   Contribute &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/How-To-Contribute&amp;gt;`__
-  `Release
   Planning &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/EDK-II-Release-Planning&amp;gt;`__

Code Contributions
------------------

To make a contribution to a TianoCore project, follow these steps.

#. Create a change description in the format specified below to
    use in the source control commit log.
#. Your commit message must include your ``Signed-off-by`` signature
#. Submit your code to the TianoCore project using the process
    that the project documents on its web page. If the process is
    not documented, then submit the code on development email list
    for the project.
#. It is preferred that contributions are submitted using the same
    copyright license as the base project. When that is not possible,
    then contributions using the following licenses can be accepted:

-  Apache License, Version 2.0: https://opensource.org/license/apache-2-0/
-  BSD (2-clause): https://opensource.org/license/BSD-2-Clause
-  BSD (3-clause): https://opensource.org/license/BSD-3-Clause
-  MIT: https://opensource.org/license/MIT
-  Python-2.0: https://opensource.org/license/Python-2.0
-  Zlib: https://opensource.org/license/Zlib

For documentation:

-  FreeBSD Documentation License
    https://www.freebsd.org/copyright/freebsd-doc-license.html

Contributions of code put into the public domain can also be accepted.

Contributions using other licenses might be accepted, but further
review will be required.

Developer Certificate of Origin
-------------------------------

Your change description should use the standard format for a
commit message, and must include your ``Signed-off-by`` signature.

In order to keep track of who did what, all patches contributed must
include a statement that to the best of the contributor&#39;s knowledge
they have the right to contribute it under the specified license.

The test for this is as specified in the `Developer&#39;s Certificate of
Origin (DCO) 1.1 &amp;lt;https://developercertificate.org/&amp;gt;`__. The contributor
certifies compliance by adding a line saying

Signed-off-by: Developer Name developer@example.org

where ``Developer Name`` is the contributor&#39;s real name, and the email
address is one the developer is reachable through at the time of
contributing.

::

    Developer&#39;s Certificate of Origin 1.1

    By making a contribution to this project, I certify that:

    (a) The contribution was created in whole or in part by me and I
        have the right to submit it under the open source license
        indicated in the file; or

    (b) The contribution is based upon previous work that, to the best
        of my knowledge, is covered under an appropriate open source
        license and I have the right under that license to submit that
        work with modifications, whether created in whole or in part
        by me, under the same open source license (unless I am
        permitted to submit under a different license), as indicated
        in the file; or

    (c) The contribution was provided directly to me by some other
        person who certified (a), (b) or (c) and I have not modified
        it.

    (d) I understand and agree that this project and the contribution
        are public and that a record of the contribution (including all
        personal information I submit with it, including my sign-off) is
        maintained indefinitely and may be redistributed consistent with
        this project or the open source license(s) involved.

Sample Change Description / Commit Message
------------------------------------------

::

    From: Contributor Name &amp;lt;contributor@example.com&amp;gt;
    Subject: [Repository/Branch PATCH] Pkg-Module: Brief-single-line-summary

    Full-commit-message

    Signed-off-by: Contributor Name &amp;lt;contributor@example.com&amp;gt;

Notes for sample patch email
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;The first line of commit message is taken from the email&#39;s subject line following &lt;code&gt;[Repository/Branch PATCH]&lt;/code&gt;. The remaining portion of the commit message is the email&#39;s content.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;git format-patch&lt;/code&gt; is one way to create this format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Definitions for sample patch email&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
-  ``Repository`` is the identifier of the repository the patch applies.
    This identifier should only be provided for repositories other than
    ``edk2``. For example ``edk2-BuildSpecification`` or ``staging``.
-  ``Branch`` is the identifier of the branch the patch applies. This
    identifier should only be provided for branches other than
   ``edk2/master``.
    For example ``edk2/UDK2015``,
   ``edk2-BuildSpecification/release/1.27``, or
    ``staging/edk2-test``.
-  ``Module`` is a short identifier for the affected code or
   documentation. For example ``MdePkg``, ``MdeModulePkg/UsbBusDxe``, ``Introduction``, or
    ``EDK II INF File Format``.
-  ``Brief-single-line-summary`` is a short summary of the change.
-  The entire first line should be less than ~70 characters.
-  ``Full-commit-message`` a verbose multiple line comment describing
    the change. Each line should be less than ~70 characters.
-  ``Signed-off-by`` is the contributor&#39;s signature identifying them
    by their real/legal name and their email address.

Submodules
----------

The current submodules used in EDK II are in `.gitmodules &amp;lt;.gitmodules&amp;gt;`__.

To get a full, buildable EDK II repository, use following steps of git
command

.. code-block:: bash

  git clone https://github.com/tianocore/edk2.git
  cd edk2
  git submodule update --init
  cd ..

If there&#39;s update for submodules, use following git commands to get
the latest submodules code.

.. code-block:: bash

  cd edk2
  git pull
  git submodule update

Note: When cloning submodule repos, &#39;--recursive&#39; option is not
recommended. EDK II itself will not use any code/feature from
submodules in above submodules. So using &#39;--recursive&#39; adds a
dependency on being able to reach servers we do not actually want
any code from, as well as needlessly downloading code we will not
use.

.. ===================================================================
.. This is a bunch of directives to make the README file more readable
.. ===================================================================

.. CoreCI

.. _Windows_VS2022: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=32&amp;amp;branchName=master
.. |WindowsCiBuild| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/Windows%20VS2022%20CI?branchName=master
.. |WindowsCiTest| image:: https://img.shields.io/azure-devops/tests/tianocore/edk2-ci/32.svg
.. |WindowsCiCoverage| image:: https://img.shields.io/badge/coverage-coming_soon-blue

.. _Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=31&amp;amp;branchName=master
.. |UbuntuCiBuild| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/Ubuntu%20GCC5%20CI?branchName=master
.. |UbuntuCiTest| image:: https://img.shields.io/azure-devops/tests/tianocore/edk2-ci/31.svg
.. |UbuntuCiCoverage| image:: https://img.shields.io/badge/coverage-coming_soon-blue

.. ArmVirtPkg

.. _ArmVirtPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=46&amp;amp;branchName=master
.. |avAArch64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_AARCH64_DEBUG
.. |avAArch64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_AARCH64_RELEASE
.. |avAArch64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_AARCH64_NOOPT

.. |avArmdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_ARM_DEBUG
.. |avArmru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_ARM_RELEASE
.. |avArmnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_ARM_NOOPT

.. EmulatorPkg

.. |TCBZ_2639| image:: https://img.shields.io/github/issues/tianocore/edk2?baseUrl=https%3A%2F%2Fgithub.com
.. _TCBZ_2639: https://github.com/tianocore/edk2/issues/9905

.. _EmulatorPkg_Win_VS2022:  https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=44&amp;amp;branchName=master
.. _EmulatorPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=43&amp;amp;branchName=master

.. |em32d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_DEBUG
.. |em32du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_DEBUG
.. |em32r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_RELEASE
.. |em32ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_RELEASE
.. |em32n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_NOOPT
.. |em32nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_NOOPT

.. |em32fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_DEBUG
.. |em32fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_DEBUG
.. |em32fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_RELEASE
.. |em32fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_RELEASE
.. |em32fn| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_NOOPT
.. |em32fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_NOOPT

.. |em64d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_DEBUG
.. |em64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_DEBUG
.. |em64r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_RELEASE
.. |em64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_RELEASE
.. |em64n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_NOOPT
.. |em64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_NOOPT

.. |em64fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_DEBUG
.. |em64fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_DEBUG
.. |em64fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_RELEASE
.. |em64fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_RELEASE
.. |em64fn| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_NOOPT
.. |em64fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_NOOPT

.. OvmfPkg

.. _OvmfPkg_Win_VS2022:  https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=50&amp;amp;branchName=master
.. _OvmfPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=48&amp;amp;branchName=master

.. |op32d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_DEBUG
.. |op32du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_DEBUG
.. |op32r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_RELEASE
.. |op32ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_RELEASE
.. |op32n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_NOOPT
.. |op32nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_NOOPT

.. |op64d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_DEBUG
.. |op64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_DEBUG
.. |op64r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_RELEASE
.. |op64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_RELEASE
.. |op64n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_NOOPT
.. |op64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_NOOPT


.. |op3264d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_DEBUG
.. |op3264du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_DEBUG
.. |op3264r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_RELEASE
.. |op3264ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_RELEASE
.. |op3264n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_NOOPT
.. |op3264nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_NOOPT

.. |op3264fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_DEBUG
.. |op3264fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_DEBUG
.. |op3264fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_RELEASE
.. |op3264fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_RELEASE
.. |op3264fn| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2022_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_NOOPT
.. |op3264fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_NOOPT
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>EpicGamesExt/raddebugger</title>
      <link>https://github.com/EpicGamesExt/raddebugger</link>
      <description>&lt;p&gt;A native, user-mode, multi-process, graphical debugger.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The RAD Debugger Project&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; This README does not document usage instructions and tips for the debugger itself, and is intended as a technical overview of the project. The debugger&#39;s README, which includes usage instructions and tips, can be found packaged along with debugger releases, or within the &lt;code&gt;build&lt;/code&gt; folder after a local copy has been built.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The RAD Debugger is a native, user-mode, multi-process, graphical debugger. It currently only supports local-machine Windows x64 debugging with PDBs, with plans to expand and port in the future. In the future we&#39;ll expand to also support native Linux debugging and DWARF debug info.&lt;/p&gt; 
&lt;p&gt;The RAD Debugger is currently in &lt;em&gt;ALPHA&lt;/em&gt;. In order to get the debugger bullet- proof, it&#39;d greatly help out if you submitted the issues you find here, along with any information you can gather, like dump files (along with the build you used), instructions to reproduce, test executables, and so on.&lt;/p&gt; 
&lt;p&gt;You can download pre-built binaries for the debugger &lt;a href=&quot;https://github.com/EpicGamesExt/raddebugger/releases&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The RAD Debugger project aims to simplify the debugger by simplifying and unifying the underlying debug info format. In that pursuit we&#39;ve built the RAD Debug Info (RDI) format, which is what the debugger parses and uses. To work with existing toolchains, we convert PDB (and eventually PE/ELF files with embedded DWARF) into the RDI format on-demand.&lt;/p&gt; 
&lt;p&gt;The RDI format is currently specified in code, in the files within the &lt;code&gt;src/lib_rdi_format&lt;/code&gt; folder. The other relevant folders for working with the format are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lib_rdi_make&lt;/code&gt;: The &quot;RAD Debug Info Make&quot; library, for making RDI debug info.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_from_pdb&lt;/code&gt;: Our PDB-to-RDI converter. Can be used as a helper codebase layer, or built as an executable with a command line interface frontend.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_from_dwarf&lt;/code&gt;: Our in-progress DWARF-to-RDI converter.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_dump&lt;/code&gt;: Our RDI textual dumping utility.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development Setup Instructions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Note: Currently, only x64 Windows development is supported.&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;1. Installing the Required Tools (MSVC &amp;amp; Windows SDK)&lt;/h3&gt; 
&lt;p&gt;In order to work with the codebase, you&#39;ll need the &lt;a href=&quot;https://aka.ms/vs/17/release/vs_BuildTools.exe&quot;&gt;Microsoft C/C++ Build Tools v15 (2017) or later&lt;/a&gt;, for both the Windows SDK and the MSVC compiler and linker.&lt;/p&gt; 
&lt;p&gt;If the Windows SDK is installed (e.g. via installation of the Microsoft C/C++ Build Tools), you may also build with &lt;a href=&quot;https://releases.llvm.org/&quot;&gt;Clang&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;2. Build Environment Setup&lt;/h3&gt; 
&lt;p&gt;Building the codebase can be done in a terminal which is equipped with the ability to call either MSVC or Clang from command line.&lt;/p&gt; 
&lt;p&gt;This is generally done by calling &lt;code&gt;vcvarsall.bat x64&lt;/code&gt;, which is included in the Microsoft C/C++ Build Tools. This script is automatically called by the &lt;code&gt;x64 Native Tools Command Prompt for VS &amp;lt;year&amp;gt;&lt;/code&gt; variant of the vanilla &lt;code&gt;cmd.exe&lt;/code&gt;. If you&#39;ve installed the build tools, this command prompt may be easily located by searching for &lt;code&gt;Native&lt;/code&gt; from the Windows Start Menu search.&lt;/p&gt; 
&lt;p&gt;You can ensure that the MSVC compiler is accessible from your command line by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If everything is set up correctly, you should have output very similar to the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30151 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

usage: cl [ option... ] filename... [ /link linkoption... ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. Building&lt;/h3&gt; 
&lt;p&gt;Within this terminal, &lt;code&gt;cd&lt;/code&gt; to the root directory of the codebase, and just run the &lt;code&gt;build.bat&lt;/code&gt; script:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should see the following output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[debug mode]
[msvc compile]
metagen_main.c
searching C:\devel\raddebugger/src... 309 files found
parsing metadesk... 15 metadesk files parsed
gathering tables... 96 tables found
generating layer code...
raddbg_main.c
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If everything worked correctly, there will be a &lt;code&gt;build&lt;/code&gt; folder in the root level of the codebase, and it will contain a freshly-built &lt;code&gt;raddbg.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Short-To-Medium-Term Roadmap&lt;/h2&gt; 
&lt;h3&gt;The Initial Alpha Battle-Testing Phase&lt;/h3&gt; 
&lt;p&gt;The first priority for the project is to ensure that the most crucial debugger components are functioning extremely reliably for local, x64, Windows debugging. This would include parts like debug info conversion, debug info loading, process control, stepping, evaluation (correct usage of both location info and type info), and a robust frontend which ensures the lower level parts are usable.&lt;/p&gt; 
&lt;p&gt;We feel that the debugger has already come a long way in all of these respects, but given the massive set of possible combinations of languages, build settings, toolchains, used language features, and patterns of generated code, there are still cases where the debugger has not been tested, and so there are still issues. So, we feel that the top priority is eliminating these issues, such that the debugging experience is rock solid.&lt;/p&gt; 
&lt;h3&gt;Local x64 Linux Debugging Phase&lt;/h3&gt; 
&lt;p&gt;The next priority for the project is to take the rock solid x64 Windows debugging experience, and port all of the relevant pieces to support local x64 Linux debugging also.&lt;/p&gt; 
&lt;p&gt;The debugger has been written to abstract over the parts that need to differ on either Linux or Windows, and this is mainly going to be a task in building out different backends for those abstraction layers.&lt;/p&gt; 
&lt;p&gt;The major parts of this phase are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Porting the &lt;code&gt;src/demon&lt;/code&gt; layer to implement the Demon local process control abstraction API.&lt;/li&gt; 
 &lt;li&gt;Implementing an x64 ELF Linux unwinder in the &lt;code&gt;src/ctrl&lt;/code&gt; layer.&lt;/li&gt; 
 &lt;li&gt;Creating a DWARF-to-RDI converter (in the same way that we&#39;ve built a PDB-to-RDI converter). A partial implementation of this is in &lt;code&gt;src/rdi_from_dwarf&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Porting the &lt;code&gt;src/render&lt;/code&gt; layer to implement all of the rendering features the frontend needs on a Linux-compatible API (the backend used on Windows is D3D11).&lt;/li&gt; 
 &lt;li&gt;Porting the &lt;code&gt;src/font_provider&lt;/code&gt; layer to a Linux-compatible font rasterization backend, like FreeType (the backend used on Windows is DirectWrite).&lt;/li&gt; 
 &lt;li&gt;Porting the &lt;code&gt;src/os&lt;/code&gt; layers to Linux. This includes core operating system abstraction (virtual memory allocation, threading and synchronization primitives, and so on), and graphical operating system abstraction (windows, input events, and so on).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Once the above list is complete, and once every part is rock solid, the Windows debugging experience we&#39;ll have worked diligently to create will also be available natively on Linux machines.&lt;/p&gt; 
&lt;h3&gt;And Beyond!&lt;/h3&gt; 
&lt;p&gt;There are several directions we might take after these two major phases, like remote debugging, porting to different architectures, further improving the debugger&#39;s features (like improving the visualization engine), and so on. But for now, we&#39;re mostly focused on those first two phases.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;The RAD Linker&lt;/h1&gt; 
&lt;p&gt;The RAD Linker is a new performance linker for generating x64 PE/COFF binaries. It is designed to be very fast when creating gigantic executables. It generates standard PDB files for debugging, but it can also optionally create RAD Debugger debug info too (useful for huge executables that otherwise create broken PDBs that overflow internal 32-bit tables).&lt;/p&gt; 
&lt;p&gt;The RAD Linker is primarily optimized to handle huge linking projects - in our test cases (where debug info is multiple gigabytes), we see 50% faster link times.&lt;/p&gt; 
&lt;p&gt;The command line syntax is fully compatible with MSVC and you can get a full list of implemented switches from &lt;code&gt;/help&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Our current designed-for use case for the linker is to help with the compile-debug cycle of huge projects. We don&#39;t yet have support for dead-code-elimination or link-time-optimizations, but these features are on the road map.&lt;/p&gt; 
&lt;p&gt;By default, the RAD linker spawns as many threads as there are cores, so if you plan to run multiple linkers in parallel, you can limit the number of thread workers via &lt;code&gt;/rad_workers&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We also have support for large memory pages, which, when enabled, reduce link time by another 25%. To link with large pages, you need to explicitly request them via &lt;code&gt;/rad_large_pages&lt;/code&gt;. Large pages are off by default, since Windows support for large pages is a bit buggy - we recommend they only be used in Docker or VM images where the environment is reset after each link. In a standard Windows environment, using large pages otherwise will fragment memory quickly forcing a reboot. We are working on a Linux port of the linker that will be able to build with large pages robustly.&lt;/p&gt; 
&lt;h2&gt;Short Term Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Porting linker to Linux (for Windows executables, just running on Linux).&lt;/li&gt; 
 &lt;li&gt;Debug info features 
  &lt;ul&gt; 
   &lt;li&gt;Get DWARF debug info converter up-and-running.&lt;/li&gt; 
   &lt;li&gt;Smooth out rough edges in RADDBGI builder.&lt;/li&gt; 
   &lt;li&gt;Improve build speed further (especially for tiny and mid sizes projects).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Other features to come 
  &lt;ul&gt; 
   &lt;li&gt;Dead-code-elimination via &lt;code&gt;/opt:ref&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Link Time Optimizations with the help of clang (we won&#39;t support LTCG from MSVC compiler since it is undocumented).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;To build the RAD Linker&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Setup development environment, &lt;a href=&quot;https://raw.githubusercontent.com/EpicGamesExt/raddebugger/master/#Development-Setup-Instructions&quot;&gt;see&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;build radlink release&lt;/code&gt; or if you have clang installed &lt;code&gt;build radlink release clang&lt;/code&gt;. We favor latter option for better code generation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If build was successful linker executable is placed in &lt;code&gt;build&lt;/code&gt; folder under &lt;code&gt;radlink.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/a95b382a-76b4-4a4c-b809-b61fe25e667a&quot; alt=&quot;AMD Ryzen Threadripper PRO 3995WX 64-Cores, 256 GiB RAM (Windows x64)&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Top-Level Directory Descriptions&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;data&lt;/code&gt;: Small binary files which are used when building, either to embed within build artifacts, or to package with them.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src&lt;/code&gt;: All source code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;After setting up the codebase and building, the following directories will also exist:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: All build artifacts. Not checked in to version control.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;local&lt;/code&gt;: Local files, used for local build configuration input files. Not checked in to version control.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Codebase Introduction&lt;/h2&gt; 
&lt;p&gt;The codebase is organized into &lt;em&gt;layers&lt;/em&gt;. Layers are separated either to isolate certain problems, and to allow inclusion into various builds without needing to pull everything in the codebase into a build. Layers correspond with folders inside of the &lt;code&gt;src&lt;/code&gt; directory. Sometimes, one folder inside of the &lt;code&gt;src&lt;/code&gt; directory will include multiple sub-layers, but the structure is intended to be fairly flat.&lt;/p&gt; 
&lt;p&gt;Layers correspond roughly 1-to-1 with &lt;em&gt;namespaces&lt;/em&gt;. The term &quot;namespaces&quot; in this context does not refer to specific namespace language features, but rather a naming convention for C-style namespaces, which are written in the codebase as a short prefix, usually 1-3 characters, followed by an underscore. These namespaces are used such that the layer to which certain code belongs may be quickly understood by glancing at code. The namespaces are generally quite short to ensure that they aren&#39;t much of a hassle to write. Sometimes, multiple sub- layers will share a namespace. A few layers do not have a namespace, but most do. Namespaces are either all-caps or lowercase depending on the context in which they&#39;re used. For types, enum values, and some macros, they are capitalized. For functions and global variables, they are lowercase.&lt;/p&gt; 
&lt;p&gt;Layers depend on other layers, but circular dependencies would break the separability and isolation utility of layers (in effect, forming one big layer), so in other words, layers are arranged into a directed acyclic graph.&lt;/p&gt; 
&lt;p&gt;A few layers are built to be used completely independently from the rest of the codebase, as libraries in other codebases and projects. As such, these layers do not depend on any other layers in the codebase. The folders which contain these layers are prefixed with &lt;code&gt;lib_&lt;/code&gt;, like &lt;code&gt;lib_rdi_format&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;A list of the layers in the codebase and their associated namespaces is below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;async&lt;/code&gt; (&lt;code&gt;ASYNC_&lt;/code&gt;): Implements a system for asynchronous work to be queued and executed on a thread pool.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base&lt;/code&gt; (no namespace): Universal, codebase-wide constructs. Strings, math, memory allocators, helper macros, command-line parsing, and so on. Depends on no other codebase layers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;codeview&lt;/code&gt; (&lt;code&gt;CV_&lt;/code&gt;): Code for parsing and/or writing the CodeView format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;coff&lt;/code&gt; (&lt;code&gt;COFF_&lt;/code&gt;): Code for parsing and/or writing the COFF (Common Object File Format) file format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ctrl&lt;/code&gt; (&lt;code&gt;CTRL_&lt;/code&gt;): The debugger&#39;s &quot;control system&quot; layer. Implements asynchronous process control, stepping, and breakpoints for all attached processes. Runs in lockstep with attached processes. When it runs, attached processes are halted. When attached processes are running, it is halted. Driven by a debugger frontend on another thread.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dasm_cache&lt;/code&gt; (&lt;code&gt;DASM_&lt;/code&gt;): An asynchronous disassembly decoder and cache. Users ask for disassembly for some data, with a particular architecture, and other various parameters, and threads implemented in this layer decode and cache the disassembly for that data with those parameters.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dbgi&lt;/code&gt; (&lt;code&gt;DI_&lt;/code&gt;): An asynchronous debug info loader and cache. Loads debug info stored in the RDI format. Users ask for debug info for a particular path, and on separate threads, this layer loads the associated debug info file. If necessary, it will launch a separate conversion process to convert original debug info into the RDI format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dbg_engine&lt;/code&gt; (&lt;code&gt;D_&lt;/code&gt;): Implements the core debugger system, without any graphical components. This contains top-level logic for things like stepping, launching, freezing threads, mid-run breakpoint addition, some caching layers, and so on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;demon&lt;/code&gt; (&lt;code&gt;DMN_&lt;/code&gt;): An abstraction layer for local-machine, low-level process control. The abstraction is used to provide a common interface for process control on target platforms. Used to implement part of &lt;code&gt;ctrl&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;draw&lt;/code&gt; (&lt;code&gt;DR_&lt;/code&gt;): Implements a high-level graphics drawing API for the debugger&#39;s purposes, using the underlying &lt;code&gt;render&lt;/code&gt; abstraction layer. Provides high-level APIs for various draw commands, but takes care of batching them, and so on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;eval&lt;/code&gt; (&lt;code&gt;E_&lt;/code&gt;): Implements a compiler for an expression language built for evaluation of variables, registers, types, and more, from debugger-attached processes, debug info, debugger state, and files. Broken into several phases mostly corresponding to traditional compiler phases - lexer, parser, type-checker, IR generation, and IR evaluation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;eval_visualization&lt;/code&gt; (&lt;code&gt;EV_&lt;/code&gt;): Implements the core non-graphical evaluation visualization engine, which can be used to visualize evaluations (provided by the &lt;code&gt;eval&lt;/code&gt; layer) in a number of ways. Implements core data structures and transforms for the &lt;code&gt;Watch&lt;/code&gt; view.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file_stream&lt;/code&gt; (&lt;code&gt;FS_&lt;/code&gt;): Provides asynchronous file loading, storing the artifacts inside of the cache implemented by the &lt;code&gt;hash_store&lt;/code&gt; layer, and hot-reloading the contents of files when they change. Allows callers to map file paths to data hashes, which can then be used to obtain the file&#39;s data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;font_cache&lt;/code&gt; (&lt;code&gt;FNT_&lt;/code&gt;): Implements a cache of rasterized font data, both in CPU-side data for text shaping, and in GPU texture atlases for rasterized glyphs. All cache information is sourced from the &lt;code&gt;font_provider&lt;/code&gt; abstraction layer.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;font_provider&lt;/code&gt; (&lt;code&gt;FP_&lt;/code&gt;): An abstraction layer for various font file decoding and font rasterization backends.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fuzzy_search&lt;/code&gt; (&lt;code&gt;FZY_&lt;/code&gt;): Provides a fuzzy searching engine for doing large, asynchronous fuzzy searches. Used by the debugger for implementing things like the symbol lister or the &lt;code&gt;Procedures&lt;/code&gt; view, which search across all loaded debug info records, using fuzzy matching rules.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;geo_cache&lt;/code&gt; (&lt;code&gt;GEO_&lt;/code&gt;): Implements an asynchronously-filled cache for GPU geometry data, filled by data sourced in the &lt;code&gt;hash_store&lt;/code&gt; layer&#39;s cache. Used for asynchronously preparing data for visualization.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hash_store&lt;/code&gt; (&lt;code&gt;HS_&lt;/code&gt;): Implements a cache for general data blobs, keyed by a 128-bit hash of the data. Also implements a 128-bit key cache on top, where the keys refer to a unique identity, associated with a 128-bit hash, where the hash may change across time. Used as a general data store by other layers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lib_raddbg_markup&lt;/code&gt; (&lt;code&gt;RADDBG_&lt;/code&gt;): Standalone library for marking up user programs to work with various features in the debugger. Does not depend on &lt;code&gt;base&lt;/code&gt;, and can be independently relocated to other codebases.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lib_rdi_format&lt;/code&gt; (&lt;code&gt;RDI_&lt;/code&gt;): Standalone library which defines the core RDI types and helper functions for reading and writing the RDI debug info file format. Does not depend on &lt;code&gt;base&lt;/code&gt;, and can be independently relocated to other codebases.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lib_rdi_make&lt;/code&gt; (&lt;code&gt;RDIM_&lt;/code&gt;): Standalone library for constructing RDI debug info data. Does not depend on &lt;code&gt;base&lt;/code&gt;, and can be independently relocated to other codebases.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mdesk&lt;/code&gt; (&lt;code&gt;MD_&lt;/code&gt;): Code for parsing Metadesk files (stored as &lt;code&gt;.mdesk&lt;/code&gt;), which is the JSON-like (technically a JSON superset) text format used for the debugger&#39;s user and project configuration files, view rules, and metacode, which is parsed and used to generate code with the &lt;code&gt;metagen&lt;/code&gt; layer.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;metagen&lt;/code&gt; (&lt;code&gt;MG_&lt;/code&gt;): A metaprogram which is used to generate primarily code and data tables. Consumes Metadesk files, stored with the extension &lt;code&gt;.mdesk&lt;/code&gt;, and generates C code which is then included by hand-written C code. Currently, it does not analyze the codebase&#39;s hand-written C code, but in principle this is possible. This allows easier &amp;amp; less-error-prone management of large data tables, which are then used to produce e.g. C &lt;code&gt;enum&lt;/code&gt;s and a number of associated data tables. There are also a number of other generation features, like embedding binary files or complex multi-line strings into source code. This layer cannot depend on any other layer in the codebase directly, including &lt;code&gt;base&lt;/code&gt;, because it may be used to generate code for those layers. To still use &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;os&lt;/code&gt; layer features in the &lt;code&gt;metagen&lt;/code&gt; program, a separate, duplicate version of &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;os&lt;/code&gt; are included in this layer. They are updated manually, as needed. This is to ensure the stability of the metaprogram.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;msf&lt;/code&gt; (&lt;code&gt;MSF_&lt;/code&gt;): Code for parsing and/or writing the MSF file format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mule&lt;/code&gt; (no namespace): Test executables for battle testing debugger functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mutable_text&lt;/code&gt; (&lt;code&gt;MTX_&lt;/code&gt;): Implements an asynchronously-filled-and-mutated cache for text buffers which are mutated across time. In the debugger, this is used to implement the &lt;code&gt;Output&lt;/code&gt; view.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;natvis&lt;/code&gt; (no namespace): NatVis files for type visualization of the codebase&#39;s types in other debuggers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os/core&lt;/code&gt; (&lt;code&gt;OS_&lt;/code&gt;): An abstraction layer providing core, non-graphical functionality from the operating system under an abstract API, which is implemented per-target-operating-system.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os/gfx&lt;/code&gt; (&lt;code&gt;OS_&lt;/code&gt;): An abstraction layer, building on &lt;code&gt;os/core&lt;/code&gt;, providing graphical operating system features under an abstract API, which is implemented per-target-operating-system.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;path&lt;/code&gt; (&lt;code&gt;PATH_&lt;/code&gt;): Small helpers for manipulating file path strings.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pdb&lt;/code&gt; (&lt;code&gt;PDB_&lt;/code&gt;): Code for parsing and/or writing the PDB file format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pe&lt;/code&gt; (&lt;code&gt;PE_&lt;/code&gt;): Code for parsing and/or writing the PE (Portable Executable) file format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;raddbg&lt;/code&gt; (&lt;code&gt;RD_&lt;/code&gt;): The layer which ties everything together for the main graphical debugger. Implements the debugger&#39;s graphical frontend, all of the debugger-specific UI, the debugger executable&#39;s command line interface, and all of the built-in visualizers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_breakpad_from_pdb&lt;/code&gt; (&lt;code&gt;P2B_&lt;/code&gt;): Our implementation, using the codebase&#39;s RDI technology, for extracting information from PDBs and generating Breakpad text dumps.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_dump&lt;/code&gt; (no namespace): A dumper utility program for dumping textualizations of RDI debug info files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_format&lt;/code&gt; (no namespace): A layer which includes the &lt;code&gt;lib_rdi_format&lt;/code&gt; layer and bundles it with codebase-specific helpers, to easily include the library in codebase programs, and have it be integrated with codebase constructs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_from_dwarf&lt;/code&gt; (&lt;code&gt;D2R_&lt;/code&gt;): Our in-progress implementation of DWARF-to-RDI conversion.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_from_pdb&lt;/code&gt; (&lt;code&gt;P2R_&lt;/code&gt;): Our implementation of PDB-to-RDI conversion.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdi_make&lt;/code&gt; (no namespace): A layer which includes the &lt;code&gt;lib_rdi_make&lt;/code&gt; layer and bundles it with codebase-specific helpers, to easily include the library in codebase programs, and have it be integrated with codebase constructs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;regs&lt;/code&gt; (&lt;code&gt;REGS_&lt;/code&gt;): Types, helper functions, and metadata for registers on supported architectures. Used in reading/writing registers in &lt;code&gt;demon&lt;/code&gt;, or in looking up register metadata.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;render&lt;/code&gt; (&lt;code&gt;R_&lt;/code&gt;): An abstraction layer providing an abstract API for rendering using various GPU APIs under a common interface. Does not implement a high level drawing API - this layer is strictly for minimally abstracting on an as-needed basis. Higher level drawing features are implemented in the &lt;code&gt;draw&lt;/code&gt; layer.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scratch&lt;/code&gt; (no namespace): Scratch space for small and transient test programs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;texture_cache&lt;/code&gt; (&lt;code&gt;TEX_&lt;/code&gt;): Implements an asynchronously-filled cache for GPU texture data, filled by data sourced in the &lt;code&gt;hash_store&lt;/code&gt; layer&#39;s cache. Used for asynchronously preparing data for visualization.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;text_cache&lt;/code&gt; (&lt;code&gt;TXT_&lt;/code&gt;): Implements an asynchronously-filled cache for textual analysis data (tokens, line ranges, and so on), filled by data sourced in the &lt;code&gt;hash_store&lt;/code&gt; layer&#39;s cache. Used for asynchronously preparing data for visualization (like for the source code viewer).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;third_party&lt;/code&gt; (no namespace): External code from other projects, which some layers in the codebase depend on. All external code is included and built directly within the codebase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ui&lt;/code&gt; (&lt;code&gt;UI_&lt;/code&gt;): Machinery for building graphical user interfaces. Provides a core immediate mode hierarchical user interface data structure building API, and has helper layers for building some higher-level widgets.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
