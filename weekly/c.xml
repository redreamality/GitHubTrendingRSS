<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="data:text/xsl;base64,"?>
<rss version="2.0">
  <channel>
    <title>GitHub C Weekly Trending</title>
    <description>Weekly Trending of C in GitHub</description>
    <pubDate>Sat, 29 Mar 2025 02:31:31 GMT</pubDate>
    <link>http://redreamality.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>tsl0922/ttyd</title>
      <link>https://github.com/tsl0922/ttyd</link>
      <description>&lt;p&gt;Share your terminal over the web&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/tsl0922/ttyd/workflows/backend/badge.svg?sanitize=true&quot; alt=&quot;backend&quot;&gt; &lt;img src=&quot;https://github.com/tsl0922/ttyd/workflows/frontend/badge.svg?sanitize=true&quot; alt=&quot;frontend&quot;&gt; &lt;a href=&quot;https://github.com/tsl0922/ttyd/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/tsl0922/ttyd/total&quot; alt=&quot;GitHub Releases&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/tsl0922/ttyd&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/tsl0922/ttyd&quot; alt=&quot;Docker Pulls&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://repology.org/project/ttyd/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/tiny-repos/ttyd.svg?sanitize=true&quot; alt=&quot;Packaging status&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/license/tsl0922/ttyd&quot; alt=&quot;GitHub&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;ttyd - Share your terminal over the web&lt;/h1&gt; 
&lt;p&gt;ttyd is a simple command-line tool for sharing terminal over the web.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/tsl0922/ttyd/raw/main/screenshot.gif&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built on top of &lt;a href=&quot;https://libuv.org&quot;&gt;libuv&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API&quot;&gt;WebGL2&lt;/a&gt; for speed&lt;/li&gt; 
 &lt;li&gt;Fully-featured terminal with &lt;a href=&quot;https://en.wikipedia.org/wiki/CJK_characters&quot;&gt;CJK&lt;/a&gt; and IME support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ZMODEM&quot;&gt;ZMODEM&lt;/a&gt; (&lt;a href=&quot;https://ohse.de/uwe/software/lrzsz.html&quot;&gt;lrzsz&lt;/a&gt;) / &lt;a href=&quot;https://trzsz.github.io&quot;&gt;trzsz&lt;/a&gt; file transfer support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sixel&quot;&gt;Sixel&lt;/a&gt; image output support (&lt;a href=&quot;https://saitoha.github.io/libsixel&quot;&gt;img2sixel&lt;/a&gt; / &lt;a href=&quot;https://github.com/hackerb9/lsix&quot;&gt;lsix&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;SSL support based on &lt;a href=&quot;https://www.openssl.org&quot;&gt;OpenSSL&lt;/a&gt; / &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls&quot;&gt;Mbed TLS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Run any custom command with options&lt;/li&gt; 
 &lt;li&gt;Basic authentication support and many other custom options&lt;/li&gt; 
 &lt;li&gt;Cross platform: macOS, Linux, FreeBSD/OpenBSD, &lt;a href=&quot;https://openwrt.org&quot;&gt;OpenWrt&lt;/a&gt;, Windows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;❤ Special thanks to &lt;a href=&quot;https://www.jetbrains.com/?from=ttyd&quot;&gt;JetBrains&lt;/a&gt; for sponsoring the opensource license to this project.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Install on macOS&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;: &lt;code&gt;brew install ttyd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://www.macports.org&quot;&gt;MacPorts&lt;/a&gt;: &lt;code&gt;sudo port install ttyd&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install on Linux&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Binary version (recommended): download from the &lt;a href=&quot;https://github.com/tsl0922/ttyd/releases&quot;&gt;releases&lt;/a&gt; page&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://docs.brew.sh/Homebrew-on-Linux&quot;&gt;Homebrew&lt;/a&gt; : &lt;code&gt;brew install ttyd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install the snap: &lt;code&gt;sudo snap install ttyd --classic&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build from source (debian/ubuntu): &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt-get update
sudo apt-get install -y build-essential cmake git libjson-c-dev libwebsockets-dev
git clone https://github.com/tsl0922/ttyd.git
cd ttyd &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build
cmake ..
make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt; You may also need to compile/install &lt;a href=&quot;https://libwebsockets.org&quot;&gt;libwebsockets&lt;/a&gt; from source if the &lt;code&gt;libwebsockets-dev&lt;/code&gt; package is outdated.&lt;/li&gt; 
 &lt;li&gt;Install on OpenWrt: &lt;code&gt;opkg install ttyd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install on Gentoo: clone the &lt;a href=&quot;https://bitbucket.org/mgpagano/ttyd/src/master&quot;&gt;repo&lt;/a&gt; and follow the directions &lt;a href=&quot;https://wiki.gentoo.org/wiki/Custom_repository#Creating_a_local_repository&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install on Windows&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Binary version (recommended): download from the &lt;a href=&quot;https://github.com/tsl0922/ttyd/releases&quot;&gt;releases&lt;/a&gt; page&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://github.com/microsoft/winget-cli&quot;&gt;WinGet&lt;/a&gt;: &lt;code&gt;winget install tsl0922.ttyd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://scoop.sh/#/apps?q=ttyd&amp;amp;s=2&amp;amp;d=1&amp;amp;o=true&quot;&gt;Scoop&lt;/a&gt;: &lt;code&gt;scoop install ttyd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tsl0922/ttyd/wiki/Compile-on-Windows&quot;&gt;Compile on Windows&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;h2&gt;Command-line Options&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;USAGE:
    ttyd [options] &amp;lt;command&amp;gt; [&amp;lt;arguments...&amp;gt;]

OPTIONS:
    -p, --port              Port to listen (default: 7681, use `0` for random port)
    -i, --interface         Network interface to bind (eg: eth0), or UNIX domain socket path (eg: /var/run/ttyd.sock)
    -U, --socket-owner      User owner of the UNIX domain socket file, when enabled (eg: user:group)
    -c, --credential        Credential for basic authentication (format: username:password)
    -H, --auth-header       HTTP Header name for auth proxy, this will configure ttyd to let a HTTP reverse proxy handle authentication
    -u, --uid               User id to run with
    -g, --gid               Group id to run with
    -s, --signal            Signal to send to the command when exit it (default: 1, SIGHUP)
    -w, --cwd               Working directory to be set for the child program
    -a, --url-arg           Allow client to send command line arguments in URL (eg: http://localhost:7681?arg=foo&amp;amp;arg=bar)
    -W, --writable          Allow clients to write to the TTY (readonly by default)
    -t, --client-option     Send option to client (format: key=value), repeat to add more options
    -T, --terminal-type     Terminal type to report, default: xterm-256color
    -O, --check-origin      Do not allow websocket connection from different origin
    -m, --max-clients       Maximum clients to support (default: 0, no limit)
    -o, --once              Accept only one client and exit on disconnection
    -q, --exit-no-conn      Exit on all clients disconnection
    -B, --browser           Open terminal with the default system browser
    -I, --index             Custom index.html path
    -b, --base-path         Expected base path for requests coming from a reverse proxy (eg: /mounted/here, max length: 128)
    -P, --ping-interval     Websocket ping interval(sec) (default: 5)
    -6, --ipv6              Enable IPv6 support
    -S, --ssl               Enable SSL
    -C, --ssl-cert          SSL certificate file path
    -K, --ssl-key           SSL key file path
    -A, --ssl-ca            SSL CA file path for client certificate verification
    -d, --debug             Set log level (default: 7)
    -v, --version           Print the version and exit
    -h, --help              Print this text and exit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read the example usage on the &lt;a href=&quot;https://github.com/tsl0922/ttyd/wiki/Example-Usage&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Browser Support&lt;/h2&gt; 
&lt;p&gt;Modern browsers, See &lt;a href=&quot;https://github.com/xtermjs/xterm.js#browser-support&quot;&gt;Browser Support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/krishnasrinivas/wetty&quot;&gt;Wetty&lt;/a&gt;: &lt;a href=&quot;https://nodejs.org&quot;&gt;Node&lt;/a&gt; based web terminal (SSH/login)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yudai/gotty&quot;&gt;GoTTY&lt;/a&gt;: &lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt; based web terminal&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pgvector/pgvector</title>
      <link>https://github.com/pgvector/pgvector</link>
      <description>&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgvector&lt;/h1&gt; 
&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt; 
&lt;p&gt;Store your vectors with the rest of your data. Supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;exact and approximate nearest neighbor search&lt;/li&gt; 
 &lt;li&gt;single-precision, half-precision, binary, and sparse vectors&lt;/li&gt; 
 &lt;li&gt;L2 distance, inner product, cosine distance, L1 distance, Hamming distance, and Jaccard distance&lt;/li&gt; 
 &lt;li&gt;any &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#languages&quot;&gt;language&lt;/a&gt; with a Postgres client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Plus &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt; compliance, point-in-time recovery, JOINs, and all of the other &lt;a href=&quot;https://www.postgresql.org/about/&quot;&gt;great features&lt;/a&gt; of Postgres&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector/actions&quot;&gt;&lt;img src=&quot;https://github.com/pgvector/pgvector/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Linux and Mac&lt;/h3&gt; 
&lt;p&gt;Compile and install the extension (supports Postgres 13+)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /tmp
git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
make
make install # may need sudo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation-notes---linux-and-mac&quot;&gt;installation notes&lt;/a&gt; if you run into issues&lt;/p&gt; 
&lt;p&gt;You can also install it with &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#docker&quot;&gt;Docker&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#homebrew&quot;&gt;Homebrew&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#pgxn&quot;&gt;PGXN&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#apt&quot;&gt;APT&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#yum&quot;&gt;Yum&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#pkg&quot;&gt;pkg&lt;/a&gt;, or &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#conda-forge&quot;&gt;conda-forge&lt;/a&gt;, and it comes preinstalled with &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#postgresapp&quot;&gt;Postgres.app&lt;/a&gt; and many &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#hosted-postgres&quot;&gt;hosted providers&lt;/a&gt;. There are also instructions for &lt;a href=&quot;https://github.com/pgvector/setup-pgvector&quot;&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Ensure &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#download-and-install-the-tools&quot;&gt;C++ support in Visual Studio&lt;/a&gt; is installed, and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;call &quot;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: The exact path will vary depending on your Visual Studio version and edition&lt;/p&gt; 
&lt;p&gt;Then use &lt;code&gt;nmake&lt;/code&gt; to build:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;set &quot;PGROOT=C:\Program Files\PostgreSQL\16&quot;
cd %TEMP%
git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
nmake /F Makefile.win
nmake /F Makefile.win install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation-notes---windows&quot;&gt;installation notes&lt;/a&gt; if you run into issues&lt;/p&gt; 
&lt;p&gt;You can also install it with &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#docker&quot;&gt;Docker&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#conda-forge&quot;&gt;conda-forge&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Enable the extension (do this once in each database where you want to use it)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsql&quot;&gt;CREATE EXTENSION vector;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a vector column with 3 dimensions&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Insert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also supports inner product (&lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt;), cosine distance (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;), and L1 distance (&lt;code&gt;&amp;lt;+&amp;gt;&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;Note: &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product since Postgres only supports &lt;code&gt;ASC&lt;/code&gt; order index scans on operators&lt;/p&gt; 
&lt;h2&gt;Storing&lt;/h2&gt; 
&lt;p&gt;Create a new table with a vector column&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add a vector column to an existing table&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER TABLE items ADD COLUMN embedding vector(3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also supports &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#half-precision-vectors&quot;&gt;half-precision&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#binary-vectors&quot;&gt;binary&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#sparse-vectors&quot;&gt;sparse&lt;/a&gt; vectors&lt;/p&gt; 
&lt;p&gt;Insert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or load vectors in bulk using &lt;code&gt;COPY&lt;/code&gt; (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/loading/example.py&quot;&gt;example&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;COPY items (embedding) FROM STDIN WITH (FORMAT BINARY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Upsert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (id, embedding) VALUES (1, &#39;[1,2,3]&#39;), (2, &#39;[4,5,6]&#39;)
    ON CONFLICT (id) DO UPDATE SET embedding = EXCLUDED.embedding;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Update vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE items SET embedding = &#39;[1,2,3]&#39; WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Delete vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;DELETE FROM items WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Querying&lt;/h2&gt; 
&lt;p&gt;Get the nearest neighbors to a vector&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Supported distance functions are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; - L2 distance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; - (negative) inner product&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; - cosine distance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;+&amp;gt;&lt;/code&gt; - L1 distance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt; - Hamming distance (binary vectors)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;%&amp;gt;&lt;/code&gt; - Jaccard distance (binary vectors)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get the nearest neighbors to a row&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items WHERE id != 1 ORDER BY embedding &amp;lt;-&amp;gt; (SELECT embedding FROM items WHERE id = 1) LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get rows within a certain distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items WHERE embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; &amp;lt; 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Combine with &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; to use an index&lt;/p&gt; 
&lt;h4&gt;Distances&lt;/h4&gt; 
&lt;p&gt;Get the distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; AS distance FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For inner product, multiply by -1 (since &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsql&quot;&gt;SELECT (embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39;) * -1 AS inner_product FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For cosine similarity, use 1 - cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT 1 - (embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39;) AS cosine_similarity FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Aggregates&lt;/h4&gt; 
&lt;p&gt;Average vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT AVG(embedding) FROM items;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Average groups of vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT category_id, AVG(embedding) FROM items GROUP BY category_id;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Indexing&lt;/h2&gt; 
&lt;p&gt;By default, pgvector performs exact nearest neighbor search, which provides perfect recall.&lt;/p&gt; 
&lt;p&gt;You can add an index to use approximate nearest neighbor search, which trades some recall for speed. Unlike typical indexes, you will see different results for queries after adding an approximate index.&lt;/p&gt; 
&lt;p&gt;Supported index types are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#hnsw&quot;&gt;HNSW&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#ivfflat&quot;&gt;IVFFlat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;HNSW&lt;/h2&gt; 
&lt;p&gt;An HNSW index creates a multilayer graph. It has better query performance than IVFFlat (in terms of speed-recall tradeoff), but has slower build times and uses more memory. Also, an index can be created without any data in the table since there isn’t a training step like IVFFlat.&lt;/p&gt; 
&lt;p&gt;Add an index for each distance function you want to use.&lt;/p&gt; 
&lt;p&gt;L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Use &lt;code&gt;halfvec_l2_ops&lt;/code&gt; for &lt;code&gt;halfvec&lt;/code&gt; and &lt;code&gt;sparsevec_l2_ops&lt;/code&gt; for &lt;code&gt;sparsevec&lt;/code&gt; (and similar with the other distance functions)&lt;/p&gt; 
&lt;p&gt;Inner product&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_ip_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_cosine_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;L1 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l1_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding bit_hamming_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Jaccard distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding bit_jaccard_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Supported types are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; - up to 2,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;halfvec&lt;/code&gt; - up to 4,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bit&lt;/code&gt; - up to 64,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sparsevec&lt;/code&gt; - up to 1,000 non-zero elements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Index Options&lt;/h3&gt; 
&lt;p&gt;Specify HNSW parameters&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;m&lt;/code&gt; - the max number of connections per layer (16 by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ef_construction&lt;/code&gt; - the size of the dynamic candidate list for constructing the graph (64 by default)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WITH (m = 16, ef_construction = 64);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A higher value of &lt;code&gt;ef_construction&lt;/code&gt; provides better recall at the cost of index build time / insert speed.&lt;/p&gt; 
&lt;h3&gt;Query Options&lt;/h3&gt; 
&lt;p&gt;Specify the size of the dynamic candidate list for search (40 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.ef_search = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A higher value provides better recall at the cost of speed.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;SET LOCAL&lt;/code&gt; inside a transaction to set it for a single query&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL hnsw.ef_search = 100;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Index Build Time&lt;/h3&gt; 
&lt;p&gt;Indexes build significantly faster when the graph fits into &lt;code&gt;maintenance_work_mem&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET maintenance_work_mem = &#39;8GB&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A notice is shown when the graph no longer fits&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;NOTICE:  hnsw graph no longer fits into maintenance_work_mem after 100000 tuples
DETAIL:  Building will take significantly more time.
HINT:  Increase maintenance_work_mem to speed up builds.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Do not set &lt;code&gt;maintenance_work_mem&lt;/code&gt; so high that it exhausts the memory on the server&lt;/p&gt; 
&lt;p&gt;Like other index types, it’s faster to create an index after loading your initial data&lt;/p&gt; 
&lt;p&gt;You can also speed up index creation by increasing the number of parallel workers (2 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET max_parallel_maintenance_workers = 7; -- plus leader
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a large number of workers, you may need to increase &lt;code&gt;max_parallel_workers&lt;/code&gt; (8 by default)&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#index-options&quot;&gt;index options&lt;/a&gt; also have a significant impact on build time (use the defaults unless seeing low recall)&lt;/p&gt; 
&lt;h3&gt;Indexing Progress&lt;/h3&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://www.postgresql.org/docs/current/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING&quot;&gt;indexing progress&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT phase, round(100.0 * blocks_done / nullif(blocks_total, 0), 1) AS &quot;%&quot; FROM pg_stat_progress_create_index;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The phases for HNSW are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;initializing&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;loading tuples&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;IVFFlat&lt;/h2&gt; 
&lt;p&gt;An IVFFlat index divides vectors into lists, and then searches a subset of those lists that are closest to the query vector. It has faster build times and uses less memory than HNSW, but has lower query performance (in terms of speed-recall tradeoff).&lt;/p&gt; 
&lt;p&gt;Three keys to achieving good recall are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create the index &lt;em&gt;after&lt;/em&gt; the table has some data&lt;/li&gt; 
 &lt;li&gt;Choose an appropriate number of lists - a good place to start is &lt;code&gt;rows / 1000&lt;/code&gt; for up to 1M rows and &lt;code&gt;sqrt(rows)&lt;/code&gt; for over 1M rows&lt;/li&gt; 
 &lt;li&gt;When querying, specify an appropriate number of &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#query-options&quot;&gt;probes&lt;/a&gt; (higher is better for recall, lower is better for speed) - a good place to start is &lt;code&gt;sqrt(lists)&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Add an index for each distance function you want to use.&lt;/p&gt; 
&lt;p&gt;L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Use &lt;code&gt;halfvec_l2_ops&lt;/code&gt; for &lt;code&gt;halfvec&lt;/code&gt; (and similar with the other distance functions)&lt;/p&gt; 
&lt;p&gt;Inner product&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_ip_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding bit_hamming_ops) WITH (lists = 100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Supported types are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; - up to 2,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;halfvec&lt;/code&gt; - up to 4,000 dimensions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bit&lt;/code&gt; - up to 64,000 dimensions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Query Options&lt;/h3&gt; 
&lt;p&gt;Specify the number of probes (1 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET ivfflat.probes = 10;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A higher value provides better recall at the cost of speed, and it can be set to the number of lists for exact nearest neighbor search (at which point the planner won’t use the index)&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;SET LOCAL&lt;/code&gt; inside a transaction to set it for a single query&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL ivfflat.probes = 10;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Index Build Time&lt;/h3&gt; 
&lt;p&gt;Speed up index creation on large tables by increasing the number of parallel workers (2 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET max_parallel_maintenance_workers = 7; -- plus leader
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a large number of workers, you may also need to increase &lt;code&gt;max_parallel_workers&lt;/code&gt; (8 by default)&lt;/p&gt; 
&lt;h3&gt;Indexing Progress&lt;/h3&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://www.postgresql.org/docs/current/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING&quot;&gt;indexing progress&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT phase, round(100.0 * tuples_done / nullif(tuples_total, 0), 1) AS &quot;%&quot; FROM pg_stat_progress_create_index;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The phases for IVFFlat are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;initializing&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;performing k-means&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;assigning tuples&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;loading tuples&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note: &lt;code&gt;%&lt;/code&gt; is only populated during the &lt;code&gt;loading tuples&lt;/code&gt; phase&lt;/p&gt; 
&lt;h2&gt;Filtering&lt;/h2&gt; 
&lt;p&gt;There are a few ways to index nearest neighbor queries with a &lt;code&gt;WHERE&lt;/code&gt; clause.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items WHERE category_id = 123 ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A good place to start is creating an index on the filter column. This can provide fast, exact nearest neighbor search in many cases. Postgres has a number of &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-types.html&quot;&gt;index types&lt;/a&gt; for this: B-tree (default), hash, GiST, SP-GiST, GIN, and BRIN.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items (category_id);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For multiple columns, consider a &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-multicolumn.html&quot;&gt;multicolumn index&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items (location_id, category_id);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Exact indexes work well for conditions that match a low percentage of rows. Otherwise, &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#indexing&quot;&gt;approximate indexes&lt;/a&gt; can work better.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With approximate indexes, filtering is applied &lt;em&gt;after&lt;/em&gt; the index is scanned. If a condition matches 10% of rows, with HNSW and the default &lt;code&gt;hnsw.ef_search&lt;/code&gt; of 40, only 4 rows will match on average. For more rows, increase &lt;code&gt;hnsw.ef_search&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.ef_search = 200;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Starting with 0.8.0, you can enable &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#iterative-index-scans&quot;&gt;iterative index scans&lt;/a&gt;, which will automatically scan more of the index when needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.iterative_scan = strict_order;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If filtering by only a few distinct values, consider &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-partial.html&quot;&gt;partial indexing&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WHERE (category_id = 123);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If filtering by many different values, consider &lt;a href=&quot;https://www.postgresql.org/docs/current/ddl-partitioning.html&quot;&gt;partitioning&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (embedding vector(3), category_id int) PARTITION BY LIST(category_id);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Iterative Index Scans&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Added in 0.8.0&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;With approximate indexes, queries with filtering can return less results since filtering is applied &lt;em&gt;after&lt;/em&gt; the index is scanned. Starting with 0.8.0, you can enable iterative index scans, which will automatically scan more of the index until enough results are found (or it reaches &lt;code&gt;hnsw.max_scan_tuples&lt;/code&gt; or &lt;code&gt;ivfflat.max_probes&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Iterative scans can use strict or relaxed ordering.&lt;/p&gt; 
&lt;p&gt;Strict ensures results are in the exact order by distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.iterative_scan = strict_order;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Relaxed allows results to be slightly out of order by distance, but provides better recall&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.iterative_scan = relaxed_order;
# or
SET ivfflat.iterative_scan = relaxed_order;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With relaxed ordering, you can use a &lt;a href=&quot;https://www.postgresql.org/docs/current/queries-with.html#QUERIES-WITH-CTE-MATERIALIZATION&quot;&gt;materialized CTE&lt;/a&gt; to get strict ordering&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;WITH relaxed_results AS MATERIALIZED (
    SELECT id, embedding &amp;lt;-&amp;gt; &#39;[1,2,3]&#39; AS distance FROM items WHERE category_id = 123 ORDER BY distance LIMIT 5
) SELECT * FROM relaxed_results ORDER BY distance;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For queries that filter by distance, use a materialized CTE and place the distance filter outside of it for best performance (due to the &lt;a href=&quot;https://www.postgresql.org/message-id/flat/CAOdR5yGUoMQ6j7M5hNUXrySzaqZVGf_Ne%2B8fwZMRKTFxU1nbJg%40mail.gmail.com&quot;&gt;current behavior&lt;/a&gt; of the Postgres executor)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;WITH nearest_results AS MATERIALIZED (
    SELECT id, embedding &amp;lt;-&amp;gt; &#39;[1,2,3]&#39; AS distance FROM items ORDER BY distance LIMIT 5
) SELECT * FROM nearest_results WHERE distance &amp;lt; 5 ORDER BY distance;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Place any other filters inside the CTE&lt;/p&gt; 
&lt;h3&gt;Iterative Scan Options&lt;/h3&gt; 
&lt;p&gt;Since scanning a large portion of an approximate index is expensive, there are options to control when a scan ends.&lt;/p&gt; 
&lt;h4&gt;HNSW&lt;/h4&gt; 
&lt;p&gt;Specify the max number of tuples to visit (20,000 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.max_scan_tuples = 20000;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: This is approximate and does not affect the initial scan&lt;/p&gt; 
&lt;p&gt;Specify the max amount of memory to use, as a multiple of &lt;code&gt;work_mem&lt;/code&gt; (1 by default)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET hnsw.scan_mem_multiplier = 2;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Try increasing this if increasing &lt;code&gt;hnsw.max_scan_tuples&lt;/code&gt; does not improve recall&lt;/p&gt; 
&lt;h4&gt;IVFFlat&lt;/h4&gt; 
&lt;p&gt;Specify the max number of probes&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET ivfflat.max_probes = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: If this is lower than &lt;code&gt;ivfflat.probes&lt;/code&gt;, &lt;code&gt;ivfflat.probes&lt;/code&gt; will be used&lt;/p&gt; 
&lt;h2&gt;Half-Precision Vectors&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;halfvec&lt;/code&gt; type to store half-precision vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding halfvec(3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Half-Precision Indexing&lt;/h2&gt; 
&lt;p&gt;Index vectors at half precision for smaller indexes&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((embedding::halfvec(3)) halfvec_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding::halfvec(3) &amp;lt;-&amp;gt; &#39;[1,2,3]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Binary Vectors&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;bit&lt;/code&gt; type to store binary vectors (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/imagehash/example.py&quot;&gt;example&lt;/a&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding bit(3));
INSERT INTO items (embedding) VALUES (&#39;000&#39;), (&#39;111&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;~&amp;gt; &#39;101&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also supports Jaccard distance (&lt;code&gt;&amp;lt;%&amp;gt;&lt;/code&gt;)&lt;/p&gt; 
&lt;h2&gt;Binary Quantization&lt;/h2&gt; 
&lt;p&gt;Use expression indexing for binary quantization&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((binary_quantize(embedding)::bit(3)) bit_hamming_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by Hamming distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) &amp;lt;~&amp;gt; binary_quantize(&#39;[1,-2,3]&#39;) LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Re-rank by the original vectors for better recall&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM (
    SELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) &amp;lt;~&amp;gt; binary_quantize(&#39;[1,-2,3]&#39;) LIMIT 20
) ORDER BY embedding &amp;lt;=&amp;gt; &#39;[1,-2,3]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sparse Vectors&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;sparsevec&lt;/code&gt; type to store sparse vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding sparsevec(5));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Insert vectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO items (embedding) VALUES (&#39;{1:1,3:2,5:3}/5&#39;), (&#39;{1:4,3:5,5:6}/5&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The format is &lt;code&gt;{index1:value1,index2:value2}/dimensions&lt;/code&gt; and indices start at 1 like SQL arrays&lt;/p&gt; 
&lt;p&gt;Get the nearest neighbors by L2 distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;{1:3,3:1,5:2}/5&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Hybrid Search&lt;/h2&gt; 
&lt;p&gt;Use together with Postgres &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-intro.html&quot;&gt;full-text search&lt;/a&gt; for hybrid search.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT id, content FROM items, plainto_tsquery(&#39;hello search&#39;) query
    WHERE textsearch @@ query ORDER BY ts_rank_cd(textsearch, query) DESC LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use &lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/hybrid_search/rrf.py&quot;&gt;Reciprocal Rank Fusion&lt;/a&gt; or a &lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/hybrid_search/cross_encoder.py&quot;&gt;cross-encoder&lt;/a&gt; to combine results.&lt;/p&gt; 
&lt;h2&gt;Indexing Subvectors&lt;/h2&gt; 
&lt;p&gt;Use expression indexing to index subvectors&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((subvector(embedding, 1, 3)::vector(3)) vector_cosine_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the nearest neighbors by cosine distance&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) &amp;lt;=&amp;gt; subvector(&#39;[1,2,3,4,5]&#39;::vector, 1, 3) LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Re-rank by the full vectors for better recall&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM (
    SELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) &amp;lt;=&amp;gt; subvector(&#39;[1,2,3,4,5]&#39;::vector, 1, 3) LIMIT 20
) ORDER BY embedding &amp;lt;=&amp;gt; &#39;[1,2,3,4,5]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;h3&gt;Tuning&lt;/h3&gt; 
&lt;p&gt;Use a tool like &lt;a href=&quot;https://pgtune.leopard.in.ua/&quot;&gt;PgTune&lt;/a&gt; to set initial values for Postgres server parameters. For instance, &lt;code&gt;shared_buffers&lt;/code&gt; should typically be 25% of the server’s memory. You can find the config file with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SHOW config_file;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And check individual settings with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SHOW shared_buffers;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be sure to restart Postgres for changes to take effect.&lt;/p&gt; 
&lt;h3&gt;Loading&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;COPY&lt;/code&gt; for bulk loading data (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/loading/example.py&quot;&gt;example&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;COPY items (embedding) FROM STDIN WITH (FORMAT BINARY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add any indexes &lt;em&gt;after&lt;/em&gt; loading the initial data for best performance.&lt;/p&gt; 
&lt;h3&gt;Indexing&lt;/h3&gt; 
&lt;p&gt;See index build time for &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#index-build-time&quot;&gt;HNSW&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#index-build-time-1&quot;&gt;IVFFlat&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In production environments, create indexes concurrently to avoid blocking writes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX CONCURRENTLY ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Querying&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; to debug performance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;EXPLAIN ANALYZE SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Exact Search&lt;/h4&gt; 
&lt;p&gt;To speed up queries without an index, increase &lt;code&gt;max_parallel_workers_per_gather&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SET max_parallel_workers_per_gather = 4;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If vectors are normalized to length 1 (like &lt;a href=&quot;https://platform.openai.com/docs/guides/embeddings/which-distance-function-should-i-use&quot;&gt;OpenAI embeddings&lt;/a&gt;), use inner product for best performance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsql&quot;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Approximate Search&lt;/h4&gt; 
&lt;p&gt;To speed up queries with an IVFFlat index, increase the number of inverted lists (at the expense of recall).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 1000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vacuuming&lt;/h3&gt; 
&lt;p&gt;Vacuuming can take a while for HNSW indexes. Speed it up by reindexing first.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;REINDEX INDEX CONCURRENTLY index_name;
VACUUM table_name;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Monitoring&lt;/h2&gt; 
&lt;p&gt;Monitor performance with &lt;a href=&quot;https://www.postgresql.org/docs/current/pgstatstatements.html&quot;&gt;pg_stat_statements&lt;/a&gt; (be sure to add it to &lt;code&gt;shared_preload_libraries&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE EXTENSION pg_stat_statements;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the most time-consuming queries with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT query, calls, ROUND((total_plan_time + total_exec_time) / calls) AS avg_time_ms,
    ROUND((total_plan_time + total_exec_time) / 60000) AS total_time_min
    FROM pg_stat_statements ORDER BY total_plan_time + total_exec_time DESC LIMIT 20;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;total_plan_time + total_exec_time&lt;/code&gt; with &lt;code&gt;total_time&lt;/code&gt; for Postgres &amp;lt; 13&lt;/p&gt; 
&lt;p&gt;Monitor recall by comparing results from approximate search with exact search.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL enable_indexscan = off; -- use exact search
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Scaling&lt;/h2&gt; 
&lt;p&gt;Scale pgvector the same way you scale Postgres.&lt;/p&gt; 
&lt;p&gt;Scale vertically by increasing memory, CPU, and storage on a single instance. Use existing tools to &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#tuning&quot;&gt;tune parameters&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#monitoring&quot;&gt;monitor performance&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Scale horizontally with &lt;a href=&quot;https://www.postgresql.org/docs/current/hot-standby.html&quot;&gt;replicas&lt;/a&gt;, or use &lt;a href=&quot;https://github.com/citusdata/citus&quot;&gt;Citus&lt;/a&gt; or another approach for sharding (&lt;a href=&quot;https://github.com/pgvector/pgvector-python/raw/master/examples/citus/example.py&quot;&gt;example&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;Languages&lt;/h2&gt; 
&lt;p&gt;Use pgvector from any language with a Postgres client. You can even generate and store vectors in one language and query them in another.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Libraries / Examples&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-c&quot;&gt;pgvector-c&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C++&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-cpp&quot;&gt;pgvector-cpp&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;C#, F#, Visual Basic&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-dotnet&quot;&gt;pgvector-dotnet&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Crystal&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-crystal&quot;&gt;pgvector-crystal&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;D&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-d&quot;&gt;pgvector-d&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dart&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-dart&quot;&gt;pgvector-dart&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Elixir&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-elixir&quot;&gt;pgvector-elixir&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Erlang&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-erlang&quot;&gt;pgvector-erlang&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fortran&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-fortran&quot;&gt;pgvector-fortran&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gleam&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-gleam&quot;&gt;pgvector-gleam&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-go&quot;&gt;pgvector-go&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Haskell&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-haskell&quot;&gt;pgvector-haskell&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Java, Kotlin, Groovy, Scala&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-java&quot;&gt;pgvector-java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;JavaScript, TypeScript&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-node&quot;&gt;pgvector-node&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Julia&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-julia&quot;&gt;pgvector-julia&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Lisp&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-lisp&quot;&gt;pgvector-lisp&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Lua&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-lua&quot;&gt;pgvector-lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Nim&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-nim&quot;&gt;pgvector-nim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OCaml&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-ocaml&quot;&gt;pgvector-ocaml&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Perl&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-perl&quot;&gt;pgvector-perl&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PHP&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-php&quot;&gt;pgvector-php&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Python&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-python&quot;&gt;pgvector-python&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;R&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-r&quot;&gt;pgvector-r&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Raku&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-raku&quot;&gt;pgvector-raku&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ruby&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-ruby&quot;&gt;pgvector-ruby&lt;/a&gt;, &lt;a href=&quot;https://github.com/ankane/neighbor&quot;&gt;Neighbor&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-rust&quot;&gt;pgvector-rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Swift&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-swift&quot;&gt;pgvector-swift&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zig&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector-zig&quot;&gt;pgvector-zig&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h4&gt;How many vectors can be stored in a single table?&lt;/h4&gt; 
&lt;p&gt;A non-partitioned table has a limit of 32 TB by default in Postgres. A partitioned table can have thousands of partitions of that size.&lt;/p&gt; 
&lt;h4&gt;Is replication supported?&lt;/h4&gt; 
&lt;p&gt;Yes, pgvector uses the write-ahead log (WAL), which allows for replication and point-in-time recovery.&lt;/p&gt; 
&lt;h4&gt;What if I want to index vectors with more than 2,000 dimensions?&lt;/h4&gt; 
&lt;p&gt;You can use &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#half-precision-indexing&quot;&gt;half-precision indexing&lt;/a&gt; to index up to 4,000 dimensions or &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#binary-quantization&quot;&gt;binary quantization&lt;/a&gt; to index up to 64,000 dimensions. Another option is &lt;a href=&quot;https://en.wikipedia.org/wiki/Dimensionality_reduction&quot;&gt;dimensionality reduction&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Can I store vectors with different dimensions in the same column?&lt;/h4&gt; 
&lt;p&gt;You can use &lt;code&gt;vector&lt;/code&gt; as the type (instead of &lt;code&gt;vector(3)&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE embeddings (model_id bigint, item_id bigint, embedding vector, PRIMARY KEY (model_id, item_id));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, you can only create indexes on rows with the same number of dimensions (using &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-expressional.html&quot;&gt;expression&lt;/a&gt; and &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-partial.html&quot;&gt;partial&lt;/a&gt; indexing):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON embeddings USING hnsw ((embedding::vector(3)) vector_l2_ops) WHERE (model_id = 123);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM embeddings WHERE model_id = 123 ORDER BY embedding::vector(3) &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Can I store vectors with more precision?&lt;/h4&gt; 
&lt;p&gt;You can use the &lt;code&gt;double precision[]&lt;/code&gt; or &lt;code&gt;numeric[]&lt;/code&gt; type to store vectors with more precision.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding double precision[]);

-- use {} instead of [] for Postgres arrays
INSERT INTO items (embedding) VALUES (&#39;{1,2,3}&#39;), (&#39;{4,5,6}&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally, add a &lt;a href=&quot;https://www.postgresql.org/docs/current/ddl-constraints.html&quot;&gt;check constraint&lt;/a&gt; to ensure data can be converted to the &lt;code&gt;vector&lt;/code&gt; type and has the expected dimensions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER TABLE items ADD CHECK (vector_dims(embedding::vector) = 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-expressional.html&quot;&gt;expression indexing&lt;/a&gt; to index (at a lower precision):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE INDEX ON items USING hnsw ((embedding::vector(3)) vector_l2_ops);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM items ORDER BY embedding::vector(3) &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Do indexes need to fit into memory?&lt;/h4&gt; 
&lt;p&gt;No, but like other index types, you’ll likely see better performance if they do. You can get the size of an index with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT pg_size_pretty(pg_relation_size(&#39;index_name&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;h4&gt;Why isn’t a query using an index?&lt;/h4&gt; 
&lt;p&gt;The query needs to have an &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt;, and the &lt;code&gt;ORDER BY&lt;/code&gt; must be the result of a distance operator (not an expression) in ascending order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;-- index
ORDER BY embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;

-- no index
ORDER BY 1 - (embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39;) DESC LIMIT 5;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can encourage the planner to use an index for a query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL enable_seqscan = off;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, if the table is small, a table scan may be faster.&lt;/p&gt; 
&lt;h4&gt;Why isn’t a query using a parallel table scan?&lt;/h4&gt; 
&lt;p&gt;The planner doesn’t consider &lt;a href=&quot;https://www.postgresql.org/docs/current/storage-toast.html&quot;&gt;out-of-line storage&lt;/a&gt; in cost estimates, which can make a serial scan look cheaper. You can reduce the cost of a parallel scan for a query with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;BEGIN;
SET LOCAL min_parallel_table_scan_size = 1;
SET LOCAL parallel_setup_cost = 1;
SELECT ...
COMMIT;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or choose to store vectors inline:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER TABLE items ALTER COLUMN embedding SET STORAGE PLAIN;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Why are there less results for a query after adding an HNSW index?&lt;/h4&gt; 
&lt;p&gt;Results are limited by the size of the dynamic candidate list (&lt;code&gt;hnsw.ef_search&lt;/code&gt;), which is 40 by default. There may be even less results due to dead tuples or filtering conditions in the query. Enabling &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#iterative-index-scans&quot;&gt;iterative index scans&lt;/a&gt; can help address this.&lt;/p&gt; 
&lt;p&gt;Also, note that &lt;code&gt;NULL&lt;/code&gt; vectors are not indexed (as well as zero vectors for cosine distance).&lt;/p&gt; 
&lt;h4&gt;Why are there less results for a query after adding an IVFFlat index?&lt;/h4&gt; 
&lt;p&gt;The index was likely created with too little data for the number of lists. Drop the index until the table has more data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;DROP INDEX index_name;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Results can also be limited by the number of probes (&lt;code&gt;ivfflat.probes&lt;/code&gt;). Enabling &lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#iterative-index-scans&quot;&gt;iterative index scans&lt;/a&gt; can address this.&lt;/p&gt; 
&lt;p&gt;Also, note that &lt;code&gt;NULL&lt;/code&gt; vectors are not indexed (as well as zero vectors for cosine distance).&lt;/p&gt; 
&lt;h2&gt;Reference&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#vector-type&quot;&gt;Vector&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#halfvec-type&quot;&gt;Halfvec&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#bit-type&quot;&gt;Bit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#sparsevec-type&quot;&gt;Sparsevec&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vector Type&lt;/h3&gt; 
&lt;p&gt;Each vector takes &lt;code&gt;4 * dimensions + 8&lt;/code&gt; bytes of storage. Each element is a single-precision floating-point number (like the &lt;code&gt;real&lt;/code&gt; type in Postgres), and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Vectors can have up to 16,000 dimensions.&lt;/p&gt; 
&lt;h3&gt;Vector Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;element-wise addition&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;element-wise subtraction&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;*&lt;/td&gt; 
   &lt;td&gt;element-wise multiplication&lt;/td&gt; 
   &lt;td&gt;0.5.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;||&lt;/td&gt; 
   &lt;td&gt;concatenate&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; 
   &lt;td&gt;negative inner product&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Vector Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;binary_quantize(vector) → bit&lt;/td&gt; 
   &lt;td&gt;binary quantize&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cosine_distance(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;inner_product(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;inner product&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l1_distance(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.5.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_distance(vector, vector) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_normalize(vector) → vector&lt;/td&gt; 
   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;subvector(vector, integer, integer) → vector&lt;/td&gt; 
   &lt;td&gt;subvector&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vector_dims(vector) → integer&lt;/td&gt; 
   &lt;td&gt;number of dimensions&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vector_norm(vector) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean norm&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Vector Aggregate Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;avg(vector) → vector&lt;/td&gt; 
   &lt;td&gt;average&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sum(vector) → vector&lt;/td&gt; 
   &lt;td&gt;sum&lt;/td&gt; 
   &lt;td&gt;0.5.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Halfvec Type&lt;/h3&gt; 
&lt;p&gt;Each half vector takes &lt;code&gt;2 * dimensions + 8&lt;/code&gt; bytes of storage. Each element is a half-precision floating-point number, and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Half vectors can have up to 16,000 dimensions.&lt;/p&gt; 
&lt;h3&gt;Halfvec Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;element-wise addition&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;element-wise subtraction&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;*&lt;/td&gt; 
   &lt;td&gt;element-wise multiplication&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;||&lt;/td&gt; 
   &lt;td&gt;concatenate&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; 
   &lt;td&gt;negative inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Halfvec Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;binary_quantize(halfvec) → bit&lt;/td&gt; 
   &lt;td&gt;binary quantize&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cosine_distance(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;inner_product(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l1_distance(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_distance(halfvec, halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_norm(halfvec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_normalize(halfvec) → halfvec&lt;/td&gt; 
   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;subvector(halfvec, integer, integer) → halfvec&lt;/td&gt; 
   &lt;td&gt;subvector&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vector_dims(halfvec) → integer&lt;/td&gt; 
   &lt;td&gt;number of dimensions&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Halfvec Aggregate Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;avg(halfvec) → halfvec&lt;/td&gt; 
   &lt;td&gt;average&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sum(halfvec) → halfvec&lt;/td&gt; 
   &lt;td&gt;sum&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Bit Type&lt;/h3&gt; 
&lt;p&gt;Each bit vector takes &lt;code&gt;dimensions / 8 + 8&lt;/code&gt; bytes of storage. See the &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-bit.html&quot;&gt;Postgres docs&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;h3&gt;Bit Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;~&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Hamming distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;%&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Jaccard distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Bit Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;hamming_distance(bit, bit) → double precision&lt;/td&gt; 
   &lt;td&gt;Hamming distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;jaccard_distance(bit, bit) → double precision&lt;/td&gt; 
   &lt;td&gt;Jaccard distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Sparsevec Type&lt;/h3&gt; 
&lt;p&gt;Each sparse vector takes &lt;code&gt;8 * non-zero elements + 16&lt;/code&gt; bytes of storage. Each element is a single-precision floating-point number, and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Sparse vectors can have up to 16,000 non-zero elements.&lt;/p&gt; 
&lt;h3&gt;Sparsevec Operators&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; 
   &lt;td&gt;negative inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Sparsevec Functions&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cosine_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;cosine distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;inner_product(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;inner product&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l1_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;taxicab distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean distance&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_norm(sparsevec) → double precision&lt;/td&gt; 
   &lt;td&gt;Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;l2_normalize(sparsevec) → sparsevec&lt;/td&gt; 
   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; 
   &lt;td&gt;0.7.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installation Notes - Linux and Mac&lt;/h2&gt; 
&lt;h3&gt;Postgres Location&lt;/h3&gt; 
&lt;p&gt;If your machine has multiple Postgres installations, specify the path to &lt;a href=&quot;https://www.postgresql.org/docs/current/app-pgconfig.html&quot;&gt;pg_config&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export PG_CONFIG=/Library/PostgreSQL/17/bin/pg_config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then re-run the installation instructions (run &lt;code&gt;make clean&lt;/code&gt; before &lt;code&gt;make&lt;/code&gt; if needed). If &lt;code&gt;sudo&lt;/code&gt; is needed for &lt;code&gt;make install&lt;/code&gt;, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo --preserve-env=PG_CONFIG make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A few common paths on Mac are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;EDB installer - &lt;code&gt;/Library/PostgreSQL/17/bin/pg_config&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Homebrew (arm64) - &lt;code&gt;/opt/homebrew/opt/postgresql@17/bin/pg_config&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Homebrew (x86-64) - &lt;code&gt;/usr/local/opt/postgresql@17/bin/pg_config&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;Missing Header&lt;/h3&gt; 
&lt;p&gt;If compilation fails with &lt;code&gt;fatal error: postgres.h: No such file or directory&lt;/code&gt;, make sure Postgres development files are installed on the server.&lt;/p&gt; 
&lt;p&gt;For Ubuntu and Debian, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install postgresql-server-dev-17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;Missing SDK&lt;/h3&gt; 
&lt;p&gt;If compilation fails and the output includes &lt;code&gt;warning: no such sysroot directory&lt;/code&gt; on Mac, your Postgres installation points to a path that no longer exists.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pg_config --cppflags
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Reinstall Postgres to fix this.&lt;/p&gt; 
&lt;h3&gt;Portability&lt;/h3&gt; 
&lt;p&gt;By default, pgvector compiles with &lt;code&gt;-march=native&lt;/code&gt; on some platforms for best performance. However, this can lead to &lt;code&gt;Illegal instruction&lt;/code&gt; errors if trying to run the compiled extension on a different machine.&lt;/p&gt; 
&lt;p&gt;To compile for portability, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make OPTFLAGS=&quot;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation Notes - Windows&lt;/h2&gt; 
&lt;h3&gt;Missing Header&lt;/h3&gt; 
&lt;p&gt;If compilation fails with &lt;code&gt;Cannot open include file: &#39;postgres.h&#39;: No such file or directory&lt;/code&gt;, make sure &lt;code&gt;PGROOT&lt;/code&gt; is correct.&lt;/p&gt; 
&lt;h3&gt;Mismatched Architecture&lt;/h3&gt; 
&lt;p&gt;If compilation fails with &lt;code&gt;error C2196: case value &#39;4&#39; already used&lt;/code&gt;, make sure &lt;code&gt;vcvars64.bat&lt;/code&gt; was called. Then run &lt;code&gt;nmake /F Makefile.win clean&lt;/code&gt; and re-run the installation instructions.&lt;/p&gt; 
&lt;h3&gt;Missing Symbol&lt;/h3&gt; 
&lt;p&gt;If linking fails with &lt;code&gt;unresolved external symbol float_to_shortest_decimal_bufn&lt;/code&gt; with Postgres 17.0-17.2, upgrade to Postgres 17.3+.&lt;/p&gt; 
&lt;h3&gt;Permissions&lt;/h3&gt; 
&lt;p&gt;If installation fails with &lt;code&gt;Access is denied&lt;/code&gt;, re-run the installation instructions as an administrator.&lt;/p&gt; 
&lt;h2&gt;Additional Installation Methods&lt;/h2&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;Get the &lt;a href=&quot;https://hub.docker.com/r/pgvector/pgvector&quot;&gt;Docker image&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker pull pgvector/pgvector:pg17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This adds pgvector to the &lt;a href=&quot;https://hub.docker.com/_/postgres&quot;&gt;Postgres image&lt;/a&gt; (replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version, and run it the same way).&lt;/p&gt; 
&lt;p&gt;You can also build the image manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
docker build --pull --build-arg PG_MAJOR=17 -t myuser/pgvector .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you increase &lt;code&gt;maintenance_work_mem&lt;/code&gt;, make sure &lt;code&gt;--shm-size&lt;/code&gt; is at least that size to avoid an error with parallel HNSW index builds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --shm-size=1g ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;With Homebrew Postgres, you can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: This only adds it to the &lt;code&gt;postgresql@17&lt;/code&gt; and &lt;code&gt;postgresql@14&lt;/code&gt; formulas&lt;/p&gt; 
&lt;h3&gt;PGXN&lt;/h3&gt; 
&lt;p&gt;Install from the &lt;a href=&quot;https://pgxn.org/dist/vector&quot;&gt;PostgreSQL Extension Network&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pgxn install vector
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;APT&lt;/h3&gt; 
&lt;p&gt;Debian and Ubuntu packages are available from the &lt;a href=&quot;https://wiki.postgresql.org/wiki/Apt&quot;&gt;PostgreSQL APT Repository&lt;/a&gt;. Follow the &lt;a href=&quot;https://wiki.postgresql.org/wiki/Apt#Quickstart&quot;&gt;setup instructions&lt;/a&gt; and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install postgresql-17-pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;Yum&lt;/h3&gt; 
&lt;p&gt;RPM packages are available from the &lt;a href=&quot;https://yum.postgresql.org/&quot;&gt;PostgreSQL Yum Repository&lt;/a&gt;. Follow the &lt;a href=&quot;https://www.postgresql.org/download/linux/redhat/&quot;&gt;setup instructions&lt;/a&gt; for your distribution and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo yum install pgvector_17
# or
sudo dnf install pgvector_17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Replace &lt;code&gt;17&lt;/code&gt; with your Postgres server version&lt;/p&gt; 
&lt;h3&gt;pkg&lt;/h3&gt; 
&lt;p&gt;Install the FreeBSD package with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pkg install postgresql16-pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or the port with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /usr/ports/databases/pgvector
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;conda-forge&lt;/h3&gt; 
&lt;p&gt;With Conda Postgres, install from &lt;a href=&quot;https://anaconda.org/conda-forge/pgvector&quot;&gt;conda-forge&lt;/a&gt; with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;conda install -c conda-forge pgvector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method is &lt;a href=&quot;https://github.com/conda-forge/pgvector-feedstock&quot;&gt;community-maintained&lt;/a&gt; by &lt;a href=&quot;https://github.com/mmcauliffe&quot;&gt;@mmcauliffe&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Postgres.app&lt;/h3&gt; 
&lt;p&gt;Download the &lt;a href=&quot;https://postgresapp.com/downloads.html&quot;&gt;latest release&lt;/a&gt; with Postgres 15+.&lt;/p&gt; 
&lt;h2&gt;Hosted Postgres&lt;/h2&gt; 
&lt;p&gt;pgvector is available on &lt;a href=&quot;https://github.com/pgvector/pgvector/issues/54&quot;&gt;these providers&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Upgrading&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation&quot;&gt;Install&lt;/a&gt; the latest version (use the same method as the original installation). Then in each database you want to upgrade, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;ALTER EXTENSION vector UPDATE;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check the version in the current database with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT extversion FROM pg_extension WHERE extname = &#39;vector&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/3318464.3386131&quot;&gt;PASE: PostgreSQL Ultra-High-Dimensional Approximate Nearest Neighbor Search Extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebookresearch/faiss&quot;&gt;Faiss: A Library for Efficient Similarity Search and Clustering of Dense Vectors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cdn.aaai.org/ICML/2003/ICML03-022.pdf&quot;&gt;Using the Triangle Inequality to Accelerate k-means&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf&quot;&gt;k-means++: The Advantage of Careful Seeding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.cs.utexas.edu/users/inderjit/public_papers/concept_mlj.pdf&quot;&gt;Concept Decompositions for Large Sparse Text Data using Clustering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://arxiv.org/ftp/arxiv/papers/1603/1603.09320.pdf&quot;&gt;Efficient and Robust Approximate Nearest Neighbor Search using Hierarchical Navigable Small World Graphs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;History&lt;/h2&gt; 
&lt;p&gt;View the &lt;a href=&quot;https://github.com/pgvector/pgvector/raw/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Everyone is encouraged to help improve this project. Here are a few ways you can help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pgvector/pgvector/issues&quot;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fix bugs and &lt;a href=&quot;https://github.com/pgvector/pgvector/pulls&quot;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; 
 &lt;li&gt;Suggest or add new features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To get started with development:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/pgvector/pgvector.git
cd pgvector
make
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run all tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make installcheck        # regression tests
make prove_installcheck  # TAP tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run single tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make installcheck REGRESS=functions                            # regression test
make prove_installcheck PROVE_TESTS=test/t/001_ivfflat_wal.pl  # TAP test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable assertions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DUSE_ASSERT_CHECKING&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable benchmarking:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DIVFFLAT_BENCH&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To show memory usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DHNSW_MEMORY -DIVFFLAT_MEMORY&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get k-means metrics:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&quot;-DIVFFLAT_KMEANS_DEBUG&quot; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Resources for contributors&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/extend-pgxs.html&quot;&gt;Extension Building Infrastructure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/indexam.html&quot;&gt;Index Access Method Interface Definition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/generic-wal.html&quot;&gt;Generic WAL Records&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>openwall/john</title>
      <link>https://github.com/openwall/john</link>
      <description>&lt;p&gt;John the Ripper jumbo - advanced offline password cracker, which supports hundreds of hash and cipher types, and runs on many operating systems, CPUs, GPUs, and even some FPGAs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://circleci.com/gh/openwall/john/tree/bleeding-jumbo&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/openwall/john/tree/bleeding-jumbo.svg?style=shield&quot; alt=&quot;Circle CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openwall/john-packages/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Download-Windows%20Build-blue.svg?sanitize=true&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openwall/john/raw/bleeding-jumbo/doc/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v2%2B-blue.svg?sanitize=true&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/openwall/john?color=yellow&quot; alt=&quot;GitHub commit activity&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/commits-since/openwall/john/1.9.0-Jumbo-1?color=brown&quot; alt=&quot;GitHub commits since tagged version&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;John the Ripper&lt;/h1&gt; 
&lt;p&gt;This is the community-enhanced, &quot;jumbo&quot; version of John the Ripper. It has a lot of code, documentation, and data contributed by jumbo developers and the user community. It is easy for new code to be added to jumbo, and the quality requirements are low, although lately we&#39;ve started subjecting all contributions to quite some automated testing. This means that you get a lot of functionality that is not necessarily &quot;mature&quot;, which in turn means that bugs in this code are to be expected.&lt;/p&gt; 
&lt;p&gt;John the Ripper homepage is:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.openwall.com/john/&quot;&gt;https://www.openwall.com/john/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you have any comments on this release or on JtR in general, please join the john-users mailing list and post in there:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.openwall.com/lists/john-users/&quot;&gt;https://www.openwall.com/lists/john-users/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For contributions to John the Ripper jumbo, please use pull requests on GitHub:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/openwall/john/raw/bleeding-jumbo/CONTRIBUTING.md&quot;&gt;https://github.com/openwall/john/blob/bleeding-jumbo/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Included below is basic John the Ripper core documentation.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;John the Ripper password cracker.&lt;/h2&gt; 
&lt;p&gt;John the Ripper is a fast password cracker, currently available for many flavors of Unix, macOS, Windows, DOS, BeOS, and OpenVMS (the latter requires a contributed patch). Its primary purpose is to detect weak Unix passwords. Besides several crypt(3) password hash types most commonly found on various Unix flavors, supported out of the box are Kerberos/AFS and Windows LM hashes, as well as DES-based tripcodes, plus hundreds of additional hashes and ciphers in &quot;-jumbo&quot; versions.&lt;/p&gt; 
&lt;h2&gt;How to install.&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/INSTALL&quot;&gt;INSTALL&lt;/a&gt; for information on installing John on your system.&lt;/p&gt; 
&lt;h2&gt;How to use.&lt;/h2&gt; 
&lt;p&gt;To run John, you need to supply it with some password files and optionally specify a cracking mode, like this, using the default order of modes and assuming that &quot;passwd&quot; is a copy of your password file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;john passwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or, to restrict it to the wordlist mode only, but permitting the use of word mangling rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;john --wordlist=password.lst --rules passwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Cracked passwords will be printed to the terminal and saved in the file called $JOHN/john.pot (in the documentation and in the configuration file for John, &quot;$JOHN&quot; refers to John&#39;s &quot;home directory&quot;; which directory it really is depends on how you installed John). The $JOHN/john.pot file is also used to not load password hashes that you already cracked when you run John the next time.&lt;/p&gt; 
&lt;p&gt;To retrieve the cracked passwords, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;john --show passwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While cracking, you can press any key for status, or &#39;q&#39; or Ctrl-C to abort the session saving its state to a file ($JOHN/john.rec by default). If you press Ctrl-C for a second time before John had a chance to complete handling of your first Ctrl-C, John will abort immediately without saving. By default, the state is also saved every 10 minutes to permit for recovery in case of a crash.&lt;/p&gt; 
&lt;p&gt;To continue an interrupted session, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;john --restore
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These are just the most essential things you can do with John. For a complete list of command line options and for more complicated usage examples you should refer to OPTIONS and EXAMPLES, respectively.&lt;/p&gt; 
&lt;p&gt;Please note that &quot;binary&quot; (pre-compiled) distributions of John may include alternate executables instead of just &quot;john&quot;. You may need to choose the executable that fits your system best, e.g. &quot;john-omp&quot; to take advantage of multiple CPUs and/or CPU cores.&lt;/p&gt; 
&lt;h2&gt;Features.&lt;/h2&gt; 
&lt;p&gt;John the Ripper is designed to be both feature-rich and fast. It combines several cracking modes in one program and is fully configurable for your particular needs (you can even define a custom cracking mode using the built-in compiler supporting a subset of C). Also, John is available for several different platforms which enables you to use the same cracker everywhere (you can even continue a cracking session which you started on another platform).&lt;/p&gt; 
&lt;p&gt;Out of the box, John supports (and autodetects) the following Unix crypt(3) hash types: traditional DES-based, &quot;bigcrypt&quot;, BSDI extended DES-based, FreeBSD MD5-based (also used on Linux and in Cisco IOS), and OpenBSD Blowfish-based (now also used on some Linux distributions and supported by recent versions of Solaris). Also supported out of the box are Kerberos/AFS and Windows LM (DES-based) hashes, as well as DES-based tripcodes.&lt;/p&gt; 
&lt;p&gt;When running on Linux distributions with glibc 2.7+, John 1.7.6+ additionally supports (and autodetects) SHA-crypt hashes (which are actually used by recent versions of Fedora and Ubuntu), with optional OpenMP parallelization (requires GCC 4.2+, needs to be explicitly enabled at compile-time by uncommenting the proper OMPFLAGS line near the beginning of the Makefile).&lt;/p&gt; 
&lt;p&gt;Similarly, when running on recent versions of Solaris, John 1.7.6+ supports and autodetects SHA-crypt and SunMD5 hashes, also with optional OpenMP parallelization (requires GCC 4.2+ or recent Sun Studio, needs to be explicitly enabled at compile-time by uncommenting the proper OMPFLAGS line near the beginning of the Makefile and at runtime by setting the OMP_NUM_THREADS environment variable to the desired number of threads).&lt;/p&gt; 
&lt;p&gt;&quot;-jumbo&quot; versions add support for hundreds of additional hash and cipher types, including fast built-in implementations of SHA-crypt and SunMD5, Windows NTLM (MD4-based) password hashes, various macOS and Mac OS X user password hashes, fast hashes such as raw MD5, SHA-1, SHA-256, and SHA-512 (which many &quot;web applications&quot; historically misuse for passwords), various other &quot;web application&quot; password hashes, various SQL and LDAP server password hashes, and lots of other hash types, as well as many non-hashes such as SSH private keys, S/Key skeykeys files, Kerberos TGTs, encrypted filesystems such as macOS .dmg files and &quot;sparse bundles&quot;, encrypted archives such as ZIP (classic PKZIP and WinZip/AES), RAR, and 7z, encrypted document files such as PDF and Microsoft Office&#39;s - and these are just some examples. To load some of these larger files for cracking, a corresponding bundled *2john program should be used first, and then its output fed into JtR -jumbo.&lt;/p&gt; 
&lt;h2&gt;Graphical User Interface (GUI).&lt;/h2&gt; 
&lt;p&gt;There is an official GUI for John the Ripper: Johnny.&lt;/p&gt; 
&lt;p&gt;Despite the fact that Johnny is oriented onto JtR core, all basic functionality is supposed to work in all versions, including jumbo.&lt;/p&gt; 
&lt;p&gt;Johnny is a separate program, therefore you need to have John the Ripper installed in order to use it.&lt;/p&gt; 
&lt;p&gt;More information about Johnny and its releases is on the wiki:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://openwall.info/wiki/john/johnny&quot;&gt;https://openwall.info/wiki/john/johnny&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation.&lt;/h2&gt; 
&lt;p&gt;The rest of documentation is located in separate files, listed here in the recommended order of reading:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/INSTALL&quot;&gt;INSTALL&lt;/a&gt; - installation instructions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/OPTIONS&quot;&gt;OPTIONS&lt;/a&gt; - command line options and additional utilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/MODES&quot;&gt;MODES&lt;/a&gt; - cracking modes: what they are&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/CONFIG&quot;&gt;CONFIG&lt;/a&gt; (*) - how to customize&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/RULES&quot;&gt;RULES&lt;/a&gt; (*) - wordlist rules syntax&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/EXTERNAL&quot;&gt;EXTERNAL&lt;/a&gt; (*) - defining an external mode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt; - usage examples - strongly recommended&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/FAQ&quot;&gt;FAQ&lt;/a&gt; - guess&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/CHANGES&quot;&gt;CHANGES&lt;/a&gt; (*) - history of changes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/CONTACT&quot;&gt;CONTACT&lt;/a&gt; (*) - how to contact the author or otherwise obtain support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/CREDITS&quot;&gt;CREDITS&lt;/a&gt; (*) - credits&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/LICENSE&quot;&gt;LICENSE&lt;/a&gt; - copyrights and licensing terms&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openwall/john/bleeding-jumbo/doc/COPYING&quot;&gt;COPYING&lt;/a&gt; - GNU GPL version 2, as referenced by LICENSE above&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(*) most users can safely skip these.&lt;/p&gt; 
&lt;p&gt;There are a lot of additional documentation files in jumbo&#39;s &quot;doc&quot; directory, which you&#39;ll also want to explore.&lt;/p&gt; 
&lt;p&gt;Happy reading!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mpv-player/mpv</title>
      <link>https://github.com/mpv-player/mpv</link>
      <description>&lt;p&gt;🎥 Command line media player&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mpv-player/mpv.io/master/source/images/mpv-logo-128.png&quot; alt=&quot;mpv logo&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;mpv&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#external-links&quot;&gt;External links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#system-requirements&quot;&gt;System requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#downloads&quot;&gt;Downloads&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#changelog&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#compilation&quot;&gt;Compilation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#release-cycle&quot;&gt;Release cycle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#bug-reports&quot;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;External links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mpv-player/mpv/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mpv-player/mpv/wiki/User-Scripts&quot;&gt;User Scripts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mpv-player/mpv/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mpv.io/manual/master/&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;mpv&lt;/strong&gt; is a free (as in freedom) media player for the command line. It supports a wide variety of media file formats, audio and video codecs, and subtitle types.&lt;/p&gt; 
&lt;p&gt;There is a &lt;a href=&quot;https://github.com/mpv-player/mpv/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Releases can be found on the &lt;a href=&quot;https://github.com/mpv-player/mpv/releases&quot;&gt;release list&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;System requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;A not too ancient Linux (usually, only the latest releases of distributions are actively supported), Windows 10 1607 or later, or macOS 10.15 or later.&lt;/li&gt; 
 &lt;li&gt;A somewhat capable CPU. Hardware decoding might help if the CPU is too slow to decode video in realtime, but must be explicitly enabled with the &lt;code&gt;--hwdec&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;A not too crappy GPU. mpv&#39;s focus is not on power-efficient playback on embedded or integrated GPUs (for example, hardware decoding is not even enabled by default). Low power GPUs may cause issues like tearing, stutter, etc. On such GPUs, it&#39;s recommended to use &lt;code&gt;--profile=fast&lt;/code&gt; for smooth playback. The main video output uses shaders for video rendering and scaling, rather than GPU fixed function hardware. On Windows, you might want to make sure the graphics drivers are current. In some cases, ancient fallback video output methods can help (such as &lt;code&gt;--vo=xv&lt;/code&gt; on Linux), but this use is not recommended or supported.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;mpv does not go out of its way to break on older hardware or old, unsupported operating systems, but development is not done with them in mind. Keeping compatibility with such setups is not guaranteed. If things work, consider it a happy accident.&lt;/p&gt; 
&lt;h2&gt;Downloads&lt;/h2&gt; 
&lt;p&gt;For semi-official builds and third-party packages please see &lt;a href=&quot;https://mpv.io/installation/&quot;&gt;mpv.io/installation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;There is no complete changelog; however, changes to the player core interface are listed in the &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/DOCS/interface-changes.rst&quot;&gt;interface changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Changes to the C API are documented in the &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/DOCS/client-api-changes.rst&quot;&gt;client API changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/mpv-player/mpv/releases&quot;&gt;release list&lt;/a&gt; has a summary of most of the important changes on every release.&lt;/p&gt; 
&lt;p&gt;Changes to the default key bindings are indicated in &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/etc/restore-old-bindings.conf&quot;&gt;restore-old-bindings.conf&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Changes to the default OSC bindings are indicated in &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/etc/restore-osc-bindings.conf&quot;&gt;restore-osc-bindings.conf&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Compilation&lt;/h2&gt; 
&lt;p&gt;Compiling with full features requires development files for several external libraries. Mpv requires &lt;a href=&quot;https://mesonbuild.com/index.html&quot;&gt;meson&lt;/a&gt; to build. Meson can be obtained from your distro or PyPI.&lt;/p&gt; 
&lt;p&gt;After creating your build directory (e.g. &lt;code&gt;meson setup build&lt;/code&gt;), you can view a list of all the build options via &lt;code&gt;meson configure build&lt;/code&gt;. You could also just simply look at the &lt;code&gt;meson_options.txt&lt;/code&gt; file. Logs are stored in &lt;code&gt;meson-logs&lt;/code&gt; within your build directory.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;meson setup build
meson compile -C build
meson install -C build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For libplacebo, meson can use a git check out as a subproject for a convenient way to compile mpv if a sufficient libplacebo version is not easily available in the build environment. It will be statically linked with mpv. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir -p subprojects
git clone https://code.videolan.org/videolan/libplacebo.git --depth=1 --recursive subprojects/libplacebo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Essential dependencies (incomplete list):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;gcc or clang&lt;/li&gt; 
 &lt;li&gt;X development headers (xlib, xrandr, xext, xscrnsaver, xpresent, libvdpau, libGL, GLX, EGL, xv, ...)&lt;/li&gt; 
 &lt;li&gt;Audio output development headers (libasound/ALSA, pulseaudio)&lt;/li&gt; 
 &lt;li&gt;FFmpeg libraries (libavutil libavcodec libavformat libswscale libavfilter and either libswresample or libavresample)&lt;/li&gt; 
 &lt;li&gt;libplacebo&lt;/li&gt; 
 &lt;li&gt;zlib&lt;/li&gt; 
 &lt;li&gt;iconv (normally provided by the system libc)&lt;/li&gt; 
 &lt;li&gt;libass (OSD, OSC, text subtitles)&lt;/li&gt; 
 &lt;li&gt;Lua (optional, required for the OSC pseudo-GUI and youtube-dl integration)&lt;/li&gt; 
 &lt;li&gt;libjpeg (optional, used for screenshots only)&lt;/li&gt; 
 &lt;li&gt;uchardet (optional, for subtitle charset detection)&lt;/li&gt; 
 &lt;li&gt;nvdec and vaapi libraries for hardware decoding on Linux (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Libass dependencies (when building libass):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;gcc or clang, nasm on x86 and x86_64&lt;/li&gt; 
 &lt;li&gt;fribidi, freetype, fontconfig development headers (for libass)&lt;/li&gt; 
 &lt;li&gt;harfbuzz (required for correct rendering of combining characters, particularly for correct rendering of non-English text on macOS, and Arabic/Indic scripts on any platform)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;FFmpeg dependencies (when building FFmpeg):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;gcc or clang, nasm on x86 and x86_64&lt;/li&gt; 
 &lt;li&gt;OpenSSL or GnuTLS (have to be explicitly enabled when compiling FFmpeg)&lt;/li&gt; 
 &lt;li&gt;libx264/libmp3lame/libfdk-aac if you want to use encoding (have to be explicitly enabled when compiling FFmpeg)&lt;/li&gt; 
 &lt;li&gt;For native DASH playback, FFmpeg needs to be built with --enable-libxml2 (although there are security implications, and DASH support has lots of bugs).&lt;/li&gt; 
 &lt;li&gt;AV1 decoding support requires dav1d.&lt;/li&gt; 
 &lt;li&gt;For good nvidia support on Linux, make sure nv-codec-headers is installed and can be found by configure.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Most of the above libraries are available in suitable versions on normal Linux distributions. For ease of compiling the latest git master of everything, you may wish to use the separately available build wrapper (&lt;a href=&quot;https://github.com/mpv-player/mpv-build&quot;&gt;mpv-build&lt;/a&gt;) which first compiles FFmpeg libraries and libass, and then compiles the player statically linked against those.&lt;/p&gt; 
&lt;p&gt;If you want to build a Windows binary, see &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/DOCS/compile-windows.md&quot;&gt;Windows compilation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Release cycle&lt;/h2&gt; 
&lt;p&gt;Once or twice a year, a release is cut off from the current development state and is assigned a 0.X.0 version number. No further maintenance is done, except in the event of security issues.&lt;/p&gt; 
&lt;p&gt;The goal of releases is to make Linux distributions happy. Linux distributions are also expected to apply their own patches in case of bugs.&lt;/p&gt; 
&lt;p&gt;Releases other than the latest release are unsupported and unmaintained.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/DOCS/release-policy.md&quot;&gt;release policy document&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;Please use the &lt;a href=&quot;https://github.com/mpv-player/mpv/issues&quot;&gt;issue tracker&lt;/a&gt; provided by GitHub to send us bug reports or feature requests. Follow the template&#39;s instructions or the issue will likely be ignored or closed as invalid.&lt;/p&gt; 
&lt;p&gt;Questions can be asked in the &lt;a href=&quot;https://github.com/mpv-player/mpv/discussions&quot;&gt;discussions&lt;/a&gt; or on IRC (see &lt;a href=&quot;https://raw.githubusercontent.com/mpv-player/mpv/master/#Contact&quot;&gt;Contact&lt;/a&gt; below).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/DOCS/contribute.md&quot;&gt;contribute.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For small changes you can just send us pull requests through GitHub. For bigger changes come and talk to us on IRC before you start working on them. It will make code review easier for both parties later on.&lt;/p&gt; 
&lt;p&gt;You can check &lt;a href=&quot;https://github.com/mpv-player/mpv/wiki/Stuff-to-do&quot;&gt;the wiki&lt;/a&gt; or the &lt;a href=&quot;https://github.com/mpv-player/mpv/issues?q=is%3Aopen+is%3Aissue+label%3Ameta%3Afeature-request&quot;&gt;issue tracker&lt;/a&gt; for ideas on what you could contribute with.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;GPLv2 &quot;or later&quot; by default, LGPLv2.1 &quot;or later&quot; with &lt;code&gt;-Dgpl=false&lt;/code&gt;. See &lt;a href=&quot;https://github.com/mpv-player/mpv/raw/master/Copyright&quot;&gt;details.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;History&lt;/h2&gt; 
&lt;p&gt;This software is based on the MPlayer project. Before mpv existed as a project, the code base was briefly developed under the mplayer2 project. For details, see the &lt;a href=&quot;https://github.com/mpv-player/mpv/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Most activity happens on the IRC channel and the GitHub issue tracker.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub issue tracker&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mpv-player/mpv/issues&quot;&gt;issue tracker&lt;/a&gt; (report bugs here)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Discussions&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mpv-player/mpv/discussions&quot;&gt;discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User IRC Channel&lt;/strong&gt;: &lt;code&gt;#mpv&lt;/code&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Developer IRC Channel&lt;/strong&gt;: &lt;code&gt;#mpv-devel&lt;/code&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>winsiderss/systeminformer</title>
      <link>https://github.com/winsiderss/systeminformer</link>
      <description>&lt;p&gt;A free, powerful, multi-purpose tool that helps you monitor system resources, debug software and detect malware. Brought to you by Winsider Seminars &amp; Solutions, Inc. @ http://www.windows-internals.com&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/winsiderss/systeminformer/actions/workflows/msbuild.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/winsiderss/systeminformer/msbuild.yml?branch=master&amp;amp;style=for-the-badge&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/winsiderss/systeminformer/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/winsiderss/systeminformer.svg?style=for-the-badge&amp;amp;color=blue&quot; alt=&quot;Build contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge&amp;amp;color=blue&quot; alt=&quot;Licence&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://somsubhra.github.io/github-release-stats/?username=winsiderss&amp;amp;repository=systeminformer&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/winsiderss/systeminformer/total.svg?style=for-the-badge&amp;amp;color=red&quot; alt=&quot;Github stats&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sourceforge.net/projects/processhacker/files/stats/timeline?period=monthly&quot;&gt;&lt;img src=&quot;https://img.shields.io/sourceforge/dt/processhacker.svg?style=for-the-badge&amp;amp;color=red&quot; alt=&quot;SourceForge stats&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img align=&quot;left&quot; src=&quot;https://github.com/winsiderss/systeminformer/raw/master/SystemInformer/resources/systeminformer-128x128.png&quot; width=&quot;128&quot; height=&quot;128&quot; style=&quot;max-width: 100%;padding-right: 20px;&quot;&gt; 
&lt;h2&gt;System Informer&lt;/h2&gt; 
&lt;p&gt;A free, powerful, multi-purpose tool that helps you monitor system resources, debug software and detect malware. Brought to you by Winsider Seminars &amp;amp; Solutions, Inc.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://systeminformer.sourceforge.io/&quot;&gt;Project Website&lt;/a&gt; - &lt;a href=&quot;https://systeminformer.sourceforge.io/downloads.php&quot;&gt;Project Downloads&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;System requirements&lt;/h2&gt; 
&lt;p&gt;Windows 10 or higher, 32-bit or 64-bit.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;A detailed overview of system activity with highlighting.&lt;/li&gt; 
 &lt;li&gt;Graphs and statistics allow you quickly to track down resource hogs and runaway processes.&lt;/li&gt; 
 &lt;li&gt;Can&#39;t edit or delete a file? Discover which processes are using that file.&lt;/li&gt; 
 &lt;li&gt;See what programs have active network connections, and close them if necessary.&lt;/li&gt; 
 &lt;li&gt;Get real-time information on disk access.&lt;/li&gt; 
 &lt;li&gt;View detailed stack traces with kernel-mode, WOW64 and .NET support.&lt;/li&gt; 
 &lt;li&gt;Go beyond services.msc: create, edit and control services.&lt;/li&gt; 
 &lt;li&gt;Small, portable and no installation required.&lt;/li&gt; 
 &lt;li&gt;100% &lt;a href=&quot;https://www.gnu.org/philosophy/free-sw.en.html&quot;&gt;Free Software&lt;/a&gt; (&lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building the project&lt;/h2&gt; 
&lt;p&gt;Requires Visual Studio (2022 or later).&lt;/p&gt; 
&lt;p&gt;After cloning the repo run &lt;code&gt;build_init.cmd&lt;/code&gt; located in the &lt;code&gt;build&lt;/code&gt; directory, this doesn&#39;t not run again unless there are updates to the tools or third party libraries.&lt;/p&gt; 
&lt;p&gt;Execute &lt;code&gt;build_release.cmd&lt;/code&gt; located in the &lt;code&gt;build&lt;/code&gt; directory to compile the project or load the &lt;code&gt;SystemInformer.sln&lt;/code&gt; and &lt;code&gt;Plugins.sln&lt;/code&gt; solutions if you prefer building the project using Visual Studio.&lt;/p&gt; 
&lt;p&gt;You can download the free &lt;a href=&quot;https://www.visualstudio.com/vs/community/&quot;&gt;Visual Studio Community Edition&lt;/a&gt; to build the System Informer source code.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/winsiderss/systeminformer/master/build/README.md&quot;&gt;build readme&lt;/a&gt; for more information or if you&#39;re having trouble building.&lt;/p&gt; 
&lt;h2&gt;Enhancements/Bugs&lt;/h2&gt; 
&lt;p&gt;Please use the &lt;a href=&quot;https://github.com/winsiderss/systeminformer/issues&quot;&gt;GitHub issue tracker&lt;/a&gt; for reporting problems or suggesting new features.&lt;/p&gt; 
&lt;h2&gt;Settings&lt;/h2&gt; 
&lt;p&gt;If you are running System Informer from a USB drive, you may want to save System Informer&#39;s settings there as well. To do this, create a blank file named &quot;SystemInformer.exe.settings.xml&quot; in the same directory as SystemInformer.exe. You can do this using Windows Explorer:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure &quot;Hide extensions for known file types&quot; is unticked in Tools &amp;gt; Folder options &amp;gt; View.&lt;/li&gt; 
 &lt;li&gt;Right-click in the folder and choose New &amp;gt; Text Document.&lt;/li&gt; 
 &lt;li&gt;Rename the file to SystemInformer.exe.settings.xml (delete the &quot;.txt&quot; extension).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;p&gt;Plugins can be configured from Options &amp;gt; Plugins.&lt;/p&gt; 
&lt;p&gt;If you experience any crashes involving plugins, make sure they are up to date.&lt;/p&gt; 
&lt;p&gt;Disk and Network information provided by the ExtendedTools plugin is only available when running System Informer with administrative rights.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>reactos/reactos</title>
      <link>https://github.com/reactos/reactos</link>
      <description>&lt;p&gt;A free Windows-compatible Operating System&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://reactos.org/&quot;&gt; &lt;img alt=&quot;ReactOS&quot; src=&quot;https://reactos.org/wiki/images/0/02/ReactOS_logo.png&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://reactos.org/project-news/reactos-0415-released/&quot;&gt; &lt;img alt=&quot;ReactOS 0.4.15 Release&quot; src=&quot;https://img.shields.io/badge/release-0.4.15-0688CB.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://reactos.org/download/&quot;&gt; &lt;img alt=&quot;Download ReactOS&quot; src=&quot;https://img.shields.io/badge/download-latest-0688CB.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sourceforge.net/projects/reactos/&quot;&gt; &lt;img alt=&quot;SourceForge Download&quot; src=&quot;https://img.shields.io/sourceforge/dm/reactos.svg?colorB=0688CB&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/reactos/reactos/raw/master/COPYING&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/badge/license-GNU_GPL_2.0-0688CB.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://reactos.org/donate/&quot;&gt; &lt;img alt=&quot;Donate&quot; src=&quot;https://img.shields.io/badge/%24-donate-E44E4A.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/reactos&quot;&gt; &lt;img alt=&quot;Follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/reactos.svg?style=social&amp;amp;label=Follow%20%40reactos&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Quick Links&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://reactos.org/&quot;&gt;Website&lt;/a&gt; • &lt;a href=&quot;https://chat.reactos.org/&quot;&gt;Official chat&lt;/a&gt; • &lt;a href=&quot;https://reactos.org/wiki/&quot;&gt;Wiki&lt;/a&gt; • &lt;a href=&quot;https://reactos.org/forum/&quot;&gt;Forum&lt;/a&gt; • &lt;a href=&quot;https://discord.gg/7knjvhT&quot;&gt;Community Discord&lt;/a&gt; • &lt;a href=&quot;https://jira.reactos.org/issues/&quot;&gt;JIRA Bug Tracker&lt;/a&gt; • &lt;a href=&quot;https://git.reactos.org/&quot;&gt;ReactOS Git mirror&lt;/a&gt; • &lt;a href=&quot;https://reactos.org/testman/&quot;&gt;Testman&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is ReactOS?&lt;/h2&gt; 
&lt;p&gt;ReactOS™ is an Open Source effort to develop a quality operating system that is compatible with applications and drivers written for the Microsoft® Windows™ NT family of operating systems (NT4, 2000, XP, 2003, Vista, 7).&lt;/p&gt; 
&lt;p&gt;The ReactOS project, although currently focused on Windows Server 2003 compatibility, is always keeping an eye toward compatibility with Windows Vista and future Windows NT releases.&lt;/p&gt; 
&lt;p&gt;The code of ReactOS is licensed under &lt;a href=&quot;https://github.com/reactos/reactos/raw/master/COPYING&quot;&gt;GNU GPL 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Product quality warning&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;ReactOS is currently an Alpha quality operating system.&lt;/strong&gt; This means that ReactOS is under heavy development and you have to be ready to encounter some problems. Different things may not work well and it can corrupt the data present on your hard disk. It is HIGHLY recommended to test ReactOS on a virtual machine or on a computer with no sensitive or critical data!&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/reactos/reactos/workflows/Build/badge.svg?sanitize=true&quot; alt=&quot;Build&quot;&gt; &lt;a href=&quot;https://sourceforge.net/projects/reactos/files/RosBE-Windows/i386/2.2.1/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/RosBE_Windows-2.2.1-0688CB.svg?sanitize=true&quot; alt=&quot;rosbewin.badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sourceforge.net/projects/reactos/files/RosBE-Unix/2.2.1/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/RosBE_Unix-2.2.1-0688CB.svg?sanitize=true&quot; alt=&quot;rosbeunix.badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://scan.coverity.com/projects/205&quot;&gt;&lt;img src=&quot;https://scan.coverity.com/projects/205/badge.svg?flat=1&quot; alt=&quot;coverity.badge&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To build the system it is strongly advised to use the &lt;em&gt;ReactOS Build Environment (RosBE).&lt;/em&gt; Up-to-date versions for Windows and for Unix/GNU-Linux are available from our download page at: &lt;a href=&quot;https://reactos.org/wiki/Build_Environment&quot;&gt;&quot;Build Environment&quot;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively one can use Microsoft Visual C++ (MSVC) version 2019+. Building with MSVC is covered here: &lt;a href=&quot;https://reactos.org/wiki/CMake#Visual_Studio_or_Microsoft_Visual_C.2B.2B&quot;&gt;&quot;Visual Studio or Microsoft Visual C++&quot;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://reactos.org/wiki/Building_ReactOS&quot;&gt;&quot;Building ReactOS&quot;&lt;/a&gt; article for more details.&lt;/p&gt; 
&lt;h3&gt;Binaries&lt;/h3&gt; 
&lt;p&gt;To build ReactOS you must run the &lt;code&gt;configure&lt;/code&gt; script in the directory you want to have your build files. Choose &lt;code&gt;configure.cmd&lt;/code&gt; or &lt;code&gt;configure.sh&lt;/code&gt; depending on your system. Then run &lt;code&gt;ninja &amp;lt;modulename&amp;gt;&lt;/code&gt; to build a module you want or just &lt;code&gt;ninja&lt;/code&gt; to build all modules.&lt;/p&gt; 
&lt;h3&gt;Bootable images&lt;/h3&gt; 
&lt;p&gt;To build a bootable CD image run &lt;code&gt;ninja bootcd&lt;/code&gt; from the build directory. This will create a CD image with a filename &lt;code&gt;bootcd.iso&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can always download fresh binary builds of bootable images from the &lt;a href=&quot;https://reactos.org/getbuilds/&quot;&gt;&quot;Daily builds&quot;&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;By default, ReactOS currently can only be installed on a machine that has a FAT16 or FAT32 partition as the active (bootable) partition. The partition on which ReactOS is to be installed (which may or may not be the bootable partition) must also be formatted as FAT16 or FAT32. ReactOS Setup can format the partitions if needed.&lt;/p&gt; 
&lt;p&gt;Starting with 0.4.10, ReactOS can be installed using the BtrFS file system. But consider this as an experimental feature and thus regressions not triggered on FAT setup may be observed.&lt;/p&gt; 
&lt;p&gt;To install ReactOS from the bootable CD distribution, extract the archive contents. Then burn the CD image, boot from it, and follow the instructions.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://reactos.org/wiki/Installing_ReactOS&quot;&gt;&quot;Installing ReactOS&quot;&lt;/a&gt; Wiki page or &lt;a href=&quot;https://raw.githubusercontent.com/reactos/reactos/master/INSTALL&quot;&gt;INSTALL&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;If you discover a bug in ReactOS search on JIRA first - it might be reported already. If not report the bug providing logs and as much information as possible.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://reactos.org/wiki/File_Bugs&quot;&gt;&quot;File Bugs&quot;&lt;/a&gt; for a guide.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The bug tracker is &lt;em&gt;not&lt;/em&gt; for discussions. Please use our &lt;a href=&quot;https://chat.reactos.org/&quot;&gt;official chat&lt;/a&gt; or our &lt;a href=&quot;https://reactos.org/forum/&quot;&gt;forum&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing &lt;a href=&quot;https://reactos.org/wiki/Commiting_Changes&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PR-welcome-0688CB.svg?sanitize=true&quot; alt=&quot;prwelcome.badge&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;We are always looking for developers! Check &lt;a href=&quot;https://raw.githubusercontent.com/reactos/reactos/master/CONTRIBUTING.md&quot;&gt;how to contribute&lt;/a&gt; if you are willing to participate.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Legal notice&lt;/strong&gt;: If you have seen proprietary Microsoft Windows source code (including but not limited to the leaked Windows NT 3.5, NT 4, 2000 source code and the Windows Research Kernel), your contribution won&#39;t be accepted because of potential copyright violation.&lt;/p&gt; 
&lt;p&gt;Try out cloud-based ReactOS development using Gitpod and Docker:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/reactos/reactos&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can also support ReactOS by &lt;a href=&quot;https://reactos.org/donate/&quot;&gt;donating&lt;/a&gt;! We rely on our backers to maintain our servers and accelerate development by &lt;a href=&quot;https://reactos.org/contributing/#paid-jobs&quot;&gt;hiring full-time devs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;More information&lt;/h2&gt; 
&lt;p&gt;ReactOS is a Free and Open Source operating system based on the Windows architecture, providing support for existing applications and drivers, and an alternative to the current dominant consumer operating system.&lt;/p&gt; 
&lt;p&gt;It is not another wrapper built on Linux, like WINE. It does not attempt or plan to compete with WINE; in fact, the user-mode part of ReactOS is almost entirely WINE-based and our two teams have cooperated closely in the past.&lt;/p&gt; 
&lt;p&gt;ReactOS is also not &quot;yet another OS&quot;. It does not attempt to be a third player like any other alternative OS out there. People are not meant to uninstall Linux and use ReactOS instead; ReactOS is a replacement for Windows users who want a Windows replacement that behaves just like Windows.&lt;/p&gt; 
&lt;p&gt;More information is available at: &lt;a href=&quot;https://reactos.org/&quot;&gt;reactos.org&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Also see the &lt;a href=&quot;https://raw.githubusercontent.com/reactos/reactos/master/media/doc/&quot;&gt;media/doc&lt;/a&gt; subdirectory for some sparse notes.&lt;/p&gt; 
&lt;h2&gt;Who is responsible&lt;/h2&gt; 
&lt;p&gt;Active devs are listed as members of &lt;a href=&quot;https://github.com/orgs/reactos/people&quot;&gt;GitHub organization&lt;/a&gt;. See also the &lt;a href=&quot;https://raw.githubusercontent.com/reactos/reactos/master/CREDITS&quot;&gt;CREDITS&lt;/a&gt; file for others.&lt;/p&gt; 
&lt;h2&gt;Code mirrors&lt;/h2&gt; 
&lt;p&gt;The main development is done on &lt;a href=&quot;https://github.com/reactos/reactos&quot;&gt;GitHub&lt;/a&gt;. We have an &lt;a href=&quot;https://git.reactos.org/?p=reactos.git&quot;&gt;alternative mirror&lt;/a&gt; in case GitHub is down.&lt;/p&gt; 
&lt;p&gt;There is also an obsolete &lt;a href=&quot;https://svn.reactos.org/reactos/&quot;&gt;SVN archive repository&lt;/a&gt; that is kept for historical purposes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GuijiAI/HeyGem.ai</title>
      <link>https://github.com/GuijiAI/HeyGem.ai</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Heygem - Open Source Alternative to Heygen &lt;a href=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.md&quot;&gt;【切换中文】&lt;/a&gt;&lt;/h1&gt; 
&lt;h2&gt;Version Update Notice&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;The Lite version is officially released, you can download it &lt;a href=&quot;https://github.com/GuijiAI/HeyGem.ai/releases/tag/v1.0.3-Lite&quot;&gt;here&lt;/a&gt;. If you want to experience the standard version (original version), you can click &lt;a href=&quot;https://github.com/GuijiAI/HeyGem.ai/releases/tag/v1.0.3&quot;&gt;here&lt;/a&gt; to download&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The Lite version can reduce two services heygem-tts / heygem-asr, reducing the installation size from 70GB to 13.5GB&lt;/li&gt; 
 &lt;li&gt;The Lite version customizes avatars and video generation faster&lt;/li&gt; 
 &lt;li&gt;The Lite version does not have text-to-video functionality, it can only generate videos by uploading audio&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Important Notice to Developer Partners&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Dear Heygem Open Source Community Members:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;We sincerely thank you for your enthusiastic attention and active participation in the Heygem digital human open source project! We have noticed that some developers face challenges during local deployment. To better meet the needs of different scenarios, we are now announcing two parallel service solutions:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;HeyGem Open Source Local Deployment&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;Digital Human/Clone Voice API Service&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Usage&lt;/td&gt; 
   &lt;td&gt;Open Source Local Deployment&lt;/td&gt; 
   &lt;td&gt;Rapid Clone API Service&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Recommended&lt;/td&gt; 
   &lt;td&gt;Technical Users&lt;/td&gt; 
   &lt;td&gt;Business Users&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Technical Threshold&lt;/td&gt; 
   &lt;td&gt;Developers with deep learning framework experience/pursuing deep customization/wishing to participate in community co-construction&lt;/td&gt; 
   &lt;td&gt;Quick business integration/focus on upper-level application development/need enterprise-level SLA assurance for commercial scenarios&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hardware Requirements&lt;/td&gt; 
   &lt;td&gt;Need to purchase GPU server&lt;/td&gt; 
   &lt;td&gt;No need to purchase GPU server&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Customization&lt;/td&gt; 
   &lt;td&gt;Can modify and extend the code according to your needs, fully controlling the software&#39;s functions and behavior&lt;/td&gt; 
   &lt;td&gt;Cannot directly modify the source code, can only extend functions through API-provided interfaces, less flexible than open source projects&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Technical Support&lt;/td&gt; 
   &lt;td&gt;Community Support&lt;/td&gt; 
   &lt;td&gt;Dynamic expansion support + professional technical response team&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Maintenance Cost&lt;/td&gt; 
   &lt;td&gt;High maintenance cost&lt;/td&gt; 
   &lt;td&gt;Simple maintenance&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Lip Sync Effect&lt;/td&gt; 
   &lt;td&gt;Usable effect&lt;/td&gt; 
   &lt;td&gt;Stunning and higher definition effect&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Commercial Authorization&lt;/td&gt; 
   &lt;td&gt;Supports global free commercial use (enterprises with more than 100,000 users or annual revenue exceeding 10 million USD need to sign a commercial license agreement)&lt;/td&gt; 
   &lt;td&gt;Commercial use allowed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Iteration Speed&lt;/td&gt; 
   &lt;td&gt;Slow updates, bug fixes depend on the community&lt;/td&gt; 
   &lt;td&gt;Latest models/algorithms are prioritized, fast problem resolution&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;We always adhere to the open source spirit, and the launch of the API service aims to provide a more complete solution matrix for developers with different needs. No matter which method you choose, you can always obtain technical support documents through &lt;a href=&quot;mailto:James@toolwiz.com&quot;&gt;James@toolwiz.com&lt;/a&gt;. We look forward to working with you to promote the inclusive development of digital human technology!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Silicon-based Intelligent Developer Team&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/vKiBR85E7JyRkr6CxLCppA?mpshare=1&amp;amp;scene=1&amp;amp;srcid=0319sszkopZO6870sGsU0TFc&amp;amp;sharer_shareinfo=cac5ec3bfa62ed558552c7c022821613&amp;amp;sharer_shareinfo_first=cac5ec3bfa62ed558552c7c022821613&amp;amp;from=industrynews#rd&quot; target=&quot;_blank&quot;&gt;From scratch, hand-in-hand to teach you how to create your own HeyGem open source AI digital human!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.guiji.cn/platform&quot;&gt;&lt;strong&gt;Rapid Clone API&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://guiji.cn/digital-docs/introduce/&quot;&gt;&lt;strong&gt;API Documentation Center&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.guiji.cn/platform&quot;&gt;&lt;strong&gt;Real-time Interaction SDK&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://guiji.cn/duix-light-document/introduce/&quot;&gt;&lt;strong&gt;SDK Documentation Center&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/GuijiAI/duix.ai&quot;&gt;&lt;strong&gt;Local Real-time Interaction (realtime) duix.ai Open Source Address&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/GuijiAI/duix.ai/raw/main/duix-android/dh_aigc_android/README.md&quot;&gt;&lt;strong&gt;Android Version&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/GuijiAI/duix.ai/raw/main/duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK.md&quot;&gt;&lt;strong&gt;IOS Version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/1CB5196D-C989-4577-8C57-DCBA3E0871B2-51277-000008CE6CF0B87a.jpg&quot; width=&quot;50%&quot;&gt; 
&lt;h2&gt;Open Source Co-Creation · Shared Glory&lt;/h2&gt; 
&lt;p&gt;Since we open-sourced Heygem, global geeks have illuminated the digital avatar matrix in the code universe, with each commit reconstructing the future! But joy is better shared than enjoyed alone—now we invite all experts to join the &quot;Open Source Co-Creation Plan,&quot; empowering everyone with AI creativity and propelling the Chinese AI fleet towards the stars!&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Co-Creation Content Direction&lt;/p&gt; &lt;p&gt;Share high-quality videos or articles on Heygem deployment tutorials, optimization guides, and practical cases (Bilibili, Douyin, Xiaohongshu, WeChat Official Accounts, Zhihu, etc.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open Source Co-Creation Special Reward Pool (Real Cash Rewards!)&lt;/p&gt; &lt;p&gt;(1) Basic Rewards&lt;/p&gt; &lt;p&gt;Content receiving 20-100 likes will be awarded the [Heygem.ai Master Award] and a 20 RMB cash red envelope.&lt;/p&gt; &lt;p&gt;Content receiving 100+ likes will be awarded the [Heygem.ai God Award] and a 50 RMB cash red envelope.&lt;/p&gt; &lt;p&gt;(2) Special Achievements:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The monthly MVP will unlock the Open Source Hall of Fame digital badge (permanently on-chain).
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Participation Method&lt;/p&gt; &lt;p&gt;Send your creativity to the customer service lady, add a friend with the note &quot;Name+999&quot;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/2025-03-20_14-38-00.jpg&quot; width=&quot;50%&quot;&gt; 
&lt;h2&gt;Outstanding Co-Creation Works Exhibition&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1awQqYZEqB/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=618f44772c5dafb47317bb728505d79c&quot;&gt;HeyGem Digital Human One-Click Start, 8G Video Memory Available, Model Size 10G, No Need for 100G Hard Disk Space, No Need for D Drive, Based on Docker Single Image, Silicon-Based Open Source&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1ACQSYEErF/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=618f44772c5dafb47317bb728505d79c&quot;&gt;Ai Digital Human 16 - Local Deployment! The Most Popular Open Source Digital Human HeyGem Zero-Basis Hands-On Teaching Setup Tutorial, 20% Generation Stuck Solution, Full Simplified Process with Supporting Files - T8 ComfyUI Tutorial&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1R3QpYsEY6/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=618f44772c5dafb47317bb728505d79c&quot;&gt;Heygem Open Source Witnessed History! Cyber Worker Revolution!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1eWQ6YgEcp/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=618f44772c5dafb47317bb728505d79c&quot;&gt;Digital Human Project Heygem Local Deployment Tutorial&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://xhslink.com/a/rQPYqoDSRih8&quot;&gt;So Tempting! From Paid to Open Source, AI Digital Humans Will Open a New Era&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://xhslink.com/a/tX3p5V5tajh8&quot;&gt;Open Source Free Digital Humans Are Here, Unlimited Times, Fast Cloning&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://xhslink.com/a/8UT1kQ7vxjh8&quot;&gt;AI Digital Humans Are Free! GitHub&#39;s Hot Project Can Run on Your Computer&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1SkoCYpEwh/?share_source=copy_web&amp;amp;vd_source=c38dcdb72a68f2a4e0b3c0f4f9a5a03c&quot;&gt;The Most Popular Free AI Digital Human, HeyGem V1.0.3, Latest Update, One-Click Integration Package! Super Strong Lip-Sync Effect, Speed Up, Supports Long Videos, Batch Generation, 8G Video Memory Available!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1ZgovYGE3u/&quot;&gt;&lt;strong&gt;HeyGem One-Click Package Windows Direct Run Without Docker Silicon-Based Open Source Digital Human&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/image-20250304114114272.png&quot;&gt; 
&lt;p&gt;Heygem is a fully offline video synthesis tool designed for Windows systems that can precisely clone your appearance and voice, digitalizing your image. You can create videos by driving virtual avatars through text and voice. No internet connection is required, protecting your privacy while enjoying convenient and efficient digital experiences.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Core Features 
  &lt;ul&gt; 
   &lt;li&gt;Precise Appearance and Voice Cloning: Using advanced AI algorithms to capture human facial features with high precision, including facial features, contours, etc., to build realistic virtual models. It can also precisely clone voices, capturing and reproducing subtle characteristics of human voices, supporting various voice parameter settings to create highly similar cloning effects.&lt;/li&gt; 
   &lt;li&gt;Text and Voice-Driven Virtual Avatars: Understanding text content through natural language processing technology, converting text into natural and fluent speech to drive virtual avatars. Voice input can also be used directly, allowing virtual avatars to perform corresponding actions and facial expressions based on the rhythm and intonation of the voice, making the virtual avatar&#39;s performance more natural and vivid.&lt;/li&gt; 
   &lt;li&gt;Efficient Video Synthesis: Highly synchronizing digital human video images with sound, achieving natural and smooth lip-syncing, intelligently optimizing audio-video synchronization effects.&lt;/li&gt; 
   &lt;li&gt;Multi-language Support: Scripts support eight languages - English, Japanese, Korean, Chinese, French, German, Arabic, and Spanish.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Key Advantages 
  &lt;ul&gt; 
   &lt;li&gt;Fully Offline Operation: No internet connection required, effectively protecting user privacy, allowing users to create in a secure, independent environment, avoiding potential data leaks during network transmission.&lt;/li&gt; 
   &lt;li&gt;User-Friendly: Clean and intuitive interface, easy to use even for beginners with no technical background, quickly mastering the software&#39;s usage to start their digital human creation journey.&lt;/li&gt; 
   &lt;li&gt;Multiple Model Support: Supports importing multiple models and managing them through one-click startup packages, making it convenient for users to choose suitable models based on different creative needs and application scenarios.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Technical Support 
  &lt;ul&gt; 
   &lt;li&gt;Voice Cloning Technology: Using advanced technologies like artificial intelligence to generate similar or identical voices based on given voice samples, covering context, intonation, speed, and other aspects of speech.&lt;/li&gt; 
   &lt;li&gt;Automatic Speech Recognition: Technology that converts human speech vocabulary content into computer-readable input (text format), enabling computers to &quot;understand&quot; human speech.&lt;/li&gt; 
   &lt;li&gt;Computer Vision Technology: Used in video synthesis for visual processing, including facial recognition and lip movement analysis, ensuring virtual avatar lip movements match voice and text content.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Nodejs 18&lt;/li&gt; 
 &lt;li&gt;Docker Images 
  &lt;ul&gt; 
   &lt;li&gt;docker pull guiji2025/fun-asr&lt;/li&gt; 
   &lt;li&gt;docker pull guiji2025/fish-speech-ziming&lt;/li&gt; 
   &lt;li&gt;docker pull guiji2025/heygem.ai&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Windows Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Must have D Drive: Mainly used for storing digital human and project data&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Free space requirement: More than 30GB&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;C Drive: Used for storing service image files&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Free space requirement: More than 100GB&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;If less than 100GB is available, after installing Docker, you can choose a different disk folder with more than 100GB of remaining space at the location shown below.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/output.png&quot; alt=&quot;output&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;System Requirements:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Currently supports Windows 10 19042.1526 or higher&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recommended Configuration:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;CPU: 13th Gen Intel Core i5-13400F&lt;/li&gt; 
   &lt;li&gt;Memory: 32GB&lt;/li&gt; 
   &lt;li&gt;Graphics Card: RTX 4070&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure you have an NVIDIA graphics card with properly installed drivers&lt;/p&gt; &lt;p&gt;NVIDIA driver download link: &lt;a href=&quot;https://www.nvidia.cn/drivers/lookup/&quot;&gt;https://www.nvidia.cn/drivers/lookup/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/nvidia.png&quot; alt=&quot;nvidia&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Installing Windows Docker&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Use the command &lt;code&gt;wsl --list --verbose&lt;/code&gt; to check if WSL is installed. If it shows as below, it&#39;s already installed and no further installation is needed.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/wsl-list.png&quot; alt=&quot;wsl-list&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;WSL installation command: &lt;code&gt;wsl --install&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;May fail due to network issues, try multiple times&lt;/li&gt; 
  &lt;li&gt;During installation, you&#39;ll need to set and remember a new username and password&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Update WSL using &lt;code&gt;wsl --update&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/updatewsl.png&quot; alt=&quot;updatewsl&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Download Docker for Windows&lt;/a&gt;, choose the appropriate installation package based on your CPU architecture.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When you see this interface, installation is successful.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/61eb4c19-3e7a-4791-a266-de4209690cbd.png&quot; alt=&quot;61eb4c19-3e7a-4791-a266-de4209690cbd&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run Docker&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/shortcut.png&quot; alt=&quot;shortcut&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Accept the agreement and skip login on first run&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/accept.png&quot; alt=&quot;accept&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/576746d5-5215-4973-b1ca-c8d7409a6403.png&quot; alt=&quot;576746d5-5215-4973-b1ca-c8d7409a6403&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/9a10b7b2-1eea-48c1-b7af-34129fe04446.png&quot; alt=&quot;9a10b7b2-1eea-48c1-b7af-34129fe04446&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Installing the Server&lt;/h3&gt; 
&lt;p&gt;Installation using Docker, docker-compose as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file is in the &lt;code&gt;/deploy&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Execute &lt;code&gt;docker-compose up -d&lt;/code&gt; in the &lt;code&gt;/deploy&lt;/code&gt; directory, &lt;u&gt;if you want to use the lite version, execute &lt;code&gt;docker-compose -f docker-compose-lite.yml up -d&lt;/code&gt;&lt;/u&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wait patiently (about half an hour, speed depends on network), download will consume about 70GB of traffic, make sure to use WiFi&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When you see three services in Docker, it indicates success&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/README_zh.assets/e29d1922-7c58-46b4-b1e9-961f853f26d4.png&quot; alt=&quot;e29d1922-7c58-46b4-b1e9-961f853f26d4&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Client&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Directly download the &lt;a href=&quot;https://github.com/GuijiAI/HeyGem.ai/releases&quot;&gt;officially built installation package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Double-click &lt;code&gt;HeyGem-x.x.x-setup.exe&lt;/code&gt; to install&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Open APIs&lt;/h2&gt; 
&lt;p&gt;We have opened APIs for model training and video synthesis. After Docker starts, several ports will be exposed locally, accessible through &lt;code&gt;http://127.0.0.1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For specific code, refer to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;src/main/service/model.js&lt;/li&gt; 
 &lt;li&gt;src/main/service/video.js&lt;/li&gt; 
 &lt;li&gt;src/main/service/voice.js&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Model Training&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Separate video into silent video + audio&lt;/li&gt; 
 &lt;li&gt;Place audio in &lt;code&gt;D:\heygem_data\voice\data&lt;/code&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;code&gt;D:\heygem_data\voice\data&lt;/code&gt; is agreed with the &lt;code&gt;guiji2025/fish-speech-ziming&lt;/code&gt; service, can be modified in docker-compose&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt;Call the &lt;code&gt;http://127.0.0.1:18180/v1/preprocess_and_tran&lt;/code&gt; interface 
  &lt;blockquote&gt; 
   &lt;p&gt;Parameter example:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;format&quot;: &quot;.wav&quot;,
  &quot;reference_audio&quot;: &quot;xxxxxx/xxxxx.wav&quot;,
  &quot;lang&quot;: &quot;zh&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;Response example:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;asr_format_audio_url&quot;: &quot;xxxx/x/xxx/xxx.wav&quot;,
  &quot;reference_audio_text&quot;: &quot;xxxxxxxxxxxx&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;&lt;strong&gt;Record the response results as they will be needed for subsequent audio synthesis&lt;/strong&gt;&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Audio Synthesis&lt;/h3&gt; 
&lt;p&gt;Interface: &lt;code&gt;http://127.0.0.1:18180/v1/invoke&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// Request parameters
{
  &quot;speaker&quot;: &quot;{uuid}&quot;, // A unique UUID
  &quot;text&quot;: &quot;xxxxxxxxxx&quot;, // Text content to synthesize
  &quot;format&quot;: &quot;wav&quot;, // Fixed parameter
  &quot;topP&quot;: 0.7, // Fixed parameter
  &quot;max_new_tokens&quot;: 1024, // Fixed parameter
  &quot;chunk_length&quot;: 100, // Fixed parameter
  &quot;repetition_penalty&quot;: 1.2, // Fixed parameter
  &quot;temperature&quot;: 0.7, // Fixed parameter
  &quot;need_asr&quot;: false, // Fixed parameter
  &quot;streaming&quot;: false, // Fixed parameter
  &quot;is_fixed_seed&quot;: 0, // Fixed parameter
  &quot;is_norm&quot;: 0, // Fixed parameter
  &quot;reference_audio&quot;: &quot;{voice.asr_format_audio_url}&quot;, // Return value from previous &quot;Model Training&quot; step
  &quot;reference_text&quot;: &quot;{voice.reference_audio_text}&quot; // Return value from previous &quot;Model Training&quot; step
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Video Synthesis&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Synthesis interface: &lt;code&gt;http://127.0.0.1:8383/easy/submit&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// Request parameters
{
  &quot;audio_url&quot;: &quot;{audioPath}&quot;, // Audio path
  &quot;video_url&quot;: &quot;{videoPath}&quot;, // Video path
  &quot;code&quot;: &quot;{uuid}&quot;, // Unique key
  &quot;chaofen&quot;: 0, // Fixed value
  &quot;watermark_switch&quot;: 0, // Fixed value
  &quot;pn&quot;: 1 // Fixed value
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Progress query: &lt;code&gt;http://127.0.0.1:8383/easy/query?code=${taskCode}&lt;/code&gt;&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;GET request, the parameter &lt;code&gt;taskCode&lt;/code&gt; is the &lt;code&gt;code&lt;/code&gt; from the synthesis interface input above&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Self-Check Steps Before Asking Questions&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Check if all three services are in Running status&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/doc/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.assets/e29d1922-7c58-46b4-b1e9-961f853f26d4.png&quot; alt=&quot;e29d1922-7c58-46b4-b1e9-961f853f26d4&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Confirm that your machine has an NVIDIA graphics card and drivers are correctly installed.&lt;/p&gt; &lt;p&gt;All computing power for this project is local. The three services won&#39;t start without an NVIDIA graphics card or proper drivers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure both server and client are updated to the latest version. The project is newly open-sourced, the community is very active, and updates are frequent. Your issue might have been resolved in a new version.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Server: Go to &lt;code&gt;/deploy&lt;/code&gt; directory and re-execute &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Client: &lt;code&gt;pull&lt;/code&gt; code and re-&lt;code&gt;build&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/GuijiAI/HeyGem.ai/issues&quot;&gt;GitHub Issues&lt;/a&gt; are continuously updated, issues are being resolved and closed daily. Check frequently, your issue might already be resolved.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Question Template&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Problem Description&lt;/p&gt; &lt;p&gt;Describe the reproduction steps in detail, with screenshots if possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Provide Error Logs&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;How to get client logs:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/doc/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.assets/image-20250308205954494.png&quot; alt=&quot;image-20250308205954494&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Server logs:&lt;/p&gt; &lt;p&gt;Find the key location, or click on our three Docker services, and &quot;Copy&quot; as shown below.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/doc/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.assets/image-20250308215812201.png&quot; alt=&quot;image-20250308215812201&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contact Us&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;  James@toolwiz.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/GuijiAI/HeyGem.ai/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ASR based on &lt;a href=&quot;https://github.com/modelscope/FunASR&quot;&gt;fun-asr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;TTS based on &lt;a href=&quot;https://github.com/fishaudio/fish-speech&quot;&gt;fish-speech-ziming&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.star-history.com/#GuijiAI/HeyGem.ai&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=GuijiAI/HeyGem.ai&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Genymobile/scrcpy</title>
      <link>https://github.com/Genymobile/scrcpy</link>
      <description>&lt;p&gt;Display and control your Android device&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;This GitHub repo (&lt;a href=&quot;https://github.com/Genymobile/scrcpy&quot;&gt;https://github.com/Genymobile/scrcpy&lt;/a&gt;) is the only official source for the project. Do not download releases from random websites, even if their name contains &lt;code&gt;scrcpy&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;scrcpy (v3.1)&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/app/data/icon.svg?sanitize=true&quot; width=&quot;128&quot; height=&quot;128&quot; alt=&quot;scrcpy&quot; align=&quot;right&quot;&gt; 
&lt;p&gt;&lt;em&gt;pronounced &quot;&lt;strong&gt;scr&lt;/strong&gt;een &lt;strong&gt;c&lt;/strong&gt;o&lt;strong&gt;py&lt;/strong&gt;&quot;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This application mirrors Android devices (video and audio) connected via USB or &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/connection.md#tcpip-wireless&quot;&gt;TCP/IP&lt;/a&gt; and allows control using the computer&#39;s keyboard and mouse. It does not require &lt;em&gt;root&lt;/em&gt; access or an app installed on the device. It works on &lt;em&gt;Linux&lt;/em&gt;, &lt;em&gt;Windows&lt;/em&gt;, and &lt;em&gt;macOS&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/assets/screenshot-debian-600.jpg&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;It focuses on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;lightness&lt;/strong&gt;: native, displays only the device screen&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;performance&lt;/strong&gt;: 30~120fps, depending on the device&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;quality&lt;/strong&gt;: 1920×1080 or above&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;low latency&lt;/strong&gt;: &lt;a href=&quot;https://github.com/Genymobile/scrcpy/pull/646&quot;&gt;35~70ms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;low startup time&lt;/strong&gt;: ~1 second to display the first image&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;non-intrusiveness&lt;/strong&gt;: nothing is left installed on the Android device&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;user benefits&lt;/strong&gt;: no account, no ads, no internet required&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;freedom&lt;/strong&gt;: free and open source software&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Its features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/audio.md&quot;&gt;audio forwarding&lt;/a&gt; (Android 11+)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/recording.md&quot;&gt;recording&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/virtual_display.md&quot;&gt;virtual display&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;mirroring with &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/device.md#turn-screen-off&quot;&gt;Android device screen off&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/control.md#copy-paste&quot;&gt;copy-paste&lt;/a&gt; in both directions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/video.md&quot;&gt;configurable quality&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/camera.md&quot;&gt;camera mirroring&lt;/a&gt; (Android 12+)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/v4l2.md&quot;&gt;mirroring as a webcam (V4L2)&lt;/a&gt; (Linux-only)&lt;/li&gt; 
 &lt;li&gt;physical &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/keyboard.md#physical-keyboard-simulation&quot;&gt;keyboard&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/mouse.md#physical-mouse-simulation&quot;&gt;mouse&lt;/a&gt; simulation (HID)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/gamepad.md&quot;&gt;gamepad&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/otg.md&quot;&gt;OTG mode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;and more…&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;p&gt;The Android device requires at least API 21 (Android 5.0).&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/audio.md&quot;&gt;Audio forwarding&lt;/a&gt; is supported for API &amp;gt;= 30 (Android 11+).&lt;/p&gt; 
&lt;p&gt;Make sure you &lt;a href=&quot;https://developer.android.com/studio/debug/dev-options#enable&quot;&gt;enabled USB debugging&lt;/a&gt; on your device(s).&lt;/p&gt; 
&lt;p&gt;On some devices (especially Xiaomi), you might get the following error:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;java.lang.SecurityException: Injecting input events requires the caller (or the source of the instrumentation, if any) to have the INJECT_EVENTS permission.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In that case, you need to enable &lt;a href=&quot;https://github.com/Genymobile/scrcpy/issues/70#issuecomment-373286323&quot;&gt;an additional option&lt;/a&gt; &lt;code&gt;USB debugging (Security Settings)&lt;/code&gt; (this is an item different from &lt;code&gt;USB debugging&lt;/code&gt;) to control it using a keyboard and mouse. Rebooting the device is necessary once this option is set.&lt;/p&gt; 
&lt;p&gt;Note that USB debugging is not required to run scrcpy in &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/otg.md&quot;&gt;OTG mode&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Get the app&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/linux.md&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/windows.md&quot;&gt;Windows&lt;/a&gt; (read &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/windows.md#run&quot;&gt;how to run&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/macos.md&quot;&gt;macOS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Must-know tips&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/video.md#size&quot;&gt;Reducing resolution&lt;/a&gt; may greatly improve performance (&lt;code&gt;scrcpy -m1024&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/mouse.md#mouse-bindings&quot;&gt;&lt;em&gt;Right-click&lt;/em&gt;&lt;/a&gt; triggers &lt;code&gt;BACK&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/mouse.md#mouse-bindings&quot;&gt;&lt;em&gt;Middle-click&lt;/em&gt;&lt;/a&gt; triggers &lt;code&gt;HOME&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt; toggles &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/window.md#fullscreen&quot;&gt;fullscreen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;There are many other &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/shortcuts.md&quot;&gt;shortcuts&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage examples&lt;/h2&gt; 
&lt;p&gt;There are a lot of options, &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#user-documentation&quot;&gt;documented&lt;/a&gt; in separate pages. Here are just some common examples.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Capture the screen in H.265 (better quality), limit the size to 1920, limit the frame rate to 60fps, disable audio, and control the device by simulating a physical keyboard:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scrcpy --video-codec=h265 --max-size=1920 --max-fps=60 --no-audio --keyboard=uhid
scrcpy --video-codec=h265 -m1920 --max-fps=60 --no-audio -K  # short version
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Start VLC in a new virtual display (separate from the device display):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scrcpy --new-display=1920x1080 --start-app=org.videolan.vlc
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Record the device camera in H.265 at 1920x1080 (and microphone) to an MP4 file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scrcpy --video-source=camera --video-codec=h265 --camera-size=1920x1080 --record=file.mp4
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Capture the device front camera and expose it as a webcam on the computer (on Linux):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scrcpy --video-source=camera --camera-size=1920x1080 --camera-facing=front --v4l2-sink=/dev/video2 --no-playback
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Control the device without mirroring by simulating a physical keyboard and mouse (USB debugging not required):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scrcpy --otg
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Control the device using gamepad controllers plugged into the computer:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;scrcpy --gamepad=uhid
scrcpy -G  # short version
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User documentation&lt;/h2&gt; 
&lt;p&gt;The application provides a lot of features and configuration options. They are documented in the following pages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/connection.md&quot;&gt;Connection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/video.md&quot;&gt;Video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/audio.md&quot;&gt;Audio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/control.md&quot;&gt;Control&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/keyboard.md&quot;&gt;Keyboard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/mouse.md&quot;&gt;Mouse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/gamepad.md&quot;&gt;Gamepad&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/device.md&quot;&gt;Device&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/window.md&quot;&gt;Window&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/recording.md&quot;&gt;Recording&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/virtual_display.md&quot;&gt;Virtual display&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/tunnels.md&quot;&gt;Tunnels&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/otg.md&quot;&gt;OTG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/camera.md&quot;&gt;Camera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/v4l2.md&quot;&gt;Video4Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/shortcuts.md&quot;&gt;Shortcuts&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Genymobile/scrcpy/wiki&quot;&gt;Translations&lt;/a&gt; (not necessarily up to date)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/build.md&quot;&gt;Build instructions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/doc/develop.md&quot;&gt;Developers&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Articles&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.rom1v.com/2018/03/introducing-scrcpy/&quot;&gt;Introducing scrcpy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.genymotion.com/blog/open-source-project-scrcpy-now-works-wirelessly/&quot;&gt;Scrcpy now works wirelessly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.rom1v.com/2023/03/scrcpy-2-0-with-audio/&quot;&gt;Scrcpy 2.0, with audio&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;You can open an &lt;a href=&quot;https://github.com/Genymobile/scrcpy/issues&quot;&gt;issue&lt;/a&gt; for bug reports, feature requests or general questions.&lt;/p&gt; 
&lt;p&gt;For bug reports, please read the &lt;a href=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&quot;&gt;FAQ&lt;/a&gt; first, you might find a solution to your problem immediately.&lt;/p&gt; 
&lt;p&gt;You can also use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Reddit: &lt;a href=&quot;https://www.reddit.com/r/scrcpy&quot;&gt;&lt;code&gt;r/scrcpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;BlueSky: &lt;a href=&quot;https://bsky.app/profile/scrcpy.bsky.social&quot;&gt;&lt;code&gt;@scrcpy.bsky.social&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/scrcpy_app&quot;&gt;&lt;code&gt;@scrcpy_app&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;I&#39;m &lt;a href=&quot;https://github.com/rom1v&quot;&gt;@rom1v&lt;/a&gt;, the author and maintainer of &lt;em&gt;scrcpy&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;If you appreciate this application, you can &lt;a href=&quot;https://blog.rom1v.com/about/#support-my-open-source-work&quot;&gt;support my open source work&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sponsors/rom1v&quot;&gt;GitHub Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://liberapay.com/rom1v/&quot;&gt;Liberapay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://paypal.me/rom2v&quot;&gt;PayPal&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Licence&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Copyright (C) 2018 Genymobile
Copyright (C) 2018-2025 Romain Vimont

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>flipperdevices/flipperzero-firmware</title>
      <link>https://github.com/flipperdevices/flipperzero-firmware</link>
      <description>&lt;p&gt;Flipper Zero firmware source code&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;/.github/assets/dark_theme_banner.png&quot;&gt; 
 &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;/.github/assets/light_theme_banner.png&quot;&gt; 
 &lt;img alt=&quot;A pixel art of a Dophin with text: Flipper Zero Official Repo&quot; src=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/.github/assets/light_theme_banner.png&quot;&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Flipper Zero Firmware&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://flipperzero.one&quot;&gt;Flipper Zero Official Website&lt;/a&gt;. A simple way to explain to your friends what Flipper Zero can do.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://flipperzero.one/update&quot;&gt;Flipper Zero Firmware Update&lt;/a&gt;. Improvements for your dolphin: latest firmware releases, upgrade tools for PC and mobile devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.flipper.net&quot;&gt;User Documentation&lt;/a&gt;. Learn more about your dolphin: specs, usage guides, and anything you want to ask.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.flipper.net/flipperzero/doxygen&quot;&gt;Developer Documentation&lt;/a&gt;. Dive into the Flipper Zero Firmware source code: build system, firmware structure, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Our main goal is to build a healthy and sustainable community around Flipper, so we&#39;re open to any new ideas and contributions. We also have some rules and taboos here, so please read this page and our &lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; carefully.&lt;/p&gt; 
&lt;h2&gt;I need help&lt;/h2&gt; 
&lt;p&gt;The best place to search for answers is our &lt;a href=&quot;https://docs.flipper.net&quot;&gt;User Documentation&lt;/a&gt;. If you can&#39;t find the answer there, check our &lt;a href=&quot;https://flipp.dev/discord&quot;&gt;Discord Server&lt;/a&gt; or our &lt;a href=&quot;https://forum.flipperzero.one/&quot;&gt;Forum&lt;/a&gt;. If you want to contribute to the firmware development or modify it for your own needs, you can also check our &lt;a href=&quot;https://developer.flipper.net/flipperzero/doxygen&quot;&gt;Developer Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;I want to report an issue&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve found an issue and want to report it, please check our &lt;a href=&quot;https://github.com/flipperdevices/flipperzero-firmware/issues&quot;&gt;Issues&lt;/a&gt; page. Make sure the description contains information about the firmware version you&#39;re using, your platform, and a clear explanation of the steps to reproduce the issue.&lt;/p&gt; 
&lt;h2&gt;I want to contribute code&lt;/h2&gt; 
&lt;p&gt;Before opening a PR, please confirm that your changes must be contained in the firmware. Many ideas can easily be implemented as external applications and published in the &lt;a href=&quot;https://github.com/flipperdevices/flipper-application-catalog&quot;&gt;Flipper Application Catalog&lt;/a&gt;. If you are unsure, reach out to us on the &lt;a href=&quot;https://flipp.dev/discord&quot;&gt;Discord Server&lt;/a&gt; or the &lt;a href=&quot;https://github.com/flipperdevices/flipperzero-firmware/issues&quot;&gt;Issues&lt;/a&gt; page, and we&#39;ll help you find the right place for your code.&lt;/p&gt; 
&lt;p&gt;Also, please read our &lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt; and our &lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/CODING_STYLE.md&quot;&gt;Coding Style&lt;/a&gt;, and make sure your code is compatible with our &lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/LICENSE&quot;&gt;Project License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, open a &lt;a href=&quot;https://github.com/flipperdevices/flipperzero-firmware/pulls&quot;&gt;Pull Request&lt;/a&gt; and make sure that CI/CD statuses are all green.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;p&gt;Flipper Zero Firmware is written in C, with some bits and pieces written in C++ and armv7m assembly languages. An intermediate level of C knowledge is recommended for comfortable programming. C, C++, and armv7m assembly languages are supported for Flipper applications.&lt;/p&gt; 
&lt;h1&gt;Firmware RoadMap&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://miro.com/app/board/uXjVO_3D6xU=/&quot;&gt;Firmware RoadMap Miro Board&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Supported development platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows 10+ with PowerShell and Git (x86_64)&lt;/li&gt; 
 &lt;li&gt;macOS 12+ with Command Line tools (x86_64, arm64)&lt;/li&gt; 
 &lt;li&gt;Ubuntu 20.04+ with build-essential and Git (x86_64)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported in-circuit debuggers (optional but highly recommended):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://shop.flipperzero.one/products/wifi-devboard&quot;&gt;Flipper Zero Wi-Fi Development Board&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CMSIS-DAP compatible: Raspberry Pi Debug Probe and etc...&lt;/li&gt; 
 &lt;li&gt;ST-Link (v2, v3, v3mods)&lt;/li&gt; 
 &lt;li&gt;J-Link&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Flipper Build System will take care of all the other dependencies.&lt;/p&gt; 
&lt;h2&gt;Cloning source code&lt;/h2&gt; 
&lt;p&gt;Make sure you have enough space and clone the source code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone --recursive https://github.com/flipperdevices/flipperzero-firmware.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;Build firmware using Flipper Build Tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./fbt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Flashing firmware using an in-circuit debugger&lt;/h2&gt; 
&lt;p&gt;Connect your in-circuit debugger to your Flipper and flash firmware using Flipper Build Tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./fbt flash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Flashing firmware using USB&lt;/h2&gt; 
&lt;p&gt;Make sure your Flipper is on, and your firmware is functioning. Connect your Flipper with a USB cable and flash firmware using Flipper Build Tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./fbt flash_usb
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/documentation/fbt.md&quot;&gt;Flipper Build Tool&lt;/a&gt; - building, flashing, and debugging Flipper software&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/documentation/AppsOnSDCard.md&quot;&gt;Applications&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/documentation/AppManifests.md&quot;&gt;Application Manifest&lt;/a&gt; - developing, building, deploying, and debugging Flipper applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/documentation/KeyCombo.md&quot;&gt;Hardware combos and Un-bricking&lt;/a&gt; - recovering your Flipper from the most nasty situations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/documentation/file_formats&quot;&gt;Flipper File Formats&lt;/a&gt; - everything about how Flipper stores your data and how you can work with it&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/flipperdevices/flipperzero-firmware/dev/documentation/UniversalRemotes.md&quot;&gt;Universal Remotes&lt;/a&gt; - contributing your infrared remote to the universal remote database&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://miro.com/app/board/uXjVO_3D6xU=/&quot;&gt;Firmware Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;And much more in the &lt;a href=&quot;https://developer.flipper.net/flipperzero/doxygen&quot;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Project structure&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;applications&lt;/code&gt; - Applications and services used in firmware&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;applications_users&lt;/code&gt; - Place for your additional applications and services&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;assets&lt;/code&gt; - Assets used by applications and services&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;documentation&lt;/code&gt; - Documentation generation system configs and input files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;furi&lt;/code&gt; - Furi Core: OS-level primitives and helpers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lib&lt;/code&gt; - Our and 3rd party libraries, drivers, tools and etc...&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;site_scons&lt;/code&gt; - Build system configuration and modules&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt; - Supplementary scripts and various python libraries&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;targets&lt;/code&gt; - Firmware targets: platform specific code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Also, see &lt;code&gt;ReadMe.md&lt;/code&gt; files inside those directories for further details.&lt;/p&gt; 
&lt;h1&gt;Links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Discord: &lt;a href=&quot;https://flipp.dev/discord&quot;&gt;flipp.dev/discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;https://flipperzero.one&quot;&gt;flipperzero.one&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Forum: &lt;a href=&quot;https://forum.flipperzero.one/&quot;&gt;forum.flipperzero.one&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kickstarter: &lt;a href=&quot;https://www.kickstarter.com/projects/flipper-devices/flipper-zero-tamagochi-for-hackers&quot;&gt;kickstarter.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;SAST Tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pvs-studio.com/pvs-studio/?utm_source=website&amp;amp;utm_medium=github&amp;amp;utm_campaign=open_source&quot;&gt;PVS-Studio&lt;/a&gt; - static analyzer for C, C++, C#, and Java code.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>bitaxeorg/ESP-Miner</title>
      <link>https://github.com/bitaxeorg/ESP-Miner</link>
      <description>&lt;p&gt;A bitcoin ASIC miner for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://discord.gg/3E8ca2dkcC&quot;&gt;&lt;img src=&quot;https://dcbadge.vercel.app/api/server/3E8ca2dkcC&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/skot/esp-miner/total&quot; alt=&quot;GitHub Downloads (all assets, all releases)&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/t/skot/esp-miner&quot; alt=&quot;GitHub commit activity&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/skot/esp-miner&quot; alt=&quot;GitHub contributors&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;ESP-Miner&lt;/h1&gt; 
&lt;p&gt;esp-miner is open source ESP32 firmware for the &lt;a href=&quot;https://github.com/skot/bitaxe&quot;&gt;Bitaxe&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you are looking for premade images to load on your Bitaxe, check out the &lt;a href=&quot;https://github.com/skot/ESP-Miner/releases&quot;&gt;releases&lt;/a&gt; page. Maybe you want &lt;a href=&quot;https://github.com/skot/ESP-Miner/raw/master/flashing.md&quot;&gt;instructions&lt;/a&gt; for loading factory images.&lt;/p&gt; 
&lt;h1&gt;Bitaxetool&lt;/h1&gt; 
&lt;p&gt;We also have a command line python tool for flashing Bitaxe and updating the config called Bitaxetool&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bitaxetool Requires Python3.4 or later and pip&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Install bitaxetool from pip. pip is included with Python 3.4 but if you need to install it check &lt;a href=&quot;https://pip.pypa.io/en/stable/installation/&quot;&gt;https://pip.pypa.io/en/stable/installation/&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install --upgrade bitaxetool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The bitaxetool includes all necessary library for flashing the binaries to the Bitaxe Hardware.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Flash a &quot;factory&quot; image to a Bitaxe to reset to factory settings. Make sure to choose an image built for your hardware version (401) in this case:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;bitaxetool --firmware ./esp-miner-factory-401-v2.4.2.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Flash just the NVS config to a bitaxe:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;bitaxetool --config ./config-401.cvs
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Flash both a factory image &lt;em&gt;and&lt;/em&gt; a config to your Bitaxe: note the settings in the config file will overwrite the config already baked into the factory image:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;bitaxetool --config ./config-401.cvs --firmware ./esp-miner-factory-401-v2.4.2.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;AxeOS API&lt;/h2&gt; 
&lt;p&gt;The esp-miner UI is called AxeOS and provides an API to expose actions and information.&lt;/p&gt; 
&lt;p&gt;For more details take a look at &lt;code&gt;main/http_server/http_server.c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Things that can be done are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get System Info&lt;/li&gt; 
 &lt;li&gt;Get Swarm Info&lt;/li&gt; 
 &lt;li&gt;Update Swarm&lt;/li&gt; 
 &lt;li&gt;Swarm Options&lt;/li&gt; 
 &lt;li&gt;System Restart Action&lt;/li&gt; 
 &lt;li&gt;Update System Settings Action&lt;/li&gt; 
 &lt;li&gt;System Options&lt;/li&gt; 
 &lt;li&gt;Update OTA Firmware&lt;/li&gt; 
 &lt;li&gt;Update OTA WWW&lt;/li&gt; 
 &lt;li&gt;WebSocket&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some API examples in curl:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Get system information
curl http://YOUR-BITAXE-IP/api/system/info
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Get swarm information
curl http://YOUR-BITAXE-IP/api/swarm/info
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# System restart action
curl -X POST http://YOUR-BITAXE-IP/api/system/restart
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Administration&lt;/h2&gt; 
&lt;p&gt;The firmware hosts a small web server on port 80 for administrative purposes. Once the Bitaxe device is connected to the local network, the admin web front end may be accessed via a web browser connected to the same network at &lt;code&gt;http://&amp;lt;IP&amp;gt;&lt;/code&gt;, replacing &lt;code&gt;IP&lt;/code&gt; with the LAN IP address of the Bitaxe device, or &lt;code&gt;http://bitaxe&lt;/code&gt;, provided your network supports mDNS configuration.&lt;/p&gt; 
&lt;h3&gt;Recovery&lt;/h3&gt; 
&lt;p&gt;In the event that the admin web front end is inaccessible, for example because of an unsuccessful firmware update (&lt;code&gt;www.bin&lt;/code&gt;), a recovery page can be accessed at &lt;code&gt;http://&amp;lt;IP&amp;gt;/recovery&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the ESP-IDF toolchain from &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/&quot;&gt;https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install nodejs/npm from &lt;a href=&quot;https://nodejs.org/en/download&quot;&gt;https://nodejs.org/en/download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;(Optional) Install the ESP-IDF extension for VSCode from &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=espressif.esp-idf-extension&quot;&gt;https://marketplace.visualstudio.com/items?itemName=espressif.esp-idf-extension&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;At the root of the repository, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;idf.py build &amp;amp;&amp;amp; ./merge_bin.sh ./esp-miner-merged.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: the merge_bin.sh script is a custom script that merges the bootloader, partition table, and the application binary into a single file.&lt;/p&gt; 
&lt;p&gt;Note: if using VSCode, you may have to configure the settings.json file to match your esp hardware version. For example, if your bitaxe has something other than an esp32-s3, you will need to change the version in the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file.&lt;/p&gt; 
&lt;h3&gt;Flashing&lt;/h3&gt; 
&lt;p&gt;With the bitaxe connected to your computer via USB, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bitaxetool --config ./config-xxx.cvs --firmware ./esp-miner-merged.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where xxx is the config file for your hardware version. You can see the list of available config files in the root of the repository.&lt;/p&gt; 
&lt;p&gt;Note: if you are developing within a dev container, you will need to run the bitaxetool command from outside the container. Otherwise, you will get an error about the device not being found.&lt;/p&gt; 
&lt;h2&gt;Attributions&lt;/h2&gt; 
&lt;p&gt;The display font is Portfolio 6x8 from &lt;a href=&quot;https://int10h.org/oldschool-pc-fonts/&quot;&gt;https://int10h.org/oldschool-pc-fonts/&lt;/a&gt; by VileR.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RfidResearchGroup/proxmark3</title>
      <link>https://github.com/RfidResearchGroup/proxmark3</link>
      <description>&lt;p&gt;Iceman Fork - Proxmark3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Iceman Fork - Proxmark3&lt;/h1&gt; 
&lt;p&gt;The Proxmark3 is the swiss-army tool of RFID, allowing for interactions with the vast majority of RFID tags on a global scale. Originally built by Jonathan Westhues, the device is now the goto tool for RFID Analysis for the enthusiast. Iceman repository is considered to be the pinnacle of features and functionality, enabling a huge range of extremely useful and convenient commands and LUA scripts to automate chip identification, penetration testing, and programming&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Latest Release&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Coverity&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Contributors&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/RfidResearchGroup/proxmark3/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/rfidresearchgroup/proxmark3&quot; alt=&quot;Latest release&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://scan.coverity.com/projects/proxmark3-rrg-iceman-repo&quot;&gt;&lt;img src=&quot;https://scan.coverity.com/projects/19334/badge.svg?sanitize=true&quot; alt=&quot;Coverity Status&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/rfidresearchgroup/proxmark3&quot; alt=&quot;GitHub contributors&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Actions OSX CI&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Actions Ubuntu CI&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Actions Windows CI&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/macos.yml&quot;&gt;&lt;img src=&quot;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/macos.yml/badge.svg?branch=master&quot; alt=&quot;MacOS Build and Test&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/ubuntu.yml&quot;&gt;&lt;img src=&quot;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/ubuntu.yml/badge.svg?branch=master&quot; alt=&quot;Ubuntu Build and Test&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/windows.yml&quot;&gt;&lt;img src=&quot;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/windows.yml/badge.svg?branch=master&quot; alt=&quot;Windows Build and Test&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#iceman-fork---proxmark3&quot;&gt;Iceman Fork - Proxmark3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#proxmark3-installation-and-overview&quot;&gt;PROXMARK3 INSTALLATION AND OVERVIEW&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#notes--helpful-documents&quot;&gt;Notes / helpful documents&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#how-to-build&quot;&gt;How to build?&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#proxmark3-rdv4&quot;&gt;Proxmark3 RDV4&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#generic-proxmark3-platforms&quot;&gt;Generic Proxmark3 platforms&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#what-has-changed&quot;&gt;What has changed?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#development&quot;&gt;Development&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#supported-operative-systems&quot;&gt;Supported operative systems&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#precompiled-binaries&quot;&gt;Precompiled binaries&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#proxmark3-gui&quot;&gt;Proxmark3 GUI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#official-channels&quot;&gt;Official channels&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#maintainers&quot;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#citation&quot;&gt;Citation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#copyright-and-licensing-terms&quot;&gt;Copyright and licensing terms&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;PROXMARK3 INSTALLATION AND OVERVIEW&lt;/h1&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Installation&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Use of the Proxmark3&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Linux-Installation-Instructions.md&quot;&gt;Linux - Setup and Build&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/0_Compilation-Instructions.md&quot;&gt;Compilation Instructions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/ModemManager-Must-Be-Discarded.md&quot;&gt;Linux - Important notes on ModemManager&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/1_Validation.md&quot;&gt;Validating Proxmark3 Client Functionality&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/macOS-Homebrew-Installation-Instructions.md&quot;&gt;macOS - Homebrew &amp;amp; Upgrading HomeBrew Tap Formula&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/2_Configuration-and-Verification.md&quot;&gt;First Use and Verification&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/macOS-MacPorts-Installation-Instructions.md&quot;&gt;macOS - MacPorts&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/3_Commands-and-Features.md&quot;&gt;Commands &amp;amp; Features&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/macOS-Compile-From-Source-Instructions.md&quot;&gt;macOS - Setup and Build&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Windows-Installation-Instructions.md&quot;&gt;Windows - Setup and Build&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/termux_notes.md&quot;&gt;Termux / Android - Setup and Build&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/iOS-Installation-Instructions.md&quot;&gt;iOS - Setup and Build&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/bt_manual_v10.md&quot;&gt;Blue Shark Manual&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cheatsheet.md&quot;&gt;Command Cheat Sheet&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md&quot;&gt;Advanced Compilation Parameters&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/RfidResearchGroup/proxmark3/wiki/More-cheat-sheets&quot;&gt;More Cheat Sheets&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Troubleshooting.md&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/commands.md&quot;&gt;Complete Client Command Set&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/jtag_notes.md&quot;&gt;JTAG&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/T5577_Guide.md&quot;&gt;T5577 Introduction Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Notes / helpful documents&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/uart_notes.md&quot;&gt;Notes on UART&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/termux_notes.md&quot;&gt;Notes on Termux / Android&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/path_notes.md&quot;&gt;Notes on paths&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/new_frame_format.md&quot;&gt;Notes on frame format&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/trace_notes.md&quot;&gt;Notes on tracelog / wireshark&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/emv_notes.md&quot;&gt;Notes on EMV&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/ext_flash_notes.md&quot;&gt;Notes on external flash&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/loclass_notes.md&quot;&gt;Notes on loclass&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Development/Coverity-Scan-Config-and-Run.md&quot;&gt;Notes on Coverity Scan Config &amp;amp; Run&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/extensions_notes.md&quot;&gt;Notes on file formats used with Proxmark3&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/mfu_binary_format_notes.md&quot;&gt;Notes on MFU binary format&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/fpga_arm_notes.md&quot;&gt;Notes on FPGA &amp;amp; ARM&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/armsrc/Standalone/readme.md&quot;&gt;Developing standalone mode&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/RfidResearchGroup/proxmark3/wiki/Standalone-mode&quot;&gt;Wiki about standalone mode&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/magic_cards_notes.md&quot;&gt;Notes on Magic UID cards&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/colors_notes.md&quot;&gt;Notes on Color usage&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Development/Makefile-vs-CMake.md&quot;&gt;Makefile vs CMake&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cloner_notes.md&quot;&gt;Notes on Cloner guns&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cliparser.md&quot;&gt;Notes on cliparser usage&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/clocks.md&quot;&gt;Notes on clocks&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/desfire.md&quot;&gt;Notes on MIFARE DESFire&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cipurse.md&quot;&gt;Notes on CIPURSE&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/ndef_type4a.md&quot;&gt;Notes on NDEF type4a&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/hid_downgrade.md&quot;&gt;Notes on downgrade attacks&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;How to build?&lt;/h1&gt; 
&lt;h2&gt;Proxmark3 RDV4&lt;/h2&gt; 
&lt;p&gt;See the instruction links in the tables above to build, flash and run for your Proxmark3 RDV4 device.&lt;/p&gt; 
&lt;h2&gt;Generic Proxmark3 platforms&lt;/h2&gt; 
&lt;p&gt;In order to build this repo for generic Proxmark3 platforms we urge you to read &lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md&quot;&gt;Advanced compilation parameters&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We define generic Proxmark3 platforms as following devices.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Supported&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RDV1, RDV2, RDV3 easy&lt;/li&gt; 
 &lt;li&gt;Ryscorp green PCB version&lt;/li&gt; 
 &lt;li&gt;Radiowar black PCB version&lt;/li&gt; 
 &lt;li&gt;numerous Chinese adapted versions of the RDV3 easy (kkmoon, PiSwords etc)&lt;/li&gt; 
 &lt;li&gt;Proxmark3 SE (Special Edition) (BLE enabled)&lt;/li&gt; 
 &lt;li&gt;Proxmark3 X 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Community tested&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: unknown device hw&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Not supported&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚠ Proxmark Evolution (EVO) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: unknown pin assignments.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;⚠ Ryscorp Proxmark3 Pro 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: device has different fpga and unknown pin assignments.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Company have disappeared, leaving their customers in the dark.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Experimental support&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚠ iCopy-X 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: currently incompatible with iCopy-X GUI as Proxmark client commands using different syntax&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: see also &lt;a href=&quot;https://github.com/iCopy-X-Community/&quot;&gt;icopyx-community repos&lt;/a&gt; for upstream sources, reversed hw etc.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Uses DRM to lock down tags, ignores the open source licences. Use on your own risk.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Unknown support status&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚠ VX 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: unknown device hw&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;⚠ Proxmark3 Ultimate 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: unknown device hw&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When it comes to these new unknown models we are depending on the community to report in if this repo works and what they did to make it work.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;256KB flash memory size of generic Proxmark3 platforms&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠ &lt;strong&gt;Note&lt;/strong&gt;: You need to keep a eye on how large your ARM chip built-in flash memory is. With 512KB you are fine but if its 256KB you need to compile this repo with even less functionality. When running the &lt;code&gt;./pm3-flash-all&lt;/code&gt; you can see which size your device have if you have the bootloader from this repo installed. Otherwise you will find the size reported in the start message when running the Proxmark3 client &lt;code&gt;./pm3&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md#256KB-versions&quot;&gt;OBS! Read the 256KB flash memory advisory&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;What has changed?&lt;/h1&gt; 
&lt;p&gt;Proxmark3 RDV4 hardware modifications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;added flash memory 256KB&lt;/li&gt; 
 &lt;li&gt;added smart card module&lt;/li&gt; 
 &lt;li&gt;added FPC connector for peripherals such as Bluetooth+battery addon&lt;/li&gt; 
 &lt;li&gt;improved antennas 
  &lt;ul&gt; 
   &lt;li&gt;swappable&lt;/li&gt; 
   &lt;li&gt;LF Q factor switch&lt;/li&gt; 
   &lt;li&gt;LF 125/134 frequency switch&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;tiny PCB form factor&lt;/li&gt; 
 &lt;li&gt;ABS case&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This repo vs official Proxmark3 repo:&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/CHANGELOG.md&quot;&gt;Changelog file&lt;/a&gt; which we try to keep updated.&lt;/p&gt; 
&lt;p&gt;In short this repo gives you a completely different user experience when it comes to Proxmark3.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports command tab complete&lt;/li&gt; 
 &lt;li&gt;Richer CLI with use of colors / emojis&lt;/li&gt; 
 &lt;li&gt;Help text system implemented everywhere&lt;/li&gt; 
 &lt;li&gt;Hints system&lt;/li&gt; 
 &lt;li&gt;User preference settings&lt;/li&gt; 
 &lt;li&gt;Extensive testing with continuous integration build systems on Linux, OSX and Windows, and regular usage of static analysis tools like 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://scan.coverity.com/projects/proxmark3-rrg-iceman-repo/&quot;&gt;Coverity Scan&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Cppcheck (v2.6)&lt;/li&gt; 
   &lt;li&gt;GCC and Clang aggressive enforcement of diagnostic flags&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Auto detection of serial ports and seamless integration with Bluetooth addon&lt;/li&gt; 
 &lt;li&gt;Reconnect to device from inside client&lt;/li&gt; 
 &lt;li&gt;Supports tearoff attacks&lt;/li&gt; 
 &lt;li&gt;Supports NFC NDEF type1, type2, type4a, type4b, mifare, barcode&lt;/li&gt; 
 &lt;li&gt;Supports pm3 client scripts, lua scripts, python scripts&lt;/li&gt; 
 &lt;li&gt;Most comprehensive collection of scripts available&lt;/li&gt; 
 &lt;li&gt;Wiegand encoding, decoding.&lt;/li&gt; 
 &lt;li&gt;Supports EMV&lt;/li&gt; 
 &lt;li&gt;Supports CIPURSE&lt;/li&gt; 
 &lt;li&gt;Most standalone modes available with easy compilation&lt;/li&gt; 
 &lt;li&gt;Extensive test script for client and external tools&lt;/li&gt; 
 &lt;li&gt;Most comprehensive compiled known keys dictionaries&lt;/li&gt; 
 &lt;li&gt;Slimed down usb communications with NG-frames&lt;/li&gt; 
 &lt;li&gt;The most compiled public known key recovery software&lt;/li&gt; 
 &lt;li&gt;The fastest implementations of said software&lt;/li&gt; 
 &lt;li&gt;Support multiple fileformats for dump files (BIN/EML/JSON)&lt;/li&gt; 
 &lt;li&gt;Interoperability of said fileformats with libnfc, MFC tool app etc&lt;/li&gt; 
 &lt;li&gt;Supports more RFID based protocols than ever&lt;/li&gt; 
 &lt;li&gt;Easy install for package maintainers, distro maintainers&lt;/li&gt; 
 &lt;li&gt;Supports cmake, make&lt;/li&gt; 
 &lt;li&gt;Builds without errors or warnings on more OS/platforms than ever&lt;/li&gt; 
 &lt;li&gt;Available as package on known distros like Gentoo, Kali, Termux, Macports, Homebrew&lt;/li&gt; 
 &lt;li&gt;Much more documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠ &lt;strong&gt;Note&lt;/strong&gt;: This is a bleeding edge repository. The maintainers actively is working out of this repository and will be periodically re-structuring the code to make it easier to comprehend, navigate, build, test, and contribute to, so &lt;strong&gt;DO expect significant changes to code layout on a regular basis&lt;/strong&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;👉 &lt;strong&gt;Remember!&lt;/strong&gt; If you intend to contribute to the code, please read the &lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/CONTRIBUTING.md&quot;&gt;coding style notes&lt;/a&gt; first. We usually merge your contributions fast since we do like the idea of getting a functionality in the Proxmark3 and weed out the bugs afterwards.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/RfidResearchGroup/proxmark3/wiki/Public-Roadmap&quot;&gt;public roadmap&lt;/a&gt; is an excellent start to read if you are interesting in contributing.&lt;/p&gt; 
&lt;h2&gt;Supported operative systems&lt;/h2&gt; 
&lt;p&gt;This repo compiles nicely on&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;WSL1 on Windows 10&lt;/li&gt; 
 &lt;li&gt;Proxspace environment &lt;a href=&quot;https://github.com/Gator96100/ProxSpace/releases&quot;&gt;release v3.xx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Windows/MinGW environment&lt;/li&gt; 
 &lt;li&gt;Ubuntu, ParrotOS, Gentoo, Pentoo, Kali, NetHunter, Arch Linux, Fedora, Debian, Raspbian&lt;/li&gt; 
 &lt;li&gt;Android / Termux&lt;/li&gt; 
 &lt;li&gt;macOS / Homebrew (or MacPorts, experimental) / Apple Silicon M1&lt;/li&gt; 
 &lt;li&gt;iOS (Jailbroken, rootful)&lt;/li&gt; 
 &lt;li&gt;Docker container 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/secopsconsult/proxmark3&quot;&gt; Iceman repo based ubuntu 18.04 container &lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/iceman1001/proxmark3/&quot;&gt; Iceman fork based container v1.7 &lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Precompiled binaries&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.proxmarkbuilds.org/&quot;&gt;Proxmark3 precompiled builds&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Proxmark3 GUI&lt;/h2&gt; 
&lt;p&gt;The official PM3-GUI from Gaucho will not work. Not to mention is quite old and not maintained any longer.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/burma69/PM3UniversalGUI&quot;&gt;Proxmark3 Universal GUI&lt;/a&gt; will work more or less.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wh201906/Proxmark3GUI/&quot;&gt;Proxmark3 GUI cross-compiled&lt;/a&gt; which is recently updated and claims to support latest source of this repo.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Phreak87/Proxmark3_GUI&quot;&gt;Proxmark3_GUI&lt;/a&gt; simple gui in vb.net&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Official channels&lt;/h2&gt; 
&lt;p&gt;Where do you find the community?&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.ly/d4_C&quot;&gt;RFID Hacking community discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://web.libera.chat/?channels=#proxmark3&quot;&gt;Proxmark3 IRC channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/proxmark3/&quot;&gt;Proxmark3 sub reddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.proxmark.org/forum/index.php&quot;&gt;Proxmark3 forum&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;p&gt;To all distro, package maintainers, we tried to make your life easier.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; is now available and if you want to know more.&lt;/p&gt; 
&lt;p&gt;This document will be helpful for you&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Development/Maintainers.md&quot;&gt;Notes for maintainers&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;Use this bibtex to cite this repository globally:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@misc{proxmark3,
  author = {C. {Herrmann} and P. {Teuwen} and O. {Moiseenko} and M. {Walker} and others},
  title = {{Proxmark3 -- Iceman repo}},
  howpublished = {\url{https://github.com/RfidResearchGroup/proxmark3}},
  keywords = {rfid nfc iceman proxmark3 125khz 134khz 13.56mhz},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to refer to a specific state of the repository, use a commit number or a date of access, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  note = {Accessed: commit 12327f71a27da23831901847886aaf20e8ad3ca0}
  note = {Accessed: 2021-01-01}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Copyright and licensing terms&lt;/h2&gt; 
&lt;p&gt;Each contribution is under the copyright of its author. See &lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/AUTHORS.md&quot;&gt;AUTHORS&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Proxmark3 source code is covered by the following licensing terms, usually referred as &lt;strong&gt;GPLv3 or later&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A copy of the GPLv3 is available in &lt;a href=&quot;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/LICENSE.txt&quot;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some dependencies may be under other free licensing terms compatible with the Proxmark3 licensing terms, see their respective description.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iNavFlight/inav</title>
      <link>https://github.com/iNavFlight/inav</link>
      <description>&lt;p&gt;INAV: Navigation-enabled flight control software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;INAV - navigation capable flight controller&lt;/h1&gt; 
&lt;h1&gt;F411 PSA&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;INAV no longer accepts targets based on STM32 F411 MCU.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;INAV 7 was the last INAV official release available for F411 based flight controllers. INAV 8 is not officially available for F411 boards and the team has not tested either. Issues that can&#39;t be reproduced on other MCUs may not be fixed and the targets for F411 targets may eventually be completelly removed from future releases.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;ICM426xx IMUs PSA&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The filtering settings for the ICM426xx has changed to match what is used by Ardupilot and Betaflight in INAV 7.1. When upgrading from older versions you may need to recalibrate the Accelerometer and if you are not using INAV&#39;s default tune you may also want to check if the tune is still good.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;M7, M6 and older UBLOX GPS units PSA&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;INAV 8.0 will mark those GPS as deprecated and INAV 9.0.0 will require UBLOX units with Protocol version 15.00 or newer. This means that you need a GPS unit based on UBLOX M8 or newer.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you want to check the protocol version of your unit, it is displayed in INAV&#39;s 7.0.0+ status cli command. INAV 8.0.0 will warn you if your GPS is too old. &lt;code&gt;GPS: HW Version: Unknown Proto: 0.00 Baud: 115200 (UBLOX Proto &amp;gt;= 15.0 required)&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;M8, M9 and M10 GPS are the most common units in use today, are readly available and have similar capabilities. Mantaining and testing GPS changes across this many UBLOX versions is a challenge and takes a lot of time. Removing the support for older devices will simplify code.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;http://static.rcgroups.net/forums/attachments/6/1/0/3/7/6/a9088858-102-inav.png&quot; alt=&quot;INAV&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;PosHold, Navigation and RTH without compass PSA&lt;/h1&gt; 
&lt;p&gt;Attention all drone pilots and enthusiasts,&lt;/p&gt; 
&lt;p&gt;Are you ready to take your flights to new heights with INAV 7.1? We&#39;ve got some important information to share with you.&lt;/p&gt; 
&lt;p&gt;INAV 7.1 brings an exciting update to navigation capabilities. Now, you can soar through the skies, navigate waypoints, and even return to home without relying on a compass. Yes, you heard that right! But before you launch into the air, there&#39;s something crucial to consider.&lt;/p&gt; 
&lt;p&gt;While INAV 7.1 may not require a compass for basic navigation functions, we strongly advise you to install one for optimal flight performance. Here&#39;s why:&lt;/p&gt; 
&lt;p&gt;🛰️ Better Flight Precision: A compass provides essential data for accurate navigation, ensuring smoother and more precise flight paths.&lt;/p&gt; 
&lt;p&gt;🌐 Enhanced Reliability: With a compass onboard, your drone can maintain stability even in challenging environments, low speeds and strong wind.&lt;/p&gt; 
&lt;p&gt;🚀 Minimize Risks: Although INAV 7.1 can get you where you need to go without a compass, flying without one may result in a bumpier ride and increased risk of drift or inaccurate positioning.&lt;/p&gt; 
&lt;p&gt;Remember, safety and efficiency are paramount when operating drones. By installing a compass, you&#39;re not just enhancing your flight experience, but also prioritizing safety for yourself and those around you.&lt;/p&gt; 
&lt;p&gt;So, before you take off on your next adventure, make sure to equip your drone with a compass. It&#39;s the smart choice for smoother flights and better navigation.&lt;/p&gt; 
&lt;p&gt;Fly safe, fly smart with INAV 7.1 and a compass by your side!&lt;/p&gt; 
&lt;h1&gt;INAV Community&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/peg2hhbYwN&quot;&gt;INAV Discord Server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/INAVOfficial&quot;&gt;INAV Official on Facebook&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Runs on the most popular F4, AT32, F7 and H7 flight controllers&lt;/li&gt; 
 &lt;li&gt;On Screen Display (OSD) - both character and pixel style&lt;/li&gt; 
 &lt;li&gt;DJI OSD integration: all elements, system messages and warnings&lt;/li&gt; 
 &lt;li&gt;Outstanding performance out of the box&lt;/li&gt; 
 &lt;li&gt;Position Hold, Altitude Hold, Return To Home and Waypoint Missions&lt;/li&gt; 
 &lt;li&gt;Excellent support for fixed wing UAVs: airplanes, flying wings&lt;/li&gt; 
 &lt;li&gt;Blackbox flight recorder logging&lt;/li&gt; 
 &lt;li&gt;Advanced gyro filtering&lt;/li&gt; 
 &lt;li&gt;Fully configurable mixer that allows to run any hardware you want: multirotor, fixed wing, rovers, boats and other experimental devices&lt;/li&gt; 
 &lt;li&gt;Multiple sensor support: GPS, Pitot tube, sonar, lidar, temperature, ESC with BlHeli_32 telemetry&lt;/li&gt; 
 &lt;li&gt;Logic Conditions, Global Functions and Global Variables: you can program INAV with a GUI&lt;/li&gt; 
 &lt;li&gt;SmartAudio and IRC Tramp VTX support&lt;/li&gt; 
 &lt;li&gt;Telemetry: SmartPort, FPort, MAVlink, LTM, CRSF&lt;/li&gt; 
 &lt;li&gt;Multi-color RGB LED Strip support&lt;/li&gt; 
 &lt;li&gt;And many more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a list of features, changes and some discussion please review consult the releases &lt;a href=&quot;https://github.com/iNavFlight/inav/releases&quot;&gt;page&lt;/a&gt; and the documentation.&lt;/p&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;h3&gt;INAV Configurator&lt;/h3&gt; 
&lt;p&gt;Official tool for INAV can be downloaded &lt;a href=&quot;https://github.com/iNavFlight/inav-configurator/releases&quot;&gt;here&lt;/a&gt;. It can be run on Windows, MacOS and Linux machines and standalone application.&lt;/p&gt; 
&lt;h3&gt;INAV Blackbox Explorer&lt;/h3&gt; 
&lt;p&gt;Tool for Blackbox logs analysis is available &lt;a href=&quot;https://github.com/iNavFlight/blackbox-log-viewer/releases&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;INAV Blackbox Tools&lt;/h3&gt; 
&lt;p&gt;Command line tools (&lt;code&gt;blackbox_decode&lt;/code&gt;, &lt;code&gt;blackbox_render&lt;/code&gt;) for Blackbox log conversion and analysis &lt;a href=&quot;https://github.com/iNavFlight/blackbox-tools&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Telemetry screen for EdgeTX and OpenTX&lt;/h3&gt; 
&lt;p&gt;Users of EdgeTX and OpenTX radios (Taranis, Horus, Jumper, Radiomaster, Nirvana) can use INAV OpenTX Telemetry Widget screen. Software and installation instruction are available here: &lt;a href=&quot;https://github.com/iNavFlight/OpenTX-Telemetry-Widget&quot;&gt;https://github.com/iNavFlight/OpenTX-Telemetry-Widget&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;OSD layout Copy, Move, or Replace helper tool&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.mrd-rc.com/tutorials-tools-and-testing/useful-tools/inav-osd-switcher-tool/&quot;&gt;Easy INAV OSD switcher tool&lt;/a&gt; allows you to easily switch your OSD layouts around in INAV. Choose the from and to OSD layouts, and the method of transfering the layouts.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/iNavFlight/inav/raw/master/docs/Installation.md&quot;&gt;https://github.com/iNavFlight/inav/blob/master/docs/Installation.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation, support and learning resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLOUQ8o2_nCLkZlulvqsX_vRMfXd5zM7Ha&quot;&gt;INAV 5 on a flying wing full tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLOUQ8o2_nCLkfcKsWobDLtBNIBzwlwRC8&quot;&gt;INAV on a multirotor drone tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Fixed_Wing_Setup_Guide.pdf&quot;&gt;Fixed Wing Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Autolaunch.pdf&quot;&gt;Autolaunch Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Modes.pdf&quot;&gt;Modes Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Wing_Tuning_Masterclass.pdf&quot;&gt;Wing Tuning Masterclass&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav/tree/master/docs&quot;&gt;Official documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav/wiki&quot;&gt;Official Wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLOUQ8o2_nCLloACrA6f1_daCjhqY2x0fB&quot;&gt;Video series by Paweł Spychalski&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav/tree/master/docs/boards&quot;&gt;Target documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome and encouraged. You can contribute in many ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation updates and corrections.&lt;/li&gt; 
 &lt;li&gt;How-To guides - received help? help others!&lt;/li&gt; 
 &lt;li&gt;Bug fixes.&lt;/li&gt; 
 &lt;li&gt;New features.&lt;/li&gt; 
 &lt;li&gt;Telling us your ideas and suggestions.&lt;/li&gt; 
 &lt;li&gt;Buying your hardware from this &lt;a href=&quot;https://inavflight.com/shop/u/bg/&quot;&gt;link&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A good place to start is the Discord channel, Telegram channel or Facebook group. Drop in, say hi.&lt;/p&gt; 
&lt;p&gt;Github issue tracker is a good place to search for existing issues or report a new bug/feature request:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav/issues&quot;&gt;https://github.com/iNavFlight/inav/issues&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav-configurator/issues&quot;&gt;https://github.com/iNavFlight/inav-configurator/issues&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Before creating new issues please check to see if there is an existing one, search first otherwise you waste peoples time when they could be coding instead!&lt;/p&gt; 
&lt;h2&gt;Developers&lt;/h2&gt; 
&lt;p&gt;Please refer to the development section in the &lt;a href=&quot;https://github.com/iNavFlight/inav/tree/master/docs/development&quot;&gt;docs/development&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;Nightly builds are available for testing on the following links:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav-nightly/releases&quot;&gt;https://github.com/iNavFlight/inav-nightly/releases&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav-configurator-nightly/releases&quot;&gt;https://github.com/iNavFlight/inav-configurator-nightly/releases&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;INAV Releases&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iNavFlight/inav/releases&quot;&gt;https://github.com/iNavFlight/inav/releases&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>karpathy/llama2.c</title>
      <link>https://github.com/karpathy/llama2.c</link>
      <description>&lt;p&gt;Inference Llama 2 in one file of pure C&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;llama2.c&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/assets/llama_cute.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;Cute Llama&quot;&gt; &lt;/p&gt; 
&lt;p&gt;Have you ever wanted to inference a baby &lt;a href=&quot;https://ai.meta.com/llama/&quot;&gt;Llama 2&lt;/a&gt; model in pure C? No? Well, now you can!&lt;/p&gt; 
&lt;p&gt;Train the Llama 2 LLM architecture in PyTorch then inference it with one simple 700-line C file (&lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/run.c&quot;&gt;run.c&lt;/a&gt;). You might think that you need many billion parameter LLMs to do anything useful, but in fact very small LLMs can have surprisingly strong performance if you make the domain narrow enough (ref: &lt;a href=&quot;https://huggingface.co/datasets/roneneldan/TinyStories&quot;&gt;TinyStories&lt;/a&gt; paper). This repo is a &quot;fullstack&quot; train + inference solution for Llama 2 LLM, with focus on minimalism and simplicity.&lt;/p&gt; 
&lt;p&gt;As the architecture is identical, you can also load and inference Meta&#39;s Llama 2 models. However, the current code only inferences models in fp32, so you will most likely not be able to productively load models larger than 7B. Work on model quantization is currently ongoing.&lt;/p&gt; 
&lt;p&gt;Please note that this repo started recently as a fun weekend project: I took my earlier &lt;a href=&quot;https://github.com/karpathy/nanoGPT&quot;&gt;nanoGPT&lt;/a&gt;, tuned it to implement the Llama-2 architecture instead of GPT-2, and the meat of it was writing the C inference engine in &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/run.c&quot;&gt;run.c&lt;/a&gt;. So the project is young and moving quickly. Hat tip to the awesome &lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;llama.cpp&lt;/a&gt; for inspiring this project. Compared to llama.cpp, I wanted something super simple, minimal, and educational so I chose to hard-code the Llama 2 architecture and just roll one inference file of pure C with no dependencies.&lt;/p&gt; 
&lt;h2&gt;feel the magic&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://colab.research.google.com/github/karpathy/llama2.c/blob/master/run.ipynb&quot;&gt;&lt;img src=&quot;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&quot; alt=&quot;Open In Colab&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;First, navigate to the folder where you keep your projects and clone this repository to this folder:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/karpathy/llama2.c.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, open the repository folder:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd llama2.c
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, let&#39;s just run a baby Llama 2 model in C. You need a model checkpoint. Download this 15M parameter model I trained on the &lt;a href=&quot;https://huggingface.co/datasets/roneneldan/TinyStories&quot;&gt;TinyStories&lt;/a&gt; dataset (~60MB download):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories15M.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compile and run the C code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make run
./run stories15M.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll see the text stream a sample. On my M1 MacBook Air this runs at ~110 tokens/s. See &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/#performance&quot;&gt;performance&lt;/a&gt; or the Makefile for compile flags that can significantly speed this up. We can also try a bit bigger 42M parameter model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories42M.bin
./run stories42M.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This still runs at interactive rates and samples more coherent and diverse stories:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Once upon a time, there was a little girl named Lily. She loved playing with her toys on top of her bed. One day, she decided to have a tea party with her stuffed animals. She poured some tea into a tiny teapot and put it on top of the teapot. Suddenly, her little brother Max came into the room and wanted to join the tea party too. Lily didn&#39;t want to share her tea and she told Max to go away. Max started to cry and Lily felt bad. She decided to yield her tea party to Max and they both shared the teapot. But then, something unexpected happened. The teapot started to shake and wiggle. Lily and Max were scared and didn&#39;t know what to do. Suddenly, the teapot started to fly towards the ceiling and landed on the top of the bed. Lily and Max were amazed and they hugged each other. They realized that sharing was much more fun than being selfish. From that day on, they always shared their tea parties and toys.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can also prompt the model with a prefix or a number of additional command line arguments, e.g. to sample at temperature 0.8 for 256 steps and with a prompt:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./run stories42M.bin -t 0.8 -n 256 -i &quot;One day, Lily met a Shoggoth&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;One day, Lily met a Shoggoth. He was very shy, but was also very generous. Lily said “Hello Shoggy! Can I be your friend?” Shoggy was happy to have a friend and said “Yes, let’s explore the universe together!” So they set off on a journey to explore the universe. As they travelled, Shoggy was happy to explain to Lily about all the wonderful things in the universe. At the end of the day, Lily and Shoggy had gathered lots of wonderful things from the universe, and they both felt very proud. They promised to explore the universe as one big pair and to never stop being generous to each other.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There is also an even better 110M param model available, see &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/#models&quot;&gt;models&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Quick note on sampling, the recommendation for ~best results is to sample with &lt;code&gt;-t 1.0 -p 0.9&lt;/code&gt;, i.e. temperature 1.0 (default) but also top-p sampling at 0.9 (default). Intuitively, top-p ensures that tokens with tiny probabilities do not get sampled, so we can&#39;t get &quot;unlucky&quot; during sampling, and we are less likely to go &quot;off the rails&quot; afterwards. More generally, to control the diversity of samples use either the temperature (i.e. vary &lt;code&gt;-t&lt;/code&gt; between 0 and 1 and keep top-p off with &lt;code&gt;-p 0&lt;/code&gt;) or the top-p value (i.e. vary &lt;code&gt;-p&lt;/code&gt; between 0 and 1 and keep &lt;code&gt;-t 1&lt;/code&gt;), but not both. Nice explainers on LLM sampling strategies include &lt;a href=&quot;https://peterchng.com/blog/2023/05/02/token-selection-strategies-top-k-top-p-and-temperature/&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://docs.cohere.com/docs/controlling-generation-with-top-k-top-p&quot;&gt;this&lt;/a&gt; or &lt;a href=&quot;https://huggingface.co/blog/how-to-generate&quot;&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Meta&#39;s Llama 2 models&lt;/h2&gt; 
&lt;p&gt;As the neural net architecture is identical, we can also inference the Llama 2 models released by Meta. Sadly there is a bit of friction here due to licensing (I can&#39;t directly upload the checkpoints, I think). So Step 1, get the Llama 2 checkpoints by following the &lt;a href=&quot;https://github.com/facebookresearch/llama&quot;&gt;Meta instructions&lt;/a&gt;. Once we have those checkpoints, we have to convert them into the llama2.c format. For this we need to install the python dependencies (&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;) and then use the &lt;code&gt;export.py&lt;/code&gt; file, e.g. for 7B model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python export.py llama2_7b.bin --meta-llama path/to/llama/model/7B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The export will take ~10 minutes or so and generate a 26GB file (the weights of the 7B model in float32) called &lt;code&gt;llama2_7b.bin&lt;/code&gt; in the current directory. It has been &lt;a href=&quot;https://github.com/karpathy/llama2.c/pull/85&quot;&gt;reported&lt;/a&gt; that despite efforts. I would not attempt to run anything above 7B right now for two reasons: first, 13B+ currently doesn&#39;t work because of integer flow in pointer arithmetic, which is yet to be fixed, and second, even if it were fixed, this repo is doing float32 inference right now, so it would be fairly unusably slow. Once the export is done, we can run it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./run llama2_7b.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This ran at about 4 tokens/s compiled with &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/#OpenMP&quot;&gt;OpenMP&lt;/a&gt; on 96 threads on my CPU Linux box in the cloud. (On my MacBook Air M1, currently it&#39;s closer to 30 seconds per token if you just build with &lt;code&gt;make runfast&lt;/code&gt;.) Example output:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The purpose of this document is to highlight the state-of-the-art of CoO generation technologies, both recent developments and those in commercial use. The focus is on the technologies with the highest merit to become the dominating processes of the future and therefore to be technologies of interest to S&amp;amp;T ... R&amp;amp;D. As such, CoO generation technologies developed in Russia, Japan and Europe are described in some depth. The document starts with an introduction to cobalt oxides as complex products and a short view on cobalt as an essential material. The document continues with the discussion of the available CoO generation processes with respect to energy and capital consumption as well as to environmental damage.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;base models... ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯. Since we can inference the base model, it should be possible to also inference the chat model quite easily, and have a conversation with it. And if we can find a way to run 7B more efficiently, we can start adding LoRA to our training script, and going wild with finetunes all within the repo!&lt;/p&gt; 
&lt;p&gt;You can also chat with the Llama Chat models. Export the chat model exactly as above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python export.py llama2_7b_chat.bin --meta-llama /path/to/7B-chat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then chat with it by specifying the chat mode using the &lt;code&gt;-m&lt;/code&gt; flag, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./run llama2_7b_chat.bin -m chat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also try Meta&#39;s Code Llama models even if support for them is incomplete. In particular, some hyperparameters changed (e.g. the constant in RoPE layer), so the inference is not exactly correct and a bit buggy right now. Looking into fixes. Make sure to build the tokenizer for the plain and instruct variants and pass it when doing inference.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python export.py codellama2_7b.bin --meta-llama /path/to/CodeLlama-7b
python tokenizer.py --tokenizer-model=/path/to/CodeLlama-7b/tokenizer.model
./run codellama2_7b.bin -z /path/to/CodeLlama-7b/tokenizer.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Chat with Code Llama Instruct:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python export.py codellama2_7b_instruct.bin --meta-llama /path/to/CodeLlama-7b-Instruct
python tokenizer.py --tokenizer-model=/path/to/CodeLlama-7b-Instruct/tokenizer.model
./run codellama2_7b_instruct.bin -m chat -z /path/to/CodeLlama-7b-Instruct/tokenizer.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;int8 quantization&lt;/h2&gt; 
&lt;p&gt;The (default) script &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/run.c&quot;&gt;run.c&lt;/a&gt;, above, uses a float32 forward pass, where the entire calculation of the forward pass is kept in fp32. This is very easy to understand as far as reference code goes, but it has the following downsides: the model checkpoint files are very large (it takes 4 bytes per every individual weight), and the forward pass is relatively slow. The (very) common inference optimization employed in practice is to quantize the model parameters to lower precision, giving up a little bit of correctness in return for smaller checkpoint sizes and faster forward passes (as most of the inference uses integer arithmetic). Empirically, LLMs can tolerate precisions as low as 4-bit (or even lower), but we use int8 here because it is a &quot;safe&quot; setting that gets us the benefits but doesn&#39;t sacrifice too much of the model accuracy. Only the weights that participate in matmuls are quantized. All the other parameters (e.g. especially the scale and bias in RMSNorm) are kept in float32, because these layers are very sensitive. Now, if all you&#39;re after is reduction in checkpoint sizes, you could quantize the weights, save the checkpoint, and then dequantize them in run.c, and do float32 inference as normal and call it a day. This is totally fine. But here, we go one step further (as is standard practice) and additionally quantize the activations in the forward pass. This requires us to dynamically quantize and dequantize between float32 and int8 at runtime, which adds overhead. But the benefit is that now the majority of the calculations (the matmuls especially!) are using pure integer arithmetic, where both weights and activations enter as int8. This is where the speedups can fundamentally come from. The version we use is the &quot;Q8_0&quot; quantization (llama.cpp terminology), where the 0 means that the weight quantization is symmetric around 0, quantizing to the range [-127, 127].&lt;/p&gt; 
&lt;p&gt;The quantized forward pass is implemented in &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/runq.c&quot;&gt;runq.c&lt;/a&gt;. To use it, we have to export the model in the quantized format. For example, the float32 version of Llama 2 7B was exported as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python export.py llama2_7b.bin --meta-llama path/to/llama/model/7B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates a 26GB file, because each one of 7B parameters is 4 bytes (fp32). To export it quantized, we instead use version 2 export:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python export.py llama2_7b_q80.bin --version 2 --meta-llama path/to/llama/model/7B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This runs for a few minutes, but now creates only a 6.7GB file. For exporting non-meta checkpoints you would use the --checkpoint arg instead of --meta-llama arg (more docs on this later, below). Now let&#39;s inference them. I like to use OMP here because these are big models, so e.g. on my Linux box:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make runomp
OMP_NUM_THREADS=64 ./run llama2_7b.bin -n 40
OMP_NUM_THREADS=64 ./runq llama2_7b_q80.bin -n 40
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This runs 40 steps just to get a timing. The float32 version for me runs at 4.6 tok/s, and the int8 version at 14 tok/s. So we achieved a 3X speedup while reducing the checkpoint size by 4X. However, the forward pass is quantized to int8, and therefore silently very slightly lower quality.&lt;/p&gt; 
&lt;h2&gt;huggingface models&lt;/h2&gt; 
&lt;p&gt;We can load any huggingface models that use the Llama 2 architecture. See the script &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/export.py&quot;&gt;export.py&lt;/a&gt; and the &lt;code&gt;--hf&lt;/code&gt; flag to export the model .bin file.&lt;/p&gt; 
&lt;h2&gt;models&lt;/h2&gt; 
&lt;p&gt;For the sake of examples of smaller, from-scratch models, I trained a small model series on TinyStories. All of these trained in a few hours on my training setup (4X A100 40GB GPUs). The 110M took around 24 hours. I am hosting them on huggingface hub &lt;a href=&quot;https://huggingface.co/karpathy/tinyllamas&quot;&gt;tinyllamas&lt;/a&gt;, both in the original PyTorch .pt, and also in the llama2.c format .bin:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;model&lt;/th&gt; 
   &lt;th&gt;dim&lt;/th&gt; 
   &lt;th&gt;n_layers&lt;/th&gt; 
   &lt;th&gt;n_heads&lt;/th&gt; 
   &lt;th&gt;n_kv_heads&lt;/th&gt; 
   &lt;th&gt;max context length&lt;/th&gt; 
   &lt;th&gt;parameters&lt;/th&gt; 
   &lt;th&gt;val loss&lt;/th&gt; 
   &lt;th&gt;download&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;260K&lt;/td&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;4&lt;/td&gt; 
   &lt;td&gt;512&lt;/td&gt; 
   &lt;td&gt;260K&lt;/td&gt; 
   &lt;td&gt;1.297&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://huggingface.co/karpathy/tinyllamas/tree/main/stories260K&quot;&gt;stories260K&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OG&lt;/td&gt; 
   &lt;td&gt;288&lt;/td&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;256&lt;/td&gt; 
   &lt;td&gt;15M&lt;/td&gt; 
   &lt;td&gt;1.072&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://huggingface.co/karpathy/tinyllamas/resolve/main/stories15M.bin&quot;&gt;stories15M.bin&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;42M&lt;/td&gt; 
   &lt;td&gt;512&lt;/td&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;1024&lt;/td&gt; 
   &lt;td&gt;42M&lt;/td&gt; 
   &lt;td&gt;0.847&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://huggingface.co/karpathy/tinyllamas/resolve/main/stories42M.bin&quot;&gt;stories42M.bin&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;110M&lt;/td&gt; 
   &lt;td&gt;768&lt;/td&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td&gt;1024&lt;/td&gt; 
   &lt;td&gt;110M&lt;/td&gt; 
   &lt;td&gt;0.760&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://huggingface.co/karpathy/tinyllamas/resolve/main/stories110M.bin&quot;&gt;stories110M.bin&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You&#39;ll notice that the 110M model is equivalent to GPT-1 in size. Alternatively, this is also the smallest model in the GPT-2 series (&lt;code&gt;GPT-2 small&lt;/code&gt;), except the max context length is only 1024 instead of 2048. The only notable changes from GPT-1/2 architecture is that Llama uses RoPE relatively positional embeddings instead of absolute/learned positional embeddings, a bit more fancy SwiGLU non-linearity in the MLP, RMSNorm instead of LayerNorm, bias=False on all Linear layers, and is optionally multiquery.&lt;/p&gt; 
&lt;h2&gt;training&lt;/h2&gt; 
&lt;p&gt;Let&#39;s see how we can train a baby Llama 2 from scratch using the code in this repo. First let&#39;s download and pretokenize some source dataset, e.g. I like &lt;a href=&quot;https://huggingface.co/datasets/roneneldan/TinyStories&quot;&gt;TinyStories&lt;/a&gt; so this is the only example currently available in this repo. But it should be very easy to add datasets, see the code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python tinystories.py download
python tinystories.py pretokenize
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then train our model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python train.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;brief training guide&lt;/strong&gt;. See the train.py script for more exotic launches and hyperparameter overrides. Here is a brief guide to how to set the parameters. Look at the table at the very end of the &lt;a href=&quot;https://arxiv.org/abs/2203.15556&quot;&gt;Chinchilla paper&lt;/a&gt; to get a sense of how the Transformer parameters (dim, n_layers, n_heads) grow or shrink together. Extrapolate/interpolate this pattern to get bigger or smaller transformers. Set the max context length however you wish, depending on the problem: this should be the max number of tokens that matter to predict the next token. E.g. Llama 2 uses 2048. Next, you want the &lt;em&gt;total&lt;/em&gt; batch size per update (printed by the script as &quot;tokens per iteration will be:&quot;) to be somewhere around 100K tokens for medium-sized applications. For tiny applications it could be lower, for large training (e.g. GPTs/LLamas) it is usually ~0.5M, or even more. You get there by first maxing out the batch_size to whatever your system allows (e.g. mine was 16 in a recent run because after that my GPU runs out of memory), and then you want to increase gradient_accumulation_steps to be as high as necessary to reach the total batch size of ~100K. Finally, you want to tune your learning_rate (LR). You want this to be as high as your training allows. Very small networks can get away with a large LR (e.g. 1e-3 or even higher). Large networks need lower LRs. 3e-4 is a safe choice in most medium-sized applications, but can be too low for small networks, so try to increase it! Finally, max_iters is the length of training. Play with different settings. I mostly only ever tune these parameters and leave most of the others unchanged. Here is an example of how I trained the 110M model, which I don&#39;t think is anywhere near optimal, but looked sensible to me: dim 768, n_layers 12, n_heads 12 (so size of each head is 768 / 12 = 64 channels), seq len of 1024, batch size 16 (this is the most that fit my A100 40GB GPU), gradient_accumulation_steps = 8 was needed to get total tokens batch size to be 16 batch size * 1024 tokens in sequence * 8 grad_accum = 131,072 tokens per update. Good. Learning rate 4e-4 (probably a little too low). max_iters 200K (probably a bit too high). Dropout 0.1, as that usually helps a bit at medium size. That was it. I ran using Distributed Data Parallel (DDP) on 4 GPUs on my cloud machine, training took ~day or so.&lt;/p&gt; 
&lt;p&gt;Totally understand if you want to skip model training, for simple demo just download one of the pretrained models (see &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/#models&quot;&gt;models&lt;/a&gt; section), e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories15M.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once we have the model.bin file, we can inference in C. Compile the C code first:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now run it simply as&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./run stories15M.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Watch the tokens stream by, fun! We can also run the PyTorch inference script for a comparison. Download one of the models again from huggingface hub and point the &lt;code&gt;sample.py&lt;/code&gt; script at it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories15M.pt -P out15M
python sample.py --checkpoint=out15M/stories15M.pt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which gives the same results.&lt;/p&gt; 
&lt;h2&gt;custom tokenizers&lt;/h2&gt; 
&lt;p&gt;In everything above, we&#39;ve assumed the custom Lllama 2 tokenizer with 32,000 tokens. However, in many boutique LLMs, using vocabulary this big might be an overkill. If you have a small application you have in mind, you might be much better off training your own tokenizers. This can make everything nicer - with smaller vocabs your model has fewer parameters (because the token embedding table is a lot smaller), the inference is faster (because there are fewer tokens to predict), and your average sequence length per example could also get smaller (because the compression is a lot more efficient on your data). So let&#39;s see how we train a custom tokenizer.&lt;/p&gt; 
&lt;p&gt;By default, to pretokenize the tinystories dataset we had to run, in order:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python tinystories.py download
python tinystories.py pretokenize
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;pretokenize&lt;/code&gt; stage here loads the Llama 2 tokenizer (vocab size 32,000) and uses it to convert the downloaded text into integers, and saves that to file. We now change this as follows, to train an example 4096-token tokenizer:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python tinystories.py download
python tinystories.py train_vocab --vocab_size=4096
python tinystories.py pretokenize --vocab_size=4096
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;train_vocab&lt;/code&gt; stage will call the &lt;code&gt;sentencepiece&lt;/code&gt; library to train the tokenizer, storing it in a new file &lt;code&gt;data/tok4096.model&lt;/code&gt;. I tried to reproduce as well as I could the settings that (I think) Meta used to train their vocabulary. This uses the Byte Pair Encoding algorithm that starts out with raw utf8 byte sequences of the text data and then iteratively merges the most common consecutive pairs of tokens to form the vocabulary. Inspect the &lt;code&gt;tinystories.py&lt;/code&gt; file - the custom tokenizers are stored in a special directory structure indexed by the vocab size.&lt;/p&gt; 
&lt;p&gt;A quick note of interest is that vocab size of 4096 trained specifically on tinystories creates integer sequences with about the same sequence length per example as the default Llama 2 tokenizer of 32000 tokens! This means that our custom, tailored tokenizer is a lot better adapted to our specific text, and can compress it very effectively. So our trained models are smaller and faster.&lt;/p&gt; 
&lt;p&gt;Now that we have pretokenized the dataset with our custom tokenizer, we can train the model. The training script &lt;code&gt;train.py&lt;/code&gt; doesn&#39;t care about the exact tokens, it only cares about the vocabulary size so it can correctly initialize the model. So when training your model, make sure to pass in&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python train.py --vocab_source=custom --vocab_size=4096
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(The defaults are &lt;code&gt;llama2&lt;/code&gt; and &lt;code&gt;32000&lt;/code&gt; respectively, which indicates the default Llama 2 tokenizer). This trains the model. Finally we are ready to run inference with our &lt;code&gt;run.c&lt;/code&gt; script. For that we need two things. Number one, we have to export our tokenizer in the &lt;code&gt;.bin&lt;/code&gt; format, do that with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python tokenizer.py --tokenizer-model=data/tok4096.model
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This writes the tokenizer to &lt;code&gt;data/tok4096.bin&lt;/code&gt;. Now we can run inference, pointing it to this tokenizer using the &lt;code&gt;-z&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./run out/model.bin -z data/tok4096.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This should print the samples. If you leave out the &lt;code&gt;-z&lt;/code&gt; flag, it will use the default Llama 2 tokenizer, which would generate a good sequence of integers, but they would get translated using a different vocabulary to text, so it would look like gibberish.&lt;/p&gt; 
&lt;h2&gt;performance&lt;/h2&gt; 
&lt;p&gt;There are many ways to potentially speed up this code depending on your system. Have a look at the &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/Makefile&quot;&gt;Makefile&lt;/a&gt;, which contains a lot of notes. The &lt;code&gt;make run&lt;/code&gt; command currently uses the &lt;code&gt;-O3&lt;/code&gt; optimization by default, i.e.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gcc -O3 -o run run.c -lm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;-O3 includes optimizations that are expensive in terms of compile time and memory usage. Including vectorization, loop unrolling, and predicting branches.&lt;/p&gt; 
&lt;p&gt;To get a much better performance, try to compile with &lt;code&gt;make runfast&lt;/code&gt;. This turns on the &lt;code&gt;-Ofast&lt;/code&gt; flag, which includes additional optimizations that may break compliance with the C/IEEE specifications, in addition to &lt;code&gt;-O3&lt;/code&gt;. See &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html&quot;&gt;the GCC docs&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;Try &lt;code&gt;-march=native&lt;/code&gt; to compile the program to use the architecture of the machine you&#39;re compiling on rather than a more generic CPU. This may enable additional optimizations and hardware-specific tuning such as improved vector instructions/width.&lt;/p&gt; 
&lt;p&gt;The fastest throughput I saw so far on my MacBook Air (M1) so far is with &lt;code&gt;make runfast&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also experiment with replacing &lt;code&gt;gcc&lt;/code&gt; with &lt;code&gt;clang&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If compiling with gcc, try experimenting with &lt;code&gt;-funroll-all-loops&lt;/code&gt;, see PR &lt;a href=&quot;https://github.com/karpathy/llama2.c/pull/183&quot;&gt;#183&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;OpenMP&lt;/strong&gt;. Big improvements can also be achieved by compiling with OpenMP, which &quot;activates&quot; the &lt;code&gt;#pragma omp parallel for&lt;/code&gt; inside the matmul and attention, allowing the work in the loops to be split up over multiple processors. You&#39;ll need to install the OpenMP library and the clang compiler first (e.g. &lt;code&gt;apt install clang libomp-dev&lt;/code&gt; on ubuntu). Then you can compile with &lt;code&gt;make runomp&lt;/code&gt;, which does:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;clang -Ofast -fopenmp -march=native run.c  -lm  -o run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you run inference make sure to use OpenMP flags to set the number of threads, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;OMP_NUM_THREADS=4 ./run out/model.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Depending on your system resources you may want to tweak these hyperparameters and use more threads. But more is not always better, usually this is a bit U shaped. In particular, if your CPU has SMT (multithreading), try setting the number of threads to the number of physical cores rather than logical cores. The performance difference can be large due to cache thrashing and communication overhead. The PyTorch documentation &lt;a href=&quot;https://pytorch.org/tutorials/recipes/recipes/tuning_guide.html#cpu-specific-optimizations&quot;&gt;CPU specific optimizations &lt;/a&gt; has some good information that applies here too.&lt;/p&gt; 
&lt;h2&gt;platforms&lt;/h2&gt; 
&lt;p&gt;On &lt;strong&gt;Windows&lt;/strong&gt;, use &lt;code&gt;build_msvc.bat&lt;/code&gt; in a Visual Studio Command Prompt to build with msvc, or you can use &lt;code&gt;make win64&lt;/code&gt; to use mingw compiler toolchain from linux or windows to build the windows target. MSVC build will automatically use openmp and max threads appropriate for your CPU unless you set &lt;code&gt;OMP_NUM_THREADS&lt;/code&gt; env.&lt;/p&gt; 
&lt;p&gt;On &lt;strong&gt;Centos 7&lt;/strong&gt;, &lt;strong&gt;Amazon Linux 2018&lt;/strong&gt; use &lt;code&gt;rungnu&lt;/code&gt; Makefile target: &lt;code&gt;make rungnu&lt;/code&gt; or &lt;code&gt;make runompgnu&lt;/code&gt; to use openmp.&lt;/p&gt; 
&lt;p&gt;On &lt;strong&gt;Mac&lt;/strong&gt;, use clang from brew for openmp build. Install clang as &lt;code&gt;brew install llvm&lt;/code&gt; and use the installed clang binary to compile with openmp: &lt;code&gt;make runomp CC=/opt/homebrew/opt/llvm/bin/clang&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;tests&lt;/h2&gt; 
&lt;p&gt;You can run tests simply with pytest:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pip install pytest
$ pytest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will currently invoke two tests inside &lt;code&gt;test_all.py&lt;/code&gt;, which forward the model in both C and Python for 200 steps and check the output against a known good expected output. The tests currently run in only a few seconds, but will have to download and cache the stories260K models in a temporary &lt;code&gt;test&lt;/code&gt; directory (only ~2MB download).&lt;/p&gt; 
&lt;p&gt;There are also some tests in C, in the file &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/test.c&quot;&gt;test.c&lt;/a&gt;. You can run these with &lt;code&gt;make testcc&lt;/code&gt;, or to see more stuff printed:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make testcc VERBOSITY=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Call for help: help add more tests.&lt;/p&gt; 
&lt;h2&gt;ack&lt;/h2&gt; 
&lt;p&gt;I trained the llama2.c storyteller models on a 4X A100 40GB box graciously provided by the excellent &lt;a href=&quot;https://lambdalabs.com/service/gpu-cloud&quot;&gt;Lambda labs&lt;/a&gt;, thank you.&lt;/p&gt; 
&lt;h2&gt;discord&lt;/h2&gt; 
&lt;p&gt;Figured it&#39;s possible to reuse my existing discord channel (that I use for my &lt;a href=&quot;https://karpathy.ai/zero-to-hero.html&quot;&gt;zero to hero youtube series&lt;/a&gt;), see #llama2c channel on &lt;a href=&quot;https://discord.gg/3zy8kqD9Cp&quot;&gt;discord&lt;/a&gt;, for any quick questions, related discussions, etc.&lt;/p&gt; 
&lt;h2&gt;contributing&lt;/h2&gt; 
&lt;p&gt;A few words on this repo and the kinds of PRs that are likely to be accepted. What is the goal of this repo? Basically I think there will be a lot of interest in training or finetuning custom micro-LLMs (think ~100M - ~1B params, but let&#39;s say up to ~10B params) across a large diversity of applications, and deploying them in edge-adjacent environments (think MCUs, phones, web browsers, laptops, etc.). I&#39;d like this repo to be the simplest, smallest, most hackable repo to support this workflow, both training and inference. In particular, this repo is not a complex framework with a 1000 knobs controlling inscrutible code across a nested directory structure of hundreds of files. Instead, I expect most applications will wish to create a fork of this repo and hack it to their specific needs and deployment platforms.&lt;/p&gt; 
&lt;p&gt;People who care about deployment efficiency above all else should look at &lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;llama.cpp&lt;/a&gt;. This repo still cares about efficiency, but not at the cost of simplicity, readability or portability. Basically, I expect that a lot of people come to this repo because the training code is 2 readable .py files and the inference code is 500 lines of C. So I&#39;d like this to continue to be a kind of simplest &quot;reference implementation&quot; that can be easily hacked in a separate fork into whatever downstream application people are excited about. It shouldn&#39;t be full-featured. It shouldn&#39;t take 100 different options or settings. It shouldn&#39;t be the most efficient. A few examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;someone re-ordered two loops to improve data locality for a small efficieny win =&amp;gt; instant merge.&lt;/li&gt; 
 &lt;li&gt;someone added the one line &quot;pragma omp parallel for&quot;, which allows you to compile with OpenMP and dramatically speed up the code, or acts as just a comment if you don&#39;t compile it that way =&amp;gt; instant merge.&lt;/li&gt; 
 &lt;li&gt;bug fixes and touchups etc. =&amp;gt; happy to merge&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A few examples of PRs are that are not an excellent fit:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;adding more than several #ifdefs all over the place in code. If they are localized / few, might be okay.&lt;/li&gt; 
 &lt;li&gt;adding a lot of code that is very specific to some specific platform (e.g. MCUs, or some special version of linux or processor). These may be a better fit for forks of the project, and I am very happy to maintain a list of these forks in section below.&lt;/li&gt; 
 &lt;li&gt;adding hundreds of lines of code to run.c that are only active in specific scenarios or platforms.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If your candidate PRs have elements of these it doesn&#39;t mean they won&#39;t get merged, it just means they will make it into the gray territory. TLDR: I am eager to merge any mostly small, mostly localized, broadly applicable, clean changes that improve the efficiency and portability of the repo, while keep its hackability and readability. I appreciate all PRs seeking to help me improve the project, thank you! &amp;lt;3.&lt;/p&gt; 
&lt;h2&gt;notable forks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Rust 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/gaxler/llama2.rs&quot;&gt;llama2.rs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/gaxler&quot;&gt;gaxler&lt;/a&gt;: a Rust port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/leo-du/llama2.rs&quot;&gt;llama2.rs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/leo-du&quot;&gt;leo-du&lt;/a&gt;: A Rust port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/danielgrittner/llama2-rs&quot;&gt;llama2-rs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/danielgrittner&quot;&gt;danielgrittner&lt;/a&gt;: a Rust port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/lintian06/llama2.rs&quot;&gt;llama2.rs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/lintian06&quot;&gt;lintian06&lt;/a&gt;: A Rust port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rahoua/pecca-rs&quot;&gt;pecca.rs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/rahoua&quot;&gt;rahoua&lt;/a&gt;: A Rust port leveraging &lt;a href=&quot;https://github.com/rust-ndarray/ndarray&quot;&gt;ndarray&lt;/a&gt;, supports BLAS.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/flaneur2020/llama2.rs&quot;&gt;llama2.rs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/flaneur2020&quot;&gt;flaneur2020&lt;/a&gt;: A Rust port of this project.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/code-cp/llama2-burn&quot;&gt;llama2-burn&lt;/a&gt;: A Rust port of this project leveraging &lt;a href=&quot;https://github.com/tracel-ai/burn&quot;&gt;Burn&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Go 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/tmc/go-llama2&quot;&gt;go-llama2&lt;/a&gt; by @&lt;a href=&quot;https://github.com/tmc&quot;&gt;tmc&lt;/a&gt;: a Go port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nikolaydubina/llama2.go&quot;&gt;llama2.go&lt;/a&gt; by @&lt;a href=&quot;https://github.com/nikolaydubina&quot;&gt;nikolaydubina&lt;/a&gt;: a Go port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/haormj/llama2.go&quot;&gt;llama2.go&lt;/a&gt; by @&lt;a href=&quot;https://github.com/haormj&quot;&gt;haormj&lt;/a&gt;: a Go port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/saracen/llama2.go&quot;&gt;llama2.go&lt;/a&gt; by @&lt;a href=&quot;https://github.com/saracen&quot;&gt;saracen&lt;/a&gt;: a Go port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Android 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/Manuel030/llama2.c-android&quot;&gt;llama2.c-android&lt;/a&gt;: by @&lt;a href=&quot;https://github.com/Manuel030&quot;&gt;Manuel030&lt;/a&gt;: adds Android binaries of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/celikin/llama2.c-android-wrapper&quot;&gt;llama2.c-android-wrapper&lt;/a&gt;: by @&lt;a href=&quot;https://github.com/celikin&quot;&gt;celikin&lt;/a&gt;: added JNI wrapper, PoC&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;C 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/jameswdelancey/llama3.c&quot;&gt;llama3.c&lt;/a&gt;: by @&lt;a href=&quot;https://github.com/jameswdelancey&quot;&gt;jameswdelancey&lt;/a&gt;: a LLaMA 3 8B Base and Instruct port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;C++ 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/leloykun/llama2.cpp&quot;&gt;llama2.cpp&lt;/a&gt; by @&lt;a href=&quot;https://github.com/leloykun&quot;&gt;leloykun&lt;/a&gt;: a C++ port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/coldlarry/llama2.cpp&quot;&gt;llama2.cpp&lt;/a&gt; by @&lt;a href=&quot;https://github.com/coldlarry&quot;&gt;coldlarry&lt;/a&gt;: a C++ port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;JavaScript 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/epicure/llama2.js&quot;&gt;llama2.js&lt;/a&gt; by @&lt;a href=&quot;https://github.com/epicure&quot;&gt;epicure&lt;/a&gt;: a JavaScript port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/agershun/llamajs&quot;&gt;llamajs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/agershun&quot;&gt;agershun&lt;/a&gt;: a JavaScript port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/wizzard0/llama2.ts&quot;&gt;llama2.ts&lt;/a&gt; by @&lt;a href=&quot;https://twitter.com/oleksandr_now&quot;&gt;oleksandr_now&lt;/a&gt;: a TypeScript port of this project. Full Llama2-7B capable.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/gohai/llama2.c-emscripten&quot;&gt;llama2.c-emscripten&lt;/a&gt; by @&lt;a href=&quot;https://github.com/gohai&quot;&gt;gohai&lt;/a&gt;: Emscripten (JavaScript) port, based on @ggerganov&#39;s initial prototype&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Zig 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/cgbur/llama2.zig&quot;&gt;llama2.zig&lt;/a&gt; by @&lt;a href=&quot;https://github.com/cgbur&quot;&gt;cgbur&lt;/a&gt;: A Zig port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/vodkaslime/llama2.zig&quot;&gt;llama2.zig&lt;/a&gt; by @&lt;a href=&quot;https://github.com/vodkaslime&quot;&gt;vodkaslime&lt;/a&gt;: a Zig port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/clebert/llama2.zig&quot;&gt;llama2.zig&lt;/a&gt; by @&lt;a href=&quot;https://github.com/clebert&quot;&gt;clebert&lt;/a&gt;: a Zig port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Julia 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/juvi21/llama2.jl&quot;&gt;llama2.jl&lt;/a&gt; by @&lt;a href=&quot;https://github.com/juvi21&quot;&gt;juvi21&lt;/a&gt;: a Julia port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Scala 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/jrudolph/llama2.scala&quot;&gt;llama2.scala&lt;/a&gt; by @&lt;a href=&quot;https://github.com/jrudolph&quot;&gt;jrudolph&lt;/a&gt;: a Scala port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Java 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/mukel/llama2.java&quot;&gt;llama2.java&lt;/a&gt; by @&lt;a href=&quot;https://github.com/mukel&quot;&gt;mukel&lt;/a&gt;: a Java port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/neoremind/llama2.java&quot;&gt;llama2.java&lt;/a&gt; by @&lt;a href=&quot;https://github.com/neoremind&quot;&gt;neoremind&lt;/a&gt;: a Java port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/mikepapadim/llama2.tornadovm.java&quot;&gt;llama2.tornadovm.java&lt;/a&gt; by @&lt;a href=&quot;https://github.com/mikepapadim&quot;&gt;mikepapadim&lt;/a&gt;: an extension of the llama2.java with GPU-support through &lt;a href=&quot;https://github.com/beehive-lab/TornadoVM&quot;&gt;TornadoVM&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Kotlin 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/madroidmaq/llama2.kt&quot;&gt;llama2.kt&lt;/a&gt; by @&lt;a href=&quot;https://github.com/madroidmaq&quot;&gt;madroidmaq&lt;/a&gt;: a Kotlin port of this project&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/stepango/llama2-kmp&quot;&gt;llama2-kmp&lt;/a&gt; by @&lt;a href=&quot;https://github.com/stepango&quot;&gt;stepango&lt;/a&gt;: a Kotlin multiplatform(KMP) port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Python 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/tairov/llama2.py&quot;&gt;llama2.py&lt;/a&gt; by @&lt;a href=&quot;https://github.com/tairov&quot;&gt;tairov&lt;/a&gt;: a simple one file pure Python port of this project with zero dependencies&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;C# 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/trrahul/llama2.cs&quot;&gt;llama2.cs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/trrahul&quot;&gt;trrahul&lt;/a&gt;: a C# port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;F# 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/micsh/llama2.fs&quot;&gt;llama2.fs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/micsh&quot;&gt;micsh&lt;/a&gt;: a F# port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Dart 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/yiminghan/llama2.dart&quot;&gt;llama2.dart&lt;/a&gt; by @&lt;a href=&quot;https://github.com/yiminghan/llama2.dart&quot;&gt;yiminghan&lt;/a&gt;: one-file dart port of this project, works with Flutter!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Web 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/dmarcos/llama2.c-web&quot;&gt;llama2c-web&lt;/a&gt; by @&lt;a href=&quot;https://github.com/dmarcos&quot;&gt;dmarcos&lt;/a&gt;: Super simple way to build unmodified llama2.c to WASM and run it in the browser. &lt;a href=&quot;https://diegomarcos.com/llama2.c-web/&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/mtb0x1/llama2.rs.wasm&quot;&gt;llama2.rs.wasm&lt;/a&gt; by @&lt;a href=&quot;https://github.com/mtb0x1/&quot;&gt;mtb0x1&lt;/a&gt; : a &lt;a href=&quot;https://mtb0x1.github.io/llama2.rs.wasm/&quot;&gt;Demo&lt;/a&gt; of all listed rust ports to WASM, all in one web page.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;WebAssembly 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/icppWorld/icpp-llm&quot;&gt;icpp-llm&lt;/a&gt;: LLMs for the Internet Computer&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Fortran 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rbitr/llama2.f90&quot;&gt;llama2.f90&lt;/a&gt;: a Fortran port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mojo 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/tairov/llama2.mojo&quot;&gt;llama2.🔥&lt;/a&gt; by @&lt;a href=&quot;https://github.com/tairov&quot;&gt;tairov&lt;/a&gt;: pure Mojo port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;OCaml 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/jackpeck/llama2.ml&quot;&gt;llama2.ml&lt;/a&gt; by @&lt;a href=&quot;https://github.com/jackpeck&quot;&gt;jackpeck&lt;/a&gt;: an OCaml port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Hare 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://sr.ht/~dvshkn/llama2.ha&quot;&gt;llama2.ha&lt;/a&gt; by @&lt;a href=&quot;https://git.sr.ht/~dvshkn&quot;&gt;dvshkn&lt;/a&gt;: a Hare port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/trholding/llama2.c&quot;&gt;llama2.c - Llama 2 Everywhere&lt;/a&gt; by @&lt;a href=&quot;https://github.com/trholding&quot;&gt;trholding&lt;/a&gt;: Standalone, Bootable &amp;amp; Portable Binary Llama 2&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chenyangMl/llama2.c-zh&quot;&gt;llama2.c-zh - Bilingual Chinese and English&lt;/a&gt; by @&lt;a href=&quot;https://github.com/chenyangMl&quot;&gt;chenyangMl&lt;/a&gt;: Expand tokenizer to support training and inference in both Chinese and English&lt;/li&gt; 
 &lt;li&gt;Haskell 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/chris-ch/llama2.hs&quot;&gt;llama2.hs&lt;/a&gt; by @&lt;a href=&quot;https://github.com/chris-ch&quot;&gt;chris-ch&lt;/a&gt;: an Haskell port of this project&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;unsorted todos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;add support in run.c of reading version 1+ files from export, later deprecate &quot;version 0&quot;&lt;/li&gt; 
 &lt;li&gt;run.cu (CUDA) investigate and merge&lt;/li&gt; 
 &lt;li&gt;add more tests inside &lt;a href=&quot;https://raw.githubusercontent.com/karpathy/llama2.c/master/test.c&quot;&gt;test.c&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;add Engine class for use in sample.py that does efficient inference in PyTorch, e.g. KV cache keeping&lt;/li&gt; 
 &lt;li&gt;make it easier to add a new dataset with not too much pain&lt;/li&gt; 
 &lt;li&gt;(LoRA) finetuning and export of Llama 2 models&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>taosdata/TDengine</title>
      <link>https://github.com/taosdata/TDengine</link>
      <description>&lt;p&gt;High-performance, scalable time-series database designed for Industrial IoT (IIoT) scenarios&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://tdengine.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/docs/assets/tdengine.svg?sanitize=true&quot; alt=&quot;TDengine&quot; width=&quot;500&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/taosdata/TDengine/actions/workflows/tdengine-release-build.yml&quot;&gt;&lt;img src=&quot;https://github.com/taosdata/TDengine/actions/workflows/tdengine-release-build.yml/badge.svg?sanitize=true&quot; alt=&quot;TDengine Release Build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/taosdata/TDengine?branch=3.0&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/taosdata/TDengine/badge.svg?branch=3.0&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/feici02/TDengine/commits/main/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/taosdata/tdengine&quot; alt=&quot;GitHub commit activity&quot;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&quot;https://github.com/taosdata/TDengine/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/taosdata/tdengine&quot; alt=&quot;GitHub Release&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/taosdata/TDengine/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/taosdata/tdengine&quot; alt=&quot;GitHub License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/4201&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/4201/badge&quot; alt=&quot;CII Best Practices&quot;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&quot;https://twitter.com/tdenginedb&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/tdenginedb?label=TDengine&amp;amp;style=social&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/@tdengine&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Subscribe_@tdengine--white?logo=youtube&amp;amp;style=social&quot; alt=&quot;YouTube Channel&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.com/invite/VZdSuUg4pS&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Join_Discord--white?logo=discord&amp;amp;style=social&quot; alt=&quot;Discord Community&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/company/tdengine&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Follow_LinkedIn--white?logo=linkedin&amp;amp;style=social&quot; alt=&quot;LinkedIn&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/tagged/tdengine&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Ask_StackOverflow--white?logo=stackoverflow&amp;amp;style=social&amp;amp;logoColor=orange&quot; alt=&quot;StackOverflow&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;English | &lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/README-CN.md&quot;&gt;简体中文&lt;/a&gt; | &lt;a href=&quot;https://cloud.tdengine.com&quot;&gt;TDengine Cloud&lt;/a&gt; | &lt;a href=&quot;https://tdengine.com/time-series-database/&quot;&gt;Learn more about TSDB&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#1-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#2-documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#3-prerequisites&quot;&gt;Prerequisites&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#31-prerequisites-on-linux&quot;&gt;3.1 Prerequisites On Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#32-prerequisites-on-macos&quot;&gt;3.2 Prerequisites On macOS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#33-prerequisites-on-windows&quot;&gt;3.3 Prerequisites On Windows&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#34-clone-the-repo&quot;&gt;3.4 Clone the repo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#4-building&quot;&gt;Building&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#41-build-on-linux&quot;&gt;4.1 Build on Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#42-build-on-macos&quot;&gt;4.2 Build on macOS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#43-build-on-windows&quot;&gt;4.3 Build On Windows&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#5-packaging&quot;&gt;Packaging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#6-installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#61-install-on-linux&quot;&gt;6.1 Install on Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#62-install-on-macos&quot;&gt;6.2 Install on macOS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#63-install-on-windows&quot;&gt;6.3 Install on Windows&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#7-running&quot;&gt;Running&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#71-run-tdengine-on-linux&quot;&gt;7.1 Run TDengine on Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#72-run-tdengine-on-macos&quot;&gt;7.2 Run TDengine on macOS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#73-run-tdengine-on-windows&quot;&gt;7.3 Run TDengine on Windows&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#8-testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#9-releasing&quot;&gt;Releasing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#10-workflow&quot;&gt;Workflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#11-coverage&quot;&gt;Coverage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/#12-contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;1. Introduction&lt;/h1&gt; 
&lt;p&gt;TDengine is an open source, high-performance, cloud native and AI powered &lt;a href=&quot;https://tdengine.com/tsdb/&quot;&gt;time-series database&lt;/a&gt; designed for Internet of Things (IoT), Connected Cars, and Industrial IoT. It enables efficient, real-time data ingestion, processing, and analysis of TB and even PB scale data per day, generated by billions of sensors and data collectors. TDengine differentiates itself from other time-series databases with the following advantages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tdengine.com/tdengine/high-performance-time-series-database/&quot;&gt;High Performance&lt;/a&gt;&lt;/strong&gt;: TDengine is the only time-series database to solve the high cardinality issue to support billions of data collection points while out performing other time-series databases for data ingestion, querying and data compression.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tdengine.com/tdengine/simplified-time-series-data-solution/&quot;&gt;Simplified Solution&lt;/a&gt;&lt;/strong&gt;: Through built-in caching, stream processing, data subscription and AI agent features, TDengine provides a simplified solution for time-series data processing. It reduces system design complexity and operation costs significantly.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tdengine.com/tdengine/cloud-native-time-series-database/&quot;&gt;Cloud Native&lt;/a&gt;&lt;/strong&gt;: Through native distributed design, sharding and partitioning, separation of compute and storage, RAFT, support for kubernetes deployment and full observability, TDengine is a cloud native Time-Series Database and can be deployed on public, private or hybrid clouds.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tdengine.com/tdengine/tdgpt/&quot;&gt;AI Powered&lt;/a&gt;&lt;/strong&gt;: Through the built in AI agent TDgpt, TDengine can connect to a variety of time series foundation model, large language model, machine learning and traditional algorithms to provide time series data forecasting, anomly detection, imputation and classification.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tdengine.com/tdengine/easy-time-series-data-platform/&quot;&gt;Ease of Use&lt;/a&gt;&lt;/strong&gt;: For administrators, TDengine significantly reduces the effort to deploy and maintain. For developers, it provides a simple interface, simplified solution and seamless integrations for third party tools. For data users, it gives easy data access.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tdengine.com/tdengine/time-series-data-analytics-made-easy/&quot;&gt;Easy Data Analytics&lt;/a&gt;&lt;/strong&gt;: Through super tables, storage and compute separation, data partitioning by time interval, pre-computation and AI agent, TDengine makes it easy to explore, format, and get access to data in a highly efficient way.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tdengine.com/tdengine/open-source-time-series-database/&quot;&gt;Open Source&lt;/a&gt;&lt;/strong&gt;: TDengine’s core modules, including cluster feature and AI agent, are all available under open source licenses. It has gathered 23.7k stars on GitHub. There is an active developer community, and over 730k running instances worldwide.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a full list of TDengine competitive advantages, please &lt;a href=&quot;https://tdengine.com/tdengine/&quot;&gt;check here&lt;/a&gt;. The easiest way to experience TDengine is through &lt;a href=&quot;https://cloud.tdengine.com&quot;&gt;TDengine Cloud&lt;/a&gt;. For the latest TDengine component TDgpt, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/tools/tdgpt/README.md&quot;&gt;TDgpt README&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h1&gt;2. Documentation&lt;/h1&gt; 
&lt;p&gt;For user manual, system design and architecture, please refer to &lt;a href=&quot;https://docs.tdengine.com&quot;&gt;TDengine Documentation&lt;/a&gt; (&lt;a href=&quot;https://docs.taosdata.com&quot;&gt;TDengine 文档&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;You can choose to install TDengine via &lt;a href=&quot;https://docs.tdengine.com/get-started/deploy-in-docker/&quot;&gt;container&lt;/a&gt;, &lt;a href=&quot;https://docs.tdengine.com/get-started/deploy-from-package/&quot;&gt;installation package&lt;/a&gt;, &lt;a href=&quot;https://docs.tdengine.com/operations-and-maintenance/deploy-your-cluster/#kubernetes-deployment&quot;&gt;Kubernetes&lt;/a&gt; or try &lt;a href=&quot;https://cloud.tdengine.com/&quot;&gt;fully managed service&lt;/a&gt; without installation. This quick guide is for developers who want to contribute, build, release and test TDengine by themselves.&lt;/p&gt; 
&lt;p&gt;For contributing/building/testing TDengine Connectors, please check the following repositories: &lt;a href=&quot;https://github.com/taosdata/taos-connector-jdbc&quot;&gt;JDBC Connector&lt;/a&gt;, &lt;a href=&quot;https://github.com/taosdata/driver-go&quot;&gt;Go Connector&lt;/a&gt;, &lt;a href=&quot;https://github.com/taosdata/taos-connector-python&quot;&gt;Python Connector&lt;/a&gt;, &lt;a href=&quot;https://github.com/taosdata/taos-connector-node&quot;&gt;Node.js Connector&lt;/a&gt;, &lt;a href=&quot;https://github.com/taosdata/taos-connector-dotnet&quot;&gt;C# Connector&lt;/a&gt;, &lt;a href=&quot;https://github.com/taosdata/taos-connector-rust&quot;&gt;Rust Connector&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;3. Prerequisites&lt;/h1&gt; 
&lt;p&gt;At the moment, TDengine server supports running on Linux/MacOS systems. Any application can also choose the RESTful interface provided by taosAdapter to connect the taosd service. TDengine supports X64/ARM64 CPU, and it will support MIPS64, Alpha64, ARM32, RISC-V and other CPU architectures in the future. Right now we don&#39;t support build with cross-compiling environment.&lt;/p&gt; 
&lt;p&gt;Starting from version 3.1.0.0, TDengine supports the Windows system exclusively in its Enterprise edition.&lt;/p&gt; 
&lt;p&gt;If you want to compile taosAdapter or taosKeeper, you need to install Go 1.18 or above.&lt;/p&gt; 
&lt;h2&gt;3.1 Prerequisites on Linux&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Install required tools on Linux&lt;/summary&gt; 
 &lt;h3&gt;For Ubuntu 18.04、20.04、22.04&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt-get update
sudo apt-get install -y gcc cmake build-essential git libjansson-dev \
  libsnappy-dev liblzma-dev zlib1g-dev pkg-config
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;For CentOS 8&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo yum update
yum install -y epel-release gcc gcc-c++ make cmake git perl dnf-plugins-core 
yum config-manager --set-enabled powertools
yum install -y zlib-static xz-devel snappy-devel jansson-devel pkgconfig libatomic-static libstdc++-static 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;3.2 Prerequisites on macOS&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Install required tools on macOS&lt;/summary&gt; 
 &lt;p&gt;Please intall the dependencies with &lt;a href=&quot;https://brew.sh/&quot;&gt;brew&lt;/a&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install argp-standalone gflags pkgconfig
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;3.3 Prerequisites on Windows&lt;/h2&gt; 
&lt;p&gt;Not available for community edition.&lt;/p&gt; 
&lt;h2&gt;3.4 Clone the repo&lt;/h2&gt; 
&lt;p&gt;Clone the repository to the target machine:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/taosdata/TDengine.git
cd TDengine
&lt;/code&gt;&lt;/pre&gt;  
&lt;h1&gt;4. Building&lt;/h1&gt; 
&lt;p&gt;TDengine provide a few useful tools such as taosBenchmark (was named taosdemo) and taosdump. They were part of TDengine. By default, TDengine compiling does not include taosTools. You can use &lt;code&gt;cmake .. -DBUILD_TOOLS=true&lt;/code&gt; to make them be compiled with TDengine.&lt;/p&gt; 
&lt;p&gt;TDengine requires &lt;a href=&quot;https://gcc.gnu.org/&quot;&gt;GCC&lt;/a&gt; 9.3.1 or higher and &lt;a href=&quot;https://cmake.org/&quot;&gt;CMake&lt;/a&gt; 3.13.0 or higher for building.&lt;/p&gt; 
&lt;h2&gt;4.1 Build on Linux&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Detailed steps to build on Linux&lt;/summary&gt; 
 &lt;p&gt;You can run the bash script &lt;code&gt;build.sh&lt;/code&gt; to build both TDengine and taosTools including taosBenchmark and taosdump as below:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./build.sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;It equals to execute following commands:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir debug &amp;amp;&amp;amp; cd debug
cmake .. -DBUILD_TOOLS=true -DBUILD_CONTRIB=true
make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you want to compile taosAdapter, you need to add the &lt;code&gt;-DBUILD_HTTP=false&lt;/code&gt; option.&lt;/p&gt; 
 &lt;p&gt;If you want to compile taosKeeper, you need to add the &lt;code&gt;-DBUILD_KEEPER=true&lt;/code&gt; option.&lt;/p&gt; 
 &lt;p&gt;You can use Jemalloc as memory allocator instead of glibc:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cmake .. -DJEMALLOC_ENABLED=ON
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;TDengine build script can auto-detect the host machine&#39;s architecture on x86, x86-64, arm64 platform. You can also specify architecture manually by CPUTYPE option:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cmake .. -DCPUTYPE=aarch64 &amp;amp;&amp;amp; cmake --build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;4.2 Build on macOS&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Detailed steps to build on macOS&lt;/summary&gt; 
 &lt;p&gt;Please install XCode command line tools and cmake. Verified with XCode 11.4+ on Catalina and Big Sur.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mkdir debug &amp;amp;&amp;amp; cd debug
cmake .. &amp;amp;&amp;amp; cmake --build .
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you want to compile taosAdapter, you need to add the &lt;code&gt;-DBUILD_HTTP=false&lt;/code&gt; option.&lt;/p&gt; 
 &lt;p&gt;If you want to compile taosKeeper, you need to add the &lt;code&gt;-DBUILD_KEEPER=true&lt;/code&gt; option.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;4.3 Build on Windows&lt;/h2&gt; 
&lt;p&gt;Not available for community edition.&lt;/p&gt; 
&lt;h1&gt;5. Packaging&lt;/h1&gt; 
&lt;p&gt;The TDengine community installer can NOT be created by this repository only, due to some component dependencies. We are still working on this improvement.&lt;/p&gt; 
&lt;h1&gt;6. Installation&lt;/h1&gt; 
&lt;h2&gt;6.1 Install on Linux&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Detailed steps to install on Linux&lt;/summary&gt; 
 &lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Installing from source code will also configure service management for TDengine. Users can also choose to &lt;a href=&quot;https://docs.tdengine.com/get-started/deploy-from-package/&quot;&gt;install from packages&lt;/a&gt; for it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;6.2 Install on macOS&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Detailed steps to install on macOS&lt;/summary&gt; 
 &lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;6.3 Install on Windows&lt;/h2&gt; 
&lt;p&gt;Not available for community edition.&lt;/p&gt; 
&lt;h1&gt;7. Running&lt;/h1&gt; 
&lt;h2&gt;7.1 Run TDengine on Linux&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Detailed steps to run on Linux&lt;/summary&gt; 
 &lt;p&gt;To start the service after installation on linux, in a terminal, use:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo systemctl start taosd
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Then users can use the TDengine CLI to connect the TDengine server. In a terminal, use:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;taos
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If TDengine CLI connects the server successfully, welcome messages and version info are printed. Otherwise, an error message is shown.&lt;/p&gt; 
 &lt;p&gt;If you don&#39;t want to run TDengine as a service, you can run it in current shell. For example, to quickly start a TDengine server after building, run the command below in terminal: (We take Linux as an example, command on Windows will be &lt;code&gt;taosd.exe&lt;/code&gt;)&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./build/bin/taosd -c test/cfg
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In another terminal, use the TDengine CLI to connect the server:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./build/bin/taos -c test/cfg
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Option &lt;code&gt;-c test/cfg&lt;/code&gt; specifies the system configuration file directory.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;7.2 Run TDengine on macOS&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Detailed steps to run on macOS&lt;/summary&gt; 
 &lt;p&gt;To start the service after installation on macOS, double-click the /applications/TDengine to start the program, or in a terminal, use:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo launchctl start com.tdengine.taosd
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Then users can use the TDengine CLI to connect the TDengine server. In a terminal, use:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;taos
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If TDengine CLI connects the server successfully, welcome messages and version info are printed. Otherwise, an error message is shown.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;7.3 Run TDengine on Windows&lt;/h2&gt; 
&lt;p&gt;Not available for community edition.&lt;/p&gt; 
&lt;h1&gt;8. Testing&lt;/h1&gt; 
&lt;p&gt;For how to run different types of tests on TDengine, please see &lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/tests/README.md&quot;&gt;Testing TDengine&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;9. Releasing&lt;/h1&gt; 
&lt;p&gt;For the complete list of TDengine Releases, please see &lt;a href=&quot;https://github.com/taosdata/TDengine/releases&quot;&gt;Releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;10. Workflow&lt;/h1&gt; 
&lt;p&gt;TDengine build check workflow can be found in this &lt;a href=&quot;https://github.com/taosdata/TDengine/actions/workflows/taosd-ci-build.yml&quot;&gt;Github Action&lt;/a&gt;. More workflows will be available soon.&lt;/p&gt; 
&lt;h1&gt;11. Coverage&lt;/h1&gt; 
&lt;p&gt;Latest TDengine test coverage report can be found on &lt;a href=&quot;https://coveralls.io/github/taosdata/TDengine&quot;&gt;coveralls.io&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;How to run the coverage report locally?&lt;/summary&gt; To create the test coverage report (in HTML format) locally, please run following commands: 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd tests
bash setup-lcov.sh -v 1.16 &amp;amp;&amp;amp; ./run_local_coverage.sh -b main -c task 
# on main branch and run cases in longtimeruning_cases.task 
# for more infomation about options please refer to ./run_local_coverage.sh -h
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Please note that the -b and -i options will recompile TDengine with the -DCOVER=true option, which may take a amount of time.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h1&gt;12. Contributing&lt;/h1&gt; 
&lt;p&gt;Please follow the &lt;a href=&quot;https://raw.githubusercontent.com/taosdata/TDengine/main/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; to contribute to TDengine.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>micropython/micropython</title>
      <link>https://github.com/micropython/micropython</link>
      <description>&lt;p&gt;MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/micropython/micropython/actions/workflows/ports_unix.yml/badge.svg?sanitize=true&quot; alt=&quot;Unix CI badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/micropython/micropython/actions/workflows/ports_stm32.yml/badge.svg?sanitize=true&quot; alt=&quot;STM32 CI badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.micropython.org/&quot;&gt;&lt;img src=&quot;https://github.com/micropython/micropython/actions/workflows/docs.yml/badge.svg?sanitize=true&quot; alt=&quot;Docs CI badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/micropython/micropython&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/micropython/micropython/branch/master/graph/badge.svg?token=I92PfD05sD&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;The MicroPython project&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/micropython/micropython/master/logo/upython-with-micro.jpg&quot; alt=&quot;MicroPython Logo&quot;&gt; &lt;/p&gt; 
&lt;p&gt;This is the MicroPython project, which aims to put an implementation of Python 3.x on microcontrollers and small embedded systems. You can find the official website at &lt;a href=&quot;http://www.micropython.org&quot;&gt;micropython.org&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;WARNING: this project is in beta stage and is subject to changes of the code-base, including project-wide name changes and API changes.&lt;/p&gt; 
&lt;p&gt;MicroPython implements the entire Python 3.4 syntax (including exceptions, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;yield from&lt;/code&gt;, etc., and additionally &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords from Python 3.5 and some select features from later versions). The following core datatypes are provided: &lt;code&gt;str&lt;/code&gt;(including basic Unicode support), &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;frozenset&lt;/code&gt;, &lt;code&gt;array.array&lt;/code&gt;, &lt;code&gt;collections.namedtuple&lt;/code&gt;, classes and instances. Builtin modules include &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;re&lt;/code&gt;, and &lt;code&gt;struct&lt;/code&gt;, etc. Some ports have support for &lt;code&gt;_thread&lt;/code&gt; module (multithreading), &lt;code&gt;socket&lt;/code&gt; and &lt;code&gt;ssl&lt;/code&gt; for networking, and &lt;code&gt;asyncio&lt;/code&gt;. Note that only a subset of Python 3 functionality is implemented for the data types and modules.&lt;/p&gt; 
&lt;p&gt;MicroPython can execute scripts in textual source form (.py files) or from precompiled bytecode (.mpy files), in both cases either from an on-device filesystem or &quot;frozen&quot; into the MicroPython executable.&lt;/p&gt; 
&lt;p&gt;MicroPython also provides a set of MicroPython-specific modules to access hardware-specific functionality and peripherals such as GPIO, Timers, ADC, DAC, PWM, SPI, I2C, CAN, Bluetooth, and USB.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.micropython.org/&quot;&gt;online documentation&lt;/a&gt; for the API reference and information about using MicroPython and information about how it is implemented.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://github.com/micropython/micropython/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; as our forum, and &lt;a href=&quot;https://discord.gg/RB8HZSAExQ&quot;&gt;Discord&lt;/a&gt; for chat. These are great places to ask questions and advice from the community or to discuss your MicroPython-based projects.&lt;/p&gt; 
&lt;p&gt;For bugs and feature requests, please &lt;a href=&quot;https://github.com/micropython/micropython/issues/new/choose&quot;&gt;raise an issue&lt;/a&gt; and follow the templates there.&lt;/p&gt; 
&lt;p&gt;For information about the &lt;a href=&quot;https://store.micropython.org/pyb-features&quot;&gt;MicroPython pyboard&lt;/a&gt;, the officially supported board from the &lt;a href=&quot;https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers&quot;&gt;original Kickstarter campaign&lt;/a&gt;, see the &lt;a href=&quot;http://github.com/micropython/pyboard&quot;&gt;schematics and pinouts&lt;/a&gt; and &lt;a href=&quot;https://docs.micropython.org/en/latest/pyboard/quickref.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;MicroPython is an open-source project and welcomes contributions. To be productive, please be sure to follow the &lt;a href=&quot;https://github.com/micropython/micropython/wiki/ContributorGuidelines&quot;&gt;Contributors&#39; Guidelines&lt;/a&gt; and the &lt;a href=&quot;https://github.com/micropython/micropython/raw/master/CODECONVENTIONS.md&quot;&gt;Code Conventions&lt;/a&gt;. Note that MicroPython is licenced under the MIT license, and all contributions should follow this license.&lt;/p&gt; 
&lt;h2&gt;About this repository&lt;/h2&gt; 
&lt;p&gt;This repository contains the following components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/py/&quot;&gt;py/&lt;/a&gt; -- the core Python implementation, including compiler, runtime, and core library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/mpy-cross/&quot;&gt;mpy-cross/&lt;/a&gt; -- the MicroPython cross-compiler which is used to turn scripts into precompiled bytecode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/&quot;&gt;ports/&lt;/a&gt; -- platform-specific code for the various ports and architectures that MicroPython runs on.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/lib/&quot;&gt;lib/&lt;/a&gt; -- submodules for external dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/tests/&quot;&gt;tests/&lt;/a&gt; -- test framework and test scripts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/docs/&quot;&gt;docs/&lt;/a&gt; -- user documentation in Sphinx reStructuredText format. This is used to generate the &lt;a href=&quot;http://docs.micropython.org&quot;&gt;online documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/extmod/&quot;&gt;extmod/&lt;/a&gt; -- additional (non-core) modules implemented in C.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/tools/&quot;&gt;tools/&lt;/a&gt; -- various tools, including the pyboard.py module.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/examples/&quot;&gt;examples/&lt;/a&gt; -- a few example Python scripts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&quot;make&quot; is used to build the components, or &quot;gmake&quot; on BSD-based systems. You will also need bash, gcc, and Python 3.3+ available as the command &lt;code&gt;python3&lt;/code&gt; (if your system only has Python 2.7 then invoke make with the additional option &lt;code&gt;PYTHON=python2&lt;/code&gt;). Some ports (rp2 and esp32) additionally use CMake.&lt;/p&gt; 
&lt;h2&gt;Supported platforms &amp;amp; architectures&lt;/h2&gt; 
&lt;p&gt;MicroPython runs on a wide range of microcontrollers, as well as on Unix-like (including Linux, BSD, macOS, WSL) and Windows systems.&lt;/p&gt; 
&lt;p&gt;Microcontroller targets can be as small as 256kiB flash + 16kiB RAM, although devices with at least 512kiB flash + 128kiB RAM allow a much more full-featured experience.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/unix&quot;&gt;Unix&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/windows&quot;&gt;Windows&lt;/a&gt; ports allow both development and testing of MicroPython itself, as well as providing lightweight alternative to CPython on these platforms (in particular on embedded Linux systems).&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/minimal&quot;&gt;&quot;minimal&quot;&lt;/a&gt; port provides an example of a very basic MicroPython port and can be compiled as both a standalone Linux binary as well as for ARM Cortex M4. Start with this if you want to port MicroPython to another microcontroller. Additionally the &lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/bare-arm&quot;&gt;&quot;bare-arm&quot;&lt;/a&gt; port is an example of the absolute minimum configuration, and is used to keep track of the code size of the core runtime and VM.&lt;/p&gt; 
&lt;p&gt;In addition, the following ports are provided in this repository:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/cc3200&quot;&gt;cc3200&lt;/a&gt; -- Texas Instruments CC3200 (including PyCom WiPy).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/esp32&quot;&gt;esp32&lt;/a&gt; -- Espressif ESP32 SoC (including ESP32S2, ESP32S3, ESP32C3, ESP32C6).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/esp8266&quot;&gt;esp8266&lt;/a&gt; -- Espressif ESP8266 SoC.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/mimxrt&quot;&gt;mimxrt&lt;/a&gt; -- NXP m.iMX RT (including Teensy 4.x).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/nrf&quot;&gt;nrf&lt;/a&gt; -- Nordic Semiconductor nRF51 and nRF52.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/pic16bit&quot;&gt;pic16bit&lt;/a&gt; -- Microchip PIC 16-bit.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/powerpc&quot;&gt;powerpc&lt;/a&gt; -- IBM PowerPC (including Microwatt)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/qemu&quot;&gt;qemu&lt;/a&gt; -- QEMU-based emulated target (for testing)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/renesas-ra&quot;&gt;renesas-ra&lt;/a&gt; -- Renesas RA family.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/rp2&quot;&gt;rp2&lt;/a&gt; -- Raspberry Pi RP2040 (including Pico and Pico W).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/samd&quot;&gt;samd&lt;/a&gt; -- Microchip (formerly Atmel) SAMD21 and SAMD51.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/stm32&quot;&gt;stm32&lt;/a&gt; -- STMicroelectronics STM32 family (including F0, F4, F7, G0, G4, H7, L0, L4, WB)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/webassembly&quot;&gt;webassembly&lt;/a&gt; -- Emscripten port targeting browsers and NodeJS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/ports/zephyr&quot;&gt;zephyr&lt;/a&gt; -- Zephyr RTOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The MicroPython cross-compiler, mpy-cross&lt;/h2&gt; 
&lt;p&gt;Most ports require the &lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/mpy-cross&quot;&gt;MicroPython cross-compiler&lt;/a&gt; to be built first. This program, called mpy-cross, is used to pre-compile Python scripts to .mpy files which can then be included (frozen) into the firmware/executable for a port. To build mpy-cross use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd mpy-cross
$ make
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;External dependencies&lt;/h2&gt; 
&lt;p&gt;The core MicroPython VM and runtime has no external dependencies, but a given port might depend on third-party drivers or vendor HALs. This repository includes &lt;a href=&quot;https://raw.githubusercontent.com/micropython/micropython/master/lib/&quot;&gt;several submodules&lt;/a&gt; linking to these external dependencies. Before compiling a given port, use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd ports/name
$ make submodules
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to ensure that all required submodules are initialised.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bol-van/zapret</title>
      <link>https://github.com/bol-van/zapret</link>
      <description>&lt;p&gt;DPI bypass multi platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zapret v70.5&lt;/h1&gt; 
&lt;h1&gt;ВНИМАНИЕ, остерегайтесь мошенников&lt;/h1&gt; 
&lt;p&gt;zapret является свободным и open source. Всякий, кто понуждает вас скачивать zapret только с его ресурса, требует удалить ссылки, видео, файлы, обосновывая эти требования авторскими правами, сам нарушает &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/LICENSE.txt&quot;&gt;лицензию&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Multilanguage README&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/readme.en.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/lang-en-red.svg?sanitize=true&quot; alt=&quot;en&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/readme.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/lang-ru-green.svg?sanitize=true&quot; alt=&quot;ru&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B7%D0%B0%D1%87%D0%B5%D0%BC-%D1%8D%D1%82%D0%BE-%D0%BD%D1%83%D0%B6%D0%BD%D0%BE&quot;&gt;Зачем это нужно&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B1%D1%8B%D1%81%D1%82%D1%80%D1%8B%D0%B9-%D1%81%D1%82%D0%B0%D1%80%D1%82&quot;&gt;Быстрый старт&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%B0%D0%BA-%D1%8D%D1%82%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82&quot;&gt;Как это работает&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%87%D1%82%D0%BE-%D1%81%D0%B5%D0%B9%D1%87%D0%B0%D1%81-%D0%BF%D1%80%D0%BE%D0%B8%D1%81%D1%85%D0%BE%D0%B4%D0%B8%D1%82-%D0%B2-%D1%80%D0%BE%D1%81%D1%81%D0%B8%D0%B8&quot;&gt;Что сейчас происходит в России&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%B0%D0%BA-%D1%8D%D1%82%D0%BE-%D1%80%D0%B5%D0%B0%D0%BB%D0%B8%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BD%D0%B0-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B5-%D0%B2-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-linux&quot;&gt;Как это реализовать на практике в системе linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D1%8D%D1%82%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%82%D1%8C-%D0%BD%D0%B5-%D0%B1%D1%83%D0%B4%D0%B5%D1%82&quot;&gt;Когда это работать не будет&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nfqws&quot;&gt;nfqws&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B0%D1%82%D0%B0%D0%BA%D0%B0-%D0%B4%D0%B5%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-dpi&quot;&gt;АТАКА ДЕСИНХРОНИЗАЦИИ DPI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%84%D0%B5%D0%B9%D0%BA%D0%B8&quot;&gt;ФЕЙКИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F-%D1%84%D0%B5%D0%B9%D0%BA%D0%BE%D0%B2&quot;&gt;МОДИФИКАЦИЯ ФЕЙКОВ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tcp-%D1%81%D0%B5%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;TCP СЕГМЕНТАЦИЯ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%B5%D1%80%D0%B5%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D0%B5-sequence-numbers&quot;&gt;ПЕРЕКРЫТИЕ SEQUENCE NUMBERS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%81%D0%BF%D0%B5%D1%86%D0%B8%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D1%8B-ipv6&quot;&gt;СПЕЦИФИЧЕСКИЕ РЕЖИМЫ IPV6&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%BE%D0%BC%D0%B1%D0%B8%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%BE%D0%B2-%D0%B4%D0%B5%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8&quot;&gt;КОМБИНИРОВАНИЕ МЕТОДОВ ДЕСИНХРОНИЗАЦИИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B0%D0%BA%D1%86%D0%B8%D1%8F-dpi-%D0%BD%D0%B0-%D0%BE%D1%82%D0%B2%D0%B5%D1%82-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0&quot;&gt;РЕАКЦИЯ DPI НА ОТВЕТ СЕРВЕРА&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B6%D0%B8%D0%BC-synack&quot;&gt;РЕЖИМ SYNACK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B6%D0%B8%D0%BC-syndata&quot;&gt;РЕЖИМ SYNDATA&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B2%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D1%8B&quot;&gt;ВИРТУАЛЬНЫЕ МАШИНЫ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#conntrack&quot;&gt;CONNTRACK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B0%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B8%D0%BD%D0%B3&quot;&gt;РЕАССЕМБЛИНГ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D0%B0-udp&quot;&gt;ПОДДЕРЖКА UDP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#ip-%D1%84%D1%80%D0%B0%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;IP ФРАГМЕНТАЦИЯ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8&quot;&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#iptables-%D0%B4%D0%BB%D1%8F-nfqws&quot;&gt;IPTABLES ДЛЯ NFQWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nftables-%D0%B4%D0%BB%D1%8F-nfqws&quot;&gt;NFTABLES ДЛЯ NFQWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#flow-offloading&quot;&gt;FLOW OFFLOADING&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tpws&quot;&gt;tpws&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tcp-%D1%81%D0%B5%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2-tpws&quot;&gt;TCP СЕГМЕНТАЦИЯ В TPWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tlsrec&quot;&gt;TLSREC&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#mss&quot;&gt;MSS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B-%D0%B4%D1%83%D1%80%D0%B5%D0%BD%D0%B8%D1%8F&quot;&gt;ДРУГИЕ ПАРАМЕТРЫ ДУРЕНИЯ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8-1&quot;&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%81%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D1%8B%D0%B5-%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B&quot;&gt;СЛУЖЕБНЫЕ ПАРАМЕТРЫ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#iptables-%D0%B4%D0%BB%D1%8F-tpws&quot;&gt;IPTABLES ДЛЯ TPWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nftables-%D0%B4%D0%BB%D1%8F-tpws&quot;&gt;NFTABLES ДЛЯ TPWS&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#ip2net&quot;&gt;ip2net&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#mdig&quot;&gt;mdig&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D1%8B-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F-%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B0-%D0%B7%D0%B0%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-ip&quot;&gt;Способы получения списка заблокированных IP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF%D0%BE-%D0%B8%D0%BC%D0%B5%D0%BD%D0%B0%D0%BC-%D0%B4%D0%BE%D0%BC%D0%B5%D0%BD%D0%BE%D0%B2&quot;&gt;Фильтрация по именам доменов&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B6%D0%B8%D0%BC-%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D0%B0%D1%86%D0%B8%D0%B8-autohostlist&quot;&gt;Режим фильтрации autohostlist&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%BF%D1%80%D0%BE%D0%B2%D0%B0%D0%B9%D0%B4%D0%B5%D1%80%D0%B0&quot;&gt;Проверка провайдера&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B2%D1%8B%D0%B1%D0%BE%D1%80-%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D0%BE%D0%B2&quot;&gt;Выбор параметров&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%B8%D0%BA%D1%80%D1%83%D1%87%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BA-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D1%84%D0%B0%D0%B5%D1%80%D0%B2%D0%BE%D0%BB%D0%BE%D0%BC-%D0%B8%D0%BB%D0%B8-%D1%81%D0%B2%D0%BE%D0%B5%D0%B9-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D0%BA%D0%B0&quot;&gt;Прикручивание к системе управления фаерволом или своей системе запуска&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B2%D0%B0%D1%80%D0%B8%D0%B0%D0%BD%D1%82-custom&quot;&gt;Вариант custom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%B0%D1%8F-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0&quot;&gt;Простая установка&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BF%D0%BE%D0%B4-systemd&quot;&gt;Установка под systemd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%B0%D1%8F-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%B0-openwrt&quot;&gt;Простая установка на openwrt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%B0-openwrt-%D0%B2-%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B5-%D0%BE%D1%81%D1%82%D1%80%D0%BE%D0%B9-%D0%BD%D0%B5%D1%85%D0%B2%D0%B0%D1%82%D0%BA%D0%B8-%D0%BC%D0%B5%D1%81%D1%82%D0%B0-%D0%BD%D0%B0-%D0%B4%D0%B8%D1%81%D0%BA%D0%B5&quot;&gt;Установка на openwrt в режиме острой нехватки места на диске&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#android&quot;&gt;Android&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BC%D1%8B-%D0%B8-%D1%80%D0%BE%D1%83%D1%82%D0%B5%D1%80%D1%8B-huawei&quot;&gt;Мобильные модемы и роутеры huawei&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#freebsd-openbsd-macos&quot;&gt;FreeBSD, OpenBSD, MacOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D1%88%D0%B8%D0%B2%D0%BA%D0%B8&quot;&gt;Другие прошивки&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BE%D0%B1%D1%85%D0%BE%D0%B4-%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%BD%D0%B8%D0%B9-%D1%85%D0%BE%D1%81%D1%82&quot;&gt;Обход блокировки через сторонний хост&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%81%D1%82%D0%BE%D0%B8%D1%82-%D0%B2%D0%BB%D0%BE%D0%B6%D0%B8%D1%82%D1%8C%D1%81%D1%8F-%D0%B2-%D0%BF%D0%BE%D0%BA%D1%83%D0%BF%D0%BA%D1%83-vps&quot;&gt;Почему стоит вложиться в покупку VPS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%82%D1%8C-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B0&quot;&gt;Поддержать разработчика&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Зачем это нужно&lt;/h2&gt; 
&lt;p&gt;Автономное средство противодействия DPI, которое не требует подключения каких-либо сторонних серверов. Может помочь обойти блокировки или замедление сайтов HTTP(S), сигнатурный анализ TCP и UDP протоколов, например, с целью блокировки VPN.&lt;/p&gt; 
&lt;p&gt;Проект нацелен прежде всего на маломощные embedded устройства - роутеры, работающие под OpenWrt. Поддерживаются традиционные Linux-системы, FreeBSD, OpenBSD, частично macOS. В некоторых случаях возможна самостоятельная прикрутка решения к различным прошивкам.&lt;/p&gt; 
&lt;p&gt;Большая часть функционала работает на Windows.&lt;/p&gt; 
&lt;h2&gt;Быстрый старт&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/quick_start.md&quot;&gt;Linux/openWrt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/quick_start_windows.md&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Как это работает&lt;/h2&gt; 
&lt;p&gt;В самом простейшем случае вы имеете дело с пассивным DPI. Пассивный DPI может читать трафик из потока, может инжектить свои пакеты, но не может блокировать проходящие пакеты. Если запрос &quot;плохой&quot;, пассивный DPI инжектит пакет RST, опционально дополняя его пакетом HTTP redirect. Если фейк пакет инжектится только для клиента, в этом случае можно обойтись командами iptables для дропа RST и/или редиректа на заглушку по определённым условиям, которые нужно подбирать для каждого провайдера индивидуально. Так мы обходим последствия срабатывания триггера запрета. Если пассивный DPI направляет пакет RST в том числе и серверу, то вы ничего с этим не сможете сделать. Ваша задача — не допустить срабатывания триггера запрета. Одними iptables уже не обойтись. Этот проект нацелен именно на предотвращение срабатывания запрета, а не ликвидацию его последствий.&lt;/p&gt; 
&lt;p&gt;Активный DPI ставится в разрез провода и может дропать пакеты по любым критериям, в том числе распознавать TCP-потоки и блокировать любые пакеты, принадлежащие потоку.&lt;/p&gt; 
&lt;p&gt;Как не допустить срабатывания триггера запрета? Послать то, на что DPI не рассчитывает и что ломает ему алгоритм распознавания запросов и их блокировки.&lt;/p&gt; 
&lt;p&gt;Некоторые DPI не могут распознать HTTP-запрос, если он разделен на TCP-сегменты. Например, запрос вида &lt;code&gt;GET / HTTP/1.1\r\nHost: kinozal.tv......&lt;/code&gt; мы посылаем двумя частями: сначала идет &lt;code&gt;GET&lt;/code&gt;, затем &lt;code&gt;/ HTTP/1.1\r\nHost: kinozal.tv.....&lt;/code&gt;. Другие DPI спотыкаются, когда заголовок &lt;code&gt;Host:&lt;/code&gt; пишется в другом регистре: например, &lt;code&gt;host:&lt;/code&gt;. Кое-где работает добавление дополнительного пробела после метода: &lt;code&gt;GET /&lt;/code&gt; → &lt;code&gt;GET /&lt;/code&gt; или добавление точки в конце имени хоста: &lt;code&gt;Host: kinozal.tv.&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Существует и более продвинутая магия, направленная на преодоление DPI на пакетном уровне.&lt;/p&gt; 
&lt;p&gt;Подробнее про DPI:&lt;br&gt; &lt;a href=&quot;https://habr.com/ru/post/335436&quot;&gt;https://habr.com/ru/post/335436&lt;/a&gt; или &lt;a href=&quot;https://web.archive.org/web/20230331233644/https://habr.com/ru/post/335436/&quot;&gt;https://web.archive.org/web/20230331233644/https://habr.com/ru/post/335436/&lt;/a&gt; &lt;br&gt; &lt;a href=&quot;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&quot;&gt;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Что сейчас происходит в России&lt;/h2&gt; 
&lt;p&gt;Раньше, до внедрения повсеместных систем ТСПУ, использовался зоопарк различных DPI у провайдеров. Какие-то были активными, какие-то пассивными. Сейчас время простых iptables окончательно ушло. Везде активный DPI ТСПУ, но кое-где могут оставаться невыключенными дополнительные старые DPI из зоопарка. В этом случае приходится обходить сразу несколько DPI. Все больше становится внереестровых блокировок, о которых вы узнаете только по факту недоступности чего-либо, в списках этого нет. Применяются блокировки некоторых диапазонов ip адресов (автономный обход невозможен) и протоколов (VPN). На некоторых диапазонах IP используется более строгий фильтр, распознающий попытки обмана через сегментацию. Должно быть это связано с некоторыми сервисами, которые пытаются таким образом обмануть DPI.&lt;/p&gt; 
&lt;h2&gt;Как это реализовать на практике в системе linux&lt;/h2&gt; 
&lt;p&gt;Если кратко, то варианты можно классифицировать по следующей схеме :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Пассивный DPI, не отправляющий RST серверу. Помогут индивидуально настраиваемые под провайдера команды iptables. На rutracker в разделе &quot;обход блокировок - другие способы&quot; по этому вопросу существует отдельная тема. В данном проекте не рассматривается. Если вы не допустите срабатывание триггера запрета, то и не придется бороться с его последствиями.&lt;/li&gt; 
 &lt;li&gt;Модификация TCP соединения на уровне потока. Реализуется через proxy или transparent proxy.&lt;/li&gt; 
 &lt;li&gt;Модификация TCP соединения на уровне пакетов. Реализуется через обработчик очереди NFQUEUE и raw сокеты.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Для вариантов 2 и 3 реализованы программы tpws и nfqws соответственно. Чтобы они работали, необходимо их запустить с нужными параметрами и перенаправить на них определенный трафик средствами iptables или nftables.&lt;/p&gt; 
&lt;h2&gt;Когда это работать не будет&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Если подменяется DNS. С этой проблемой легко справиться.&lt;/li&gt; 
 &lt;li&gt;Если блокировка осуществляется по IP.&lt;/li&gt; 
 &lt;li&gt;Если соединение проходит через фильтр, способный реконструировать TCP соединение, и который следует всем стандартам. Например, нас заворачивают на squid. Соединение идет через полноценный стек tcpip операционной системы. Проект нацелен на обман DPI, который всилу ограниченности ресурсов и большого трафика вынужден интерпретировать его лишь ограниченно. Обмануть полноценный стек ОС и полноценные серверные приложения не получится.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;nfqws&lt;/h2&gt; 
&lt;p&gt;Эта программа - модификатор пакетов и обработчик очереди NFQUEUE. Для BSD систем существует адаптированный вариант - dvtws, собираемый из тех же исходников (см. &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/bsd.md&quot;&gt;документация BSD&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@&amp;lt;config_file&amp;gt;|$&amp;lt;config_file&amp;gt;                      ; читать конфигурацию из файла. опция должна быть первой. остальные опции игнорируются.

--debug=0|1                                        ; 1=выводить отладочные сообщения
--dry-run                                          ; проверить опции командной строки и выйти. код 0 - успешная проверка.
--version                                          ; вывести версию и выйти
--comment                                          ; любой текст (игнорируется)
--daemon                                           ; демонизировать прогу
--pidfile=&amp;lt;file&amp;gt;                                   ; сохранить PID в файл
--user=&amp;lt;username&amp;gt;                                  ; менять uid процесса
--uid=uid[:gid]                                    ; менять uid процесса
--qnum=N                                           ; номер очереди N
--bind-fix4                                        ; пытаться решить проблему неверного выбора исходящего интерфейса для сгенерированных ipv4 пакетов
--bind-fix6                                        ; пытаться решить проблему неверного выбора исходящего интерфейса для сгенерированных ipv6 пакетов
--wsize=&amp;lt;winsize&amp;gt;[:&amp;lt;scale_factor&amp;gt;]                 ; менять tcp window size на указанный размер в SYN,ACK. если не задан scale_factor, то он не меняется (устарело !)
--wssize=&amp;lt;winsize&amp;gt;[:&amp;lt;scale_factor&amp;gt;]                ; менять tcp window size на указанный размер в исходящих пакетах. scale_factor по умолчанию 0. (см. conntrack !)
--wssize-cutoff=[n|d|s]N                           ; изменять server window size в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N
--ctrack-timeouts=S:E:F[:U]                        ; таймауты внутреннего conntrack в состояниях SYN, ESTABLISHED, FIN, таймаут udp. по умолчанию 60:300:60:60
--hostcase                                         ; менять регистр заголовка &quot;Host:&quot; по умолчанию на &quot;host:&quot;.
--hostnospace                                      ; убрать пробел после &quot;Host:&quot; и переместить его в конец значения &quot;User-Agent:&quot; для сохранения длины пакета
--methodeol                                        ; добавить перевод строки в unix стиле (&#39;\n&#39;) перед методом и убрать пробел из Host: : &quot;GET / ... Host: domain.com&quot; =&amp;gt; &quot;\nGET  / ... Host:domain.com&quot;
--hostspell=HoST                                   ; точное написание заголовка Host (можно &quot;HOST&quot; или &quot;HoSt&quot;). автоматом включает --hostcase
--domcase                                          ; домен после Host: сделать таким : TeSt.cOm
--dpi-desync=[&amp;lt;mode0&amp;gt;,]&amp;lt;mode&amp;gt;[,&amp;lt;mode2]             ; атака по десинхронизации DPI. mode : synack syndata fake fakeknown rst rstack hopbyhop destopt ipfrag1 multisplit multidisorder fakedsplit fakeddisorder ipfrag2 udplen tamper
--dpi-desync-fwmark=&amp;lt;int|0xHEX&amp;gt;                    ; бит fwmark для пометки десинхронизирующих пакетов, чтобы они повторно не падали в очередь. default = 0x40000000
--dpi-desync-ttl=&amp;lt;int&amp;gt;                             ; установить ttl для десинхронизирующих пакетов
--dpi-desync-ttl6=&amp;lt;int&amp;gt;                            ; установить ipv6 hop limit для десинхронизирующих пакетов. если не указано, используется значение ttl
--dpi-desync-autottl=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]]     ; режим auto ttl для ipv4 и ipv6. по умолчанию: 1:3-20. delta=0 отключает функцию.
--dpi-desync-autottl6=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]]    ; переопределение предыдущего параметра для ipv6
--dpi-desync-fooling=&amp;lt;fooling&amp;gt;                     ; дополнительные методики как сделать, чтобы фейковый пакет не дошел до сервера. none md5sig badseq badsum datanoack hopbyhop hopbyhop2
--dpi-desync-repeats=&amp;lt;N&amp;gt;                           ; посылать каждый генерируемый в nfqws пакет N раз (не влияет на остальные пакеты)
--dpi-desync-skip-nosni=0|1                        ; 1(default)=не применять dpi desync для запросов без hostname в SNI, в частности для ESNI
--dpi-desync-split-pos=N|-N|marker+N|marker-N      ; список через запятую маркеров для tcp сегментации в режимах split и disorder
--dpi-desync-split-seqovl=N|-N|marker+N|marker-N   ; единичный маркер, определяющий величину перекрытия sequence в режимах split и disorder. для split поддерживается только положительное число.
--dpi-desync-split-seqovl-pattern=&amp;lt;filename&amp;gt;|0xHEX ; чем заполнять фейковую часть overlap
--dpi-desync-fakedsplit-pattern=&amp;lt;filename&amp;gt;|0xHEX   ; чем заполнять фейки в fakedsplit/fakeddisorder
--dpi-desync-badseq-increment=&amp;lt;int|0xHEX&amp;gt;          ; инкремент sequence number для badseq. по умолчанию -10000
--dpi-desync-badack-increment=&amp;lt;int|0xHEX&amp;gt;          ; инкремент ack sequence number для badseq. по умолчанию -66000
--dpi-desync-any-protocol=0|1                      ; 0(default)=работать только по http request и tls clienthello  1=по всем непустым пакетам данных
--dpi-desync-fake-http=&amp;lt;filename&amp;gt;|0xHEX	           ; файл, содержащий фейковый http запрос для dpi-desync=fake, на замену стандартному www.iana.org
--dpi-desync-fake-tls=&amp;lt;filename&amp;gt;|0xHEX             ; файл, содержащий фейковый tls clienthello для dpi-desync=fake, на замену стандартному
--dpi-desync-fake-tls-mod=mod[,mod]                ; список через запятую режимов runtime модификации фейков : none,rnd,rndsni,dupsid,padencap
--dpi-desync-fake-unknown=&amp;lt;filename&amp;gt;|0xHEX         ; файл, содержащий фейковый пейлоад неизвестного протокола для dpi-desync=fake, на замену стандартным нулям 256 байт
--dpi-desync-fake-syndata=&amp;lt;filename&amp;gt;|0xHEX         ; файл, содержащий фейковый пейлоад пакета SYN для режима десинхронизации syndata
--dpi-desync-fake-quic=&amp;lt;filename&amp;gt;|0xHEX            ; файл, содержащий фейковый QUIC Initial
--dpi-desync-fake-dht=&amp;lt;filename&amp;gt;|0xHEX             ; файл, содержащий фейковый пейлоад DHT протокола для dpi-desync=fake, на замену стандартным нулям 64 байт
--dpi-desync-fake-unknown-udp=&amp;lt;filename&amp;gt;|0xHEX     ; файл, содержащий фейковый пейлоад неизвестного udp протокола для dpi-desync=fake, на замену стандартным нулям 64 байт
--dpi-desync-udplen-increment=&amp;lt;int&amp;gt;                ; насколько увеличивать длину udp пейлоада в режиме udplen
--dpi-desync-udplen-pattern=&amp;lt;filename&amp;gt;|0xHEX       ; чем добивать udp пакет в режиме udplen. по умолчанию - нули
--dpi-desync-start=[n|d|s]N                        ; применять dpi desync только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру больше или равно N
--dpi-desync-cutoff=[n|d|s]N                       ; применять dpi desync только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N
--hostlist=&amp;lt;filename&amp;gt;                              ; действовать только над доменами, входящими в список из filename. поддомены автоматически учитываются, если хост не начинается с &#39;^&#39;.
                                                   ; в файле должен быть хост на каждой строке.
                                                   ; список читается при старте и хранится в памяти в виде иерархической структуры для быстрого поиска.
                                                   ; при изменении времени модификации файла он перечитывается автоматически по необходимости
                                                   ; список может быть запакован в gzip. формат автоматически распознается и разжимается
                                                   ; списков может быть множество. пустой общий лист = его отсутствие
                                                   ; хосты извлекаются из Host: хедера обычных http запросов и из SNI в TLS ClientHello.
--hostlist-domains=&amp;lt;domain_list&amp;gt;                   ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-exclude=&amp;lt;filename&amp;gt;                      ; не применять дурение к доменам из листа. может быть множество листов. схема аналогична include листам.
--hostlist-exclude-domains=&amp;lt;domain_list&amp;gt;           ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-auto=&amp;lt;filename&amp;gt;                         ; обнаруживать автоматически блокировки и заполнять автоматический hostlist (требует перенаправления входящего трафика)
--hostlist-auto-fail-threshold=&amp;lt;int&amp;gt;               ; сколько раз нужно обнаружить ситуацию, похожую на блокировку, чтобы добавить хост в лист (по умолчанию: 3)
--hostlist-auto-fail-time=&amp;lt;int&amp;gt;                    ; все эти ситуации должны быть в пределах указанного количества секунд (по умолчанию: 60)
--hostlist-auto-retrans-threshold=&amp;lt;int&amp;gt;            ; сколько ретрансмиссий запроса считать блокировкой (по умолчанию: 3)
--hostlist-auto-debug=&amp;lt;logfile&amp;gt;                    ; лог положительных решений по autohostlist. позволяет разобраться почему там появляются хосты.
--new                                              ; начало новой стратегии (новый профиль)
--skip                                             ; не использовать этот профиль . полезно для временной деактивации профиля без удаления параметров.
--filter-l3=ipv4|ipv6                              ; фильтр версии ip для текущей стратегии
--filter-tcp=[~]port1[-port2]|*                    ; фильтр портов tcp для текущей стратегии. ~ означает инверсию. установка фильтра tcp и неустановка фильтра udp запрещает udp. поддерживается список через запятую.
--filter-udp=[~]port1[-port2]|*                    ; фильтр портов udp для текущей стратегии. ~ означает инверсию. установка фильтра udp и неустановка фильтра tcp запрещает tcp. поддерживается список через запятую.
--filter-l7=[http|tls|quic|wireguard|dht|unknown]  ; фильтр протокола L6-L7. поддерживается несколько значений через запятую.
--ipset=&amp;lt;filename&amp;gt;                                 ; включающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-ip=&amp;lt;ip_list&amp;gt;                               ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
--ipset-exclude=&amp;lt;filename&amp;gt;                         ; исключающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-exclude-ip=&amp;lt;ip_list&amp;gt;                       ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;--debug&lt;/code&gt; позволяет выводить подробный лог действий на консоль, в syslog или в файл. Может быть важен порядок следования опций. &lt;code&gt;--debug&lt;/code&gt; лучше всего указывать в самом начале. Опции анализируются последовательно. Если ошибка будет при проверке опции, а до анализа &lt;code&gt;--debug&lt;/code&gt; еще дело не дошло, то сообщения не будут выведены в файл или syslog. При логировании в файл процесс не держит файл открытым. Ради каждой записи файл открывается и потом закрывается. Так что файл можно удалить в любой момент, и он будет создан заново при первом же сообщении в лог. Но имейте в виду, что если вы запускаете процесс под root, то будет сменен UID на не-root. В начале на лог файл меняется owner, иначе запись будет невозможна. Если вы потом удалите файл, и у процесса не будет прав на создание файла в его директории, лог больше не будет вестись. Вместо удаления лучше использовать truncate. В шелле это можно сделать через команду &quot;: &amp;gt;filename&quot;&lt;/p&gt; 
&lt;h3&gt;АТАКА ДЕСИНХРОНИЗАЦИИ DPI&lt;/h3&gt; 
&lt;p&gt;Суть ее в следующем. Берется оригинальный запрос, модифицируется, добавляется поддельная информация (фейки) таким образом, чтобы ОС сервера передала серверному процессу оригинальный запрос в неизменном виде, а DPI увидел другое. То, что он блокировать не станет. Сервер видит одно, DPI - другое. DPI не понимает, что передается запрещенный запрос и не блокирует его.&lt;/p&gt; 
&lt;p&gt;Есть арсенал возможностей, чтобы достичь такого результата. Это может быть передача фейк пакетов, чтобы они дошли до DPI, но не дошли до сервера. Может использоваться фрагментация на уровне TCP (сегментация) или на уровне IP. Есть атаки, основанные на игре с tcp sequence numbers или с перепутыванием порядка следования tcp сегментов. Методы могут сочетаться в различных вариантах.&lt;/p&gt; 
&lt;h3&gt;ФЕЙКИ&lt;/h3&gt; 
&lt;p&gt;Фейки - это отдельные сгенерированные nfqws пакеты, несущие ложную информацию для DPI. Они либо не должны дойти до сервера, либо могут дойти, но должны быть им отброшены. Иначе получается слом tcp соединения или нарушение целостности передаваемого потока, что гарантированно приводит к поломке ресурса. Есть ряд методов для решения этой задачи.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;md5sig&lt;/code&gt; добавляет TCP опцию &lt;strong&gt;MD5 signature&lt;/strong&gt;. Работает не на всех серверах. Пакеты с md5 обычно отбрасывают только linux. Требуется значительное увеличение длины tcp пакета, чтобы вместить tcp option. При обработке многосегментных запросов (TLS Kyber) первый пакет идет полный под MTU. При fakedsplit/fakeddisorder на небольших позициях отдельные tcp сегменты достаточно велики, чтобы внедрение md5 tcp option вызвало переполнение MTU и ошибку отправки &quot;message too long&quot;. &lt;code&gt;nfqws&lt;/code&gt; не умеет перераспределять данные между tcp сегментами, поэтому надо или отказываться от kyber, или увеличивать сплит-позицию, или отказываться от fakedsplit/fakeddisorder.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;badsum&lt;/code&gt; портит контрольную сумму TCP. Не сработает, если ваше устройство за NAT, который не пропускает пакеты с инвалидной суммой. Наиболее распространенная настройка NAT роутера в Linux их не пропускает. На Linux построено большинство домашних роутеров. Непропускание обеспечивается так : настройка ядра sysctl по умолчанию &lt;code&gt;net.netfilter.nf_conntrack_checksum=1&lt;/code&gt; заставляет conntrack проверять tcp и udp чексуммы входящих пакетов и выставлять state INVALID для пакетов с инвалидной суммой. Обычно в правилах iptables вставляется правило для дропа пакетов с состоянием INVALID в цепочке FORWARD. Совместное сочетание этих факторов приводит к непрохождению badsum через такой роутер. В OpenWrt из коробки &lt;code&gt;net.netfilter.nf_conntrack_checksum=0&lt;/code&gt;, в других роутерах часто нет, и не всегда это можно изменить. Чтобы nfqws мог работать через роутер, нужно на нем выставить указанное значение sysctl в 0. nfqws на самом роутере будет работать и без этой настройки, потому что чексумма локально созданных пакетов не проверяется никогда. Если роутер за другим NAT, например провайдерским, и он не пропускает invalid packets вы ничего не сможете с этим сделать. Но обычно провайдеры все же пропускают badsum. На некоторых адаптерах/свитчах/драйверах принудительно включен rx-checksum offload, badsum пакеты отсекаются еще до получения в ОС. В этом случае если что-то и можно сделать, то только модифицировать драйвер, что представляется задачей крайне нетривиальной. Установлено, что так себя ведут некоторые роутеры на базе mediatek. badsum пакеты уходят с клиентской ОС, но роутером не видятся в br-lan через tcpdump. При этом если nfqws выполняется на самом роутере, обход может работать. badsum нормально уходят с внешнего интерфейса.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;badseq&lt;/code&gt; увеличивает TCP sequence number на определенное значение, выводя его тем самым из TCP window. Такие пакеты будут наверняка отброшены принимающим узлом, но так же и DPI, если он ориентируется на sequence numbers. По умолчанию смещение seq выбирается -10000. Практика показала, что некоторые DPI не пропускают seq вне определенного окна. Однако, такое небольшое смещение может вызвать проблемы при существенной потоковой передаче и потере пакетов. Если вы используете &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt;, может понадобиться установить badseq increment 0x80000000. Это обеспечит надежную гарантию, что поддельный пакет не вклинится в tcp window на сервере. Так же было замечено, что badseq ломает логику некоторых DPI при анализе http, вызывая зависание соединения. Причем на тех же DPI TLS с badseq работает нормально.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;TTL&lt;/code&gt; казалось бы - лучший вариант, но он требует индивидуальной настройки под каждого провайдера. Если DPI находится дальше локальных сайтов провайдера, то вы можете отрезать себе доступ к ним. Ситуация усугубляется наличием ТСПУ на магистралах, что вынуждает делать TTL достаточно высоким, увеличивая риск пробоя фейка до сервера. Необходим ip exclude list, заполняемый вручную. Вместе с ttl можно применять md5sig. Это ничего не испортит, зато дает неплохой шанс работы сайтов, до которых &quot;плохой&quot; пакет дойдет по TTL. Если не удается найти автоматическое решение, воспользуйтесь файлом &lt;code&gt;zapret-hosts-user-exclude.txt&lt;/code&gt;. Некоторые стоковые прошивки роутеров фиксируют исходящий TTL, без отключения этой опции через них работать не будет. КАКИМ СТОИТ ВЫБИРАТЬ TTL : найдите минимальное значение, при котором обход еще работает. Это и будет номер хопа вашего DPI.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hopbyhop&lt;/code&gt; относится только к ipv6. Добавляется ipv6 extenstion header &lt;code&gt;hop-by-hop options&lt;/code&gt;. В варианте &lt;code&gt;hopbyhop2&lt;/code&gt; добавляются 2 хедера, что является нарушением стандарта и гарантированно отбрасывается стеком протоколов во всех ОС. Один хедер hop-by-hop принимается всеми ОС, однако на некоторых каналах/провайдерах такие пакеты могут фильтроваться и не доходить. Расчет идет на то, что DPI проанализирует пакет с hop-by-hop, но он либо не дойдет до адресата в силу фильтров провайдера, либо будет отброшен сервером, потому что хедера два.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datanoack&lt;/code&gt; высылает фейки со снятым tcp флагом ACK. Сервера такое не принимают, а DPI может принять. Эта техника может ломать NAT и не всегда работает с iptables, если используется masquerade, даже с локальной системы (почти всегда на роутерах ipv4). На системах c iptables без masquerade и на nftables работает без ограничений. Экспериментально выяснено, что многие провайдерские NAT не отбрасывают эти пакеты, потому работает даже с внутренним провайдерским IP. Но linux NAT оно не пройдет, так что за домашним роутером эта техника скорее всего не сработает, но может сработать с него. Может сработать и через роутер, если подключение по проводу, и на роутере включено аппаратное ускорение.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;autottl&lt;/code&gt;. Суть режима в автоматическом определении TTL, чтобы он почти наверняка прошел DPI и немного не дошел до сервера. Берутся базовые значения TTL 64,128,255, смотрится входящий пакет (да, требуется направить первый входящий пакет на nfqws !). Вычисляется длина пути, отнимается &lt;code&gt;delta&lt;/code&gt; (1 по умолчанию). Если TTL вне диапазона (min,max - 3,20 по умолчанию), то берутся значения min,max, чтобы вписаться в диапазон. Если при этом полученный TTL больше длины пути, то автоматизм не сработал и берутся фиксированные значения TTL для атаки. Техника позволяет решить вопрос, когда вся сеть перегорожена шлагбаумами (DPI, ТСПУ) везде где только можно, включая магистралов. Но потенциально может давать сбои. Например, при асимметрии входящего и исходящего канала до конкретного сервера. На каких-то провайдерах эта техника будет работать неплохо, на других доставит больше проблем, чем пользы. Где-то может потребоваться тюнинг параметров. Лучше использовать с дополнительным ограничителем.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Режимы дурения могут сочетаться в любых комбинациях. &lt;code&gt;--dpi-desync-fooling&lt;/code&gt; берет множество значений через запятую.&lt;/p&gt; 
&lt;p&gt;Возможно задание множества фейков через повторение парамеров &lt;code&gt;--dpi-desync-fake-???&lt;/code&gt;, кроме &lt;code&gt;--dpi-desync-fake-syndata&lt;/code&gt;. Фейки будут отосланы в указанном порядке. &lt;code&gt;--dpi-desync-repeats&lt;/code&gt; повторяет каждый отосланный фейк. Итоговый порядок будет такой : &lt;code&gt;fake1 fake1 fake1 fake2 fake2 fake2 fake3 fake3 fake3 .....&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;МОДИФИКАЦИЯ ФЕЙКОВ&lt;/h3&gt; 
&lt;p&gt;В nfqws зашит базовый вариант фейка для TLS. Его можно переопределить опцией &lt;code&gt;--dpi-desync-fake-tls&lt;/code&gt;. Переопределение фейков дает возможность использовать любые данные в качестве фейка для TLS. Можно использовать фейковый Client Hello с любым фингерпринтом и с любым SNI.&lt;/p&gt; 
&lt;p&gt;Некоторые модификации можно делать в процессе выполнения с помощью &lt;code&gt;--dpi-desync-fake-tls-mod&lt;/code&gt;. Часть из них работает при обработке каждого TLS Client Hello и может подстраиваться под отправляемые данные. Модификации требуют наличия полного валидного TLS Client Hello в качестве фейка, они не работают с произвольными данными.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;none&lt;/code&gt;. Не применять никакие модификации.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rnd&lt;/code&gt;. Рандомизировать поля &lt;code&gt;random&lt;/code&gt; и &lt;code&gt;session id&lt;/code&gt;. Выполняется на каждый запрос.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dupsid&lt;/code&gt;. Копировать &lt;code&gt;session ID&lt;/code&gt; из передаваемого TLS Client Hello. Имеет приоритет над &lt;code&gt;rnd&lt;/code&gt;. Выполняется на каждый запрос.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rndsni&lt;/code&gt;. Рандомизировать SNI. Если SNI &amp;gt;=7 символов, применяется случайный домен 2 уровня с известным TLD, иначе заполняется случайными символами без точки. Выполняется один раз при старте.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;padencap&lt;/code&gt;. Расширяется padding extension на размер передаваемого TLS Client Hello (включая многопакетный вариант с kyber). Если padding отсутствует, он добавляется в конец. Если присутствует - требуется, чтобы padding шел последним extension. Правятся все длины, чтобы создать видимость включения передаваемого TLS Client Hello в padding extension. Размер фейка не изменяется. Расчет идет на DPI, который не анализирует sequence numbers должным образом. Выполняется на каждый запрос.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;По умолчанию если не задан собственный фейк для TLS используются модификации &lt;code&gt;rnd,rndsni,dupsid&lt;/code&gt;. Если фейк задан, используется &lt;code&gt;none&lt;/code&gt;. Это соответствует поведению программы более старых версий с добавлением функции &lt;code&gt;dupsid&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Если задан режим модификации и имеется множество TLS фейков, модифицируются все фейки, являющиеся TLS Client Hello. Если нет ни одного TLS Client Hello фейка, программа завершается с ошибкой.&lt;/p&gt; 
&lt;h3&gt;TCP СЕГМЕНТАЦИЯ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;multisplit&lt;/code&gt;. нарезаем запрос на указанных в &lt;code&gt;--dpi-desync-split-pos&lt;/code&gt; позициях.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;multidisorder&lt;/code&gt;. нарезаем запрос на указанных в &lt;code&gt;--dpi-desync-split-pos&lt;/code&gt; позициях и отправляем в обратном порядке.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fakedsplit&lt;/code&gt;. нарезаем запрос на 2 части, обрамляя каждую часть фейками : фейк 1-й части, 1 часть, фейк 1-й части, фейк 2-й части, 2 часть, фейк 2-й части&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fakeddisorder&lt;/code&gt;. аналогично &lt;code&gt;fakedsplit&lt;/code&gt;, только в обратном порядке : фейк 2-й части, 2 часть, фейк 2-й части, фейк 1-й части, 1 часть, фейк 1 части.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Содержимое фейков в &lt;code&gt;fakedsplit&lt;/code&gt;/&lt;code&gt;fakeddisorder&lt;/code&gt; определяется параметром &lt;code&gt;--dpi-desync-fakedsplit-pattern&lt;/code&gt; (по умолчанию 0x00). Данные фейков берутся из паттерна со смещением, соответствующим смещению отсылаемых частей. Размеры фейков соответствуют длинам отсылаемых частей. Цель этих режимов - максимально усложнить выявление оригинальных данных среди фейков.&lt;/p&gt; 
&lt;p&gt;Использование &lt;code&gt;fakedsplit&lt;/code&gt; или &lt;code&gt;fakeddisorder&lt;/code&gt; на TLS kyber с md5sig fooling может привести к ошибкам &quot;message too long&quot;, если позиция сплита мала, поскольку будет превышение MTU из-за md5 tcp option.&lt;/p&gt; 
&lt;p&gt;Для определения позиций нарезки используются маркеры.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Абсолютный положительный маркер&lt;/strong&gt; - числовое смещение внутри пакета или группы пакетов от начала.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Абсолютный отрицательный маркер&lt;/strong&gt; - числовое смещение внутри пакета или группы пакетов от следующего за концом байта. -1 указывает на последний байт.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Относительный маркер&lt;/strong&gt; - положительное или отрицательное смещение относительно логической позиции внутри пакета или группы пакетов.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Относительные позиции :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; - начало метода HTTP (&#39;GET&#39;, &#39;POST&#39;, &#39;HEAD&#39;, ...). Метод обычно всегда находится на позиции 0, но может сместиться из-за &lt;code&gt;--methodeol&lt;/code&gt;. Тогда позиция может стать 1 или 2.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;host&lt;/strong&gt; - начало имени хоста в известном протоколе (http, TLS)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;endhost&lt;/strong&gt; - байт, следующий за последним байтом имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;sld&lt;/strong&gt; - начало домена 2 уровня в имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;endsld&lt;/strong&gt; - байт, следующий за последним байтом домена 2 уровня в имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;midsld&lt;/strong&gt; - середина домена 2 уровня в имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;sniext&lt;/strong&gt; - начало поля данных SNI extension в TLS. Любой extension состоит из 2-байтовых полей type и length, за ними идет поле данных.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Пример списка маркеров : &lt;code&gt;100,midsld,sniext+1,endhost-2,-10&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;При разбиении пакета первым делом происходит ресолвинг маркеров - нахождение всех указанных относительных позиций и применение смещений. Если относительная позиция отсутствует в текущем протоколе, такие позиции не применяются и отбрасываются. Дальше происходит нормализация позиций относительно смещения текущего пакета в группе пакетов (многопакетные запросы TLS с kyber, например). Выкидываются все позиции, выходящие за пределы текущего пакета. Оставшиеся сортируются в порядке возрастания и удаляются дубли. В вариантах &lt;code&gt;multisplit&lt;/code&gt; и &lt;code&gt;multidisorder&lt;/code&gt; если не осталось ни одной позиции, разбиение не происходит.&lt;/p&gt; 
&lt;p&gt;Варианты &lt;code&gt;fakedsplit&lt;/code&gt; и &lt;code&gt;fakeddisorder&lt;/code&gt; применяют только одну позицию сплита. Ее поиск среди списка &lt;code&gt;--dpi-desync-split-pos&lt;/code&gt; осуществляется особым образом. Сначала сверяются все относительные маркеры. Если среди них найден подходящий, применяется он. В противном случае сверяются все абсолютные маркеры. Если и среди них ничего не найдено, применяется позиция 1.&lt;/p&gt; 
&lt;p&gt;Например, можно написать &lt;code&gt;--dpi-desync-split-pos=method+2,midsld,5&lt;/code&gt;. Если протокол http, разбиение будет на позиции &lt;code&gt;method+2&lt;/code&gt;. Если протокол TLS - на позиции &lt;code&gt;midsld&lt;/code&gt;. Если протокол неизвестен и включено &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt;, разбиение будет на позиции 5. Чтобы все было однозначнее, можно использовать разные профили для разных протоколов и указывать только одну позицию, которая точно есть в этом протоколе.&lt;/p&gt; 
&lt;h3&gt;ПЕРЕКРЫТИЕ SEQUENCE NUMBERS&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;seqovl&lt;/code&gt; добавляет в начало одного из TCP сегментов &lt;code&gt;seqovl&lt;/code&gt; байт со смещенным в минус sequence number на величину &lt;code&gt;seqovl&lt;/code&gt;. Для &lt;code&gt;split&lt;/code&gt; - в начало первого сегмента, для &lt;code&gt;disorder&lt;/code&gt; - в начало предпоследнего отсылаемого сегмента (второго в оригинальном порядке следования).&lt;/p&gt; 
&lt;p&gt;В случае &lt;code&gt;split&lt;/code&gt; расчет идет на то, что предыдущий отсыл, если он был, уже попал в сокет серверного приложения, поэтому новая пришедшая часть лишь частично находится в пределах текущего окна (in-window). Спереди фейковая часть отбрасывается, а оставшаяся часть содержит оригинал и начинается с начала window, поэтому попадает в сокет. Серверное приложение получает все, что реально отсылает клиент, отбрасывая фейковую out-of-window часть. Но DPI не может этого понять, поэтому у него происходит sequence десинхронизация. Обязательно, чтобы первый сегмент вместе с &lt;code&gt;seqovl&lt;/code&gt; не превысили длину MTU. Эта ситуация распознается автоматически в Linux, и &lt;code&gt;seqovl&lt;/code&gt; отменяется. В остальных системах ситуация не распознается, и это приведет к поломке соединения. Поэтому выбирайте первую позицию сплита и &lt;code&gt;seqovl&lt;/code&gt; таким образом, чтобы MTU не был превышен в любом случае. Иначе дурение может не работать или работать хаотично.&lt;/p&gt; 
&lt;p&gt;Для &lt;code&gt;disorder&lt;/code&gt; overlap идет на предпоследнюю отсылаемую часть пакета. Для простоты будем считать, что разбиение идет на 2 части, шлются они в порядке &quot;2 1&quot; при оригинальном порядке &quot;1 2&quot;. Обязательно, чтобы &lt;code&gt;seqovl&lt;/code&gt; был меньше позиции первого сплита, иначе все отосланное будет передано в сокет сразу же, включая фейк, ломая протокол прикладного уровня. Такая ситуация легко обнаруживается программой, и &lt;code&gt;seqovl&lt;/code&gt; отменяется. Увеличение размера пакета невозможно в принципе. При соблюдении условия 2-я часть пакета является полностью in-window, поэтому серверная ОС принимает ее целиком, включая фейк. Но поскольку начальная часть данных из 1 пакета еще не принята, то фейк и реальные данные остаются в памяти ядра, не отправляясь в серверное приложение. Как только приходит 1-я часть пакета, она переписывает фейковую часть в памяти ядра. Ядро получает данные из 1 и 2 части, поэтому далее идет отправка в сокет приложения. Таково поведение всех unix ОС, кроме solaris - оставлять последние принятые данные. Windows оставляет старые данные, поэтому disorder с seqovl будет приводить к зависаниям соединения при работе с Windows серверами. Solaris практически мертв, windows серверов очень немного. Можно использовать листы при необходимости. Метод позволяет обойтись без fooling и TTL. Фейки перемешаны с реальным данными. &lt;code&gt;fakedsplit/fakeddisorder&lt;/code&gt; по-прежнему добавляют дополнительные отдельные фейки.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;seqovl&lt;/code&gt; в варианте &lt;code&gt;split&lt;/code&gt; может быть только абсолютным положительным значением, поскольку применяется только в первому пакету. В варианте &lt;code&gt;disorder&lt;/code&gt; допустимо применение всех вариантов маркеров. Они автоматически нормализуются к текущему пакету в серии. Можно сплитать на &lt;code&gt;midsld&lt;/code&gt; и делать seqovl на &lt;code&gt;midsld-1&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;СПЕЦИФИЧЕСКИЕ РЕЖИМЫ IPV6&lt;/h3&gt; 
&lt;p&gt;Режимы десинхронизации &lt;code&gt;hopbyhop&lt;/code&gt;, &lt;code&gt;destopt&lt;/code&gt; и &lt;code&gt;ipfrag1&lt;/code&gt; (не путать с fooling !) относятся только к ipv6 и заключается в добавлении хедера &lt;code&gt;hop-by-hop options&lt;/code&gt;, &lt;code&gt;destination options&lt;/code&gt; или &lt;code&gt;fragment&lt;/code&gt; во все пакеты, попадающие под десинхронизацию. Здесь надо обязательно понимать, что добавление хедера увеличивает размер пакета, потому не может быть применено к пакетам максимального размера. Это имеет место при передаче больших сообщений. В случае невозможности отослать пакет дурение будет отменено, пакет будет выслан в оригинале. Расчет идет на то, что DPI увидит 0 в поле next header основного заголовка &lt;code&gt;ipv6&lt;/code&gt; и не будет скакать по extension хедерам в поисках транспортного хедера. Таким образом не поймет, что это tcp или udp, и пропустит пакет без анализа. Возможно, какие-то DPI на это купятся. Может сочетаться с любыми режимами 2-й фазы, кроме варианта &lt;code&gt;ipfrag1+ipfrag2&lt;/code&gt;. Например, &lt;code&gt;hopbyhop,multisplit&lt;/code&gt; означает разбить tcp пакет на несколько сегментов, в каждый из них добавить hop-by-hop. При &lt;code&gt;hopbyhop,ipfrag2&lt;/code&gt; последовательность хедеров будет : &lt;code&gt;ipv6,hop-by-hop&lt;/code&gt;,&lt;code&gt;fragment&lt;/code&gt;,&lt;code&gt;tcp/udp&lt;/code&gt;. Режим &lt;code&gt;ipfrag1&lt;/code&gt; может срабатывать не всегда без специальной подготовки. См. раздел &lt;code&gt;IP фрагментация&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;КОМБИНИРОВАНИЕ МЕТОДОВ ДЕСИНХРОНИЗАЦИИ&lt;/h3&gt; 
&lt;p&gt;В параметре dpi-desync можно указать до 3 режимов через запятую.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;0 фаза - предполагает работу на этапе установления соединения : &lt;code&gt;synack&lt;/code&gt;, &lt;code&gt;syndata&lt;/code&gt;, &lt;code&gt;--wsize&lt;/code&gt;, &lt;code&gt;--wssize&lt;/code&gt;. На эту фазу не действуют фильтры по &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8&quot;&gt;hostlist&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;1 фаза - отсылка чего-либо до оригинального пакета данных : &lt;code&gt;fake&lt;/code&gt;, &lt;code&gt;rst&lt;/code&gt;, &lt;code&gt;rstack&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;2 фаза - отсылка в модифицированном виде оригинального пакета данных (например, &lt;code&gt;fakedsplit&lt;/code&gt; или &lt;code&gt;ipfrag2&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Режимы требуют указания в порядке возрастания номеров фаз.&lt;/p&gt; 
&lt;h3&gt;РЕАКЦИЯ DPI НА ОТВЕТ СЕРВЕРА&lt;/h3&gt; 
&lt;p&gt;Есть DPI, которые анализируют ответы от сервера, в частности сертификат из ServerHello, где прописаны домены. Подтверждением доставки ClientHello является ACK пакет от сервера с номером ACK sequence, соответствующим длине ClientHello+1. В варианте disorder обычно приходит сперва частичное подтверждение (SACK), потом полный ACK. Если вместо ACK или SACK идет RST пакет с минимальной задержкой, то DPI вас отсекает еще на этапе вашего запроса. Если RST идет после полного ACK спустя задержку, равную примерно пингу до сервера, тогда вероятно DPI реагирует на ответ сервера. DPI может отстать от потока, если ClientHello его удовлетворил и не проверять ServerHello. Тогда вам повезло. Вариант fake может сработать. Если же он не отстает и упорно проверяет ServerHello, то можно попробовать заставить сервер высылать ServerHello частями через параметр --wssize (см. conntrack). Если и это не помогает, то сделать с этим что-либо вряд ли возможно без помощи со стороны сервера. Лучшее решение - включить на сервере поддержку TLS 1.3. В нем сертификат сервера передается в зашифрованном виде. Это рекомендация ко всем админам блокируемых сайтов. Включайте TLS 1.3. Так вы дадите больше возможностей преодолеть DPI.&lt;/p&gt; 
&lt;h3&gt;РЕЖИМ SYNACK&lt;/h3&gt; 
&lt;p&gt;В документации по geneva это называется &quot;TCB turnaround&quot;. Попытка ввести DPI в заблуждение относительно ролей клиента и сервера.&lt;/p&gt; 
&lt;p&gt;Поскольку режим нарушает работу NAT, техника может сработать только если между атакующим устройством и DPI нет NAT. Атака не сработает через NAT роутер, но может сработать с него. Для реализации атаки на проходящий трафик требуются nftables и схема &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nftables-%D0%B4%D0%BB%D1%8F-nfqws&quot;&gt;POSTNAT&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;РЕЖИМ SYNDATA&lt;/h3&gt; 
&lt;p&gt;Тут все просто. Добавляются данные в пакет SYN. Все ОС их игнорируют, если не используется TCP fast open (TFO), а DPI может воспринять, не разобравшись есть там TFO или нет. Оригинальные соединения с TFO не трогаются, поскольку это их точно сломает. Без уточняющего параметра добавляются 16 нулевых байтов.&lt;/p&gt; 
&lt;h3&gt;ВИРТУАЛЬНЫЕ МАШИНЫ&lt;/h3&gt; 
&lt;p&gt;Изнутри VM от virtualbox и vmware в режиме NAT не работают многие техники пакетной магии nfqws. Принудительно заменяется ttl, не проходят фейк пакеты. Необходимо настроить сеть в режиме bridge.&lt;/p&gt; 
&lt;h3&gt;CONNTRACK&lt;/h3&gt; 
&lt;p&gt;nfqws оснащен ограниченной реализацией слежения за состоянием tcp соединений (conntrack). Он включается для реализации некоторых методов противодействия DPI. conntrack способен следить за фазой соединения : SYN,ESTABLISHED,FIN, количеством пакетов в каждую сторону, sequence numbers. conntrack способен &quot;кормиться&quot; пакетами в обе или только в одну сторону. Соединение попадает в таблицу при обнаружении пакетов с выставленными флагами SYN или SYN,ACK. Поэтому если необходим conntrack, в правилах перенаправления iptables соединение должно идти на nfqws с самого первого пакета, хотя затем может обрываться по фильтру connbytes. Для UDP инициатором попадания в таблицу является первый UDP пакет. Он же и определяет направление потока. Считается, что первый UDP пакет исходит от клиента к серверу. Далее все пакеты с совпадающими &lt;code&gt;src_ip,src_port,dst_ip,dst_port&lt;/code&gt; считаются принадлежащими этому потоку до истечения времени неактивности. conntrack - простенький, он не писался с учетом всевозможных атак на соединение, он не проверяет пакеты на валидность sequence numbers или чексумму. Его задача - лишь обслуживание нужд nfqws, он обычно кормится только исходящим трафиком, потому нечувствителен к подменам со стороны внешней сети. Соединение удаляется из таблицы, как только отпадает нужда в слежении за ним или по таймауту неактивности. Существуют отдельные таймауты на каждую фазу соединения. Они могут быть изменены параметром &lt;code&gt;--ctrack-timeouts&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--wssize&lt;/code&gt; позволяет изменить с клиента размер tcp window для сервера, чтобы он послал следующие ответы разбитыми на части. Чтобы это подействовало на все серверные ОС, необходимо менять window size в каждом исходящем с клиента пакете до отсылки сообщения, ответ на которое должен быть разбит (например, TLS ClientHello). Именно поэтому и необходим conntrack, чтобы знать когда надо остановиться. Если не остановиться и все время устанавливать низкий wssize, скорость упадет катастрофически. В linux это может быть купировано через connbytes, но в BSD системах такой возможности нет. В случае http(s) останавливаемся сразу после отсылки первого http запроса или TLS ClientHello. Если вы имеете дело с не http(s), то вам потребуется параметр &lt;code&gt;--wssize-cutoff&lt;/code&gt;. Он устанавливает предел, с которого действие wssize прекращается. Префикс d перед номером означает учитывать только пакеты с data payload, префикс s - relative sequence number, проще говоря количество переданных клиентом байтов + 1. Если проскочит пакет с http request или TLS ClientHello, действие wssize прекращается сразу же, не дожидаясь wssize-cutoff. Если ваш протокол склонен к долгому бездействию, следует увеличить таймаут фазы ESTABLISHED через параметр &lt;code&gt;--ctrack-timeouts&lt;/code&gt;. Таймаут по умолчанию низкий - всего 5 минут. Не забывайте, что nfqws кормится приходящими на него пакетами. Если вы ограничили поступление пакетов через connbytes, то в таблице могут остаться повисшие соединения в фазе ESTABLISHED, которые отвалятся только по таймауту. Для диагностики состояния conntrack пошлите сигнал SIGUSR1 процессу nfqws : &lt;code&gt;killall -SIGUSR1 nfqws&lt;/code&gt;. Текущая таблица будет выведена nfqws в stdout.&lt;/p&gt; 
&lt;p&gt;Обычно в SYN пакете клиент отсылает кроме window size еще и TCP extension &lt;code&gt;scaling factor&lt;/code&gt;. &lt;strong&gt;scaling factor&lt;/strong&gt; представляет из себя степень двойки, на которую умножается window size : 0=&amp;gt;1, 1=&amp;gt;2, 2=&amp;gt;4, ..., 8=&amp;gt;256, ... В параметре wssize scaling factor указывается через двоеточие. Scaling factor может только снижаться, увеличение заблокировано, чтобы не допустить превышение размера окна со стороны сервера. Для принуждения сервера к фрагментации ServerHello, чтобы избежать просекание имени сервера из сертификата сервера на DPI, лучше всего использовать &lt;code&gt;--wssize=1:6&lt;/code&gt;. Основное правило - делать &lt;code&gt;scale_factor&lt;/code&gt; как можно больше, чтобы после восстановления window size итоговый размер окна стал максимально возможным. Если вы сделаете 64:0, будет очень медленно. С другой стороны нельзя допустить, чтобы ответ сервера стал достаточно большим, чтобы DPI нашел там искомое.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--wssize&lt;/code&gt; не работает в профилях с хостлистами, поскольку он действует с самого начала соединения, когда еще нельзя принять решение о попадании в лист. Однако, профиль с auto hostlist может содержать --wssize. &lt;code&gt;--wssize&lt;/code&gt; может замедлять скорость и/или увеличивать время ответа сайтов, поэтому если есть другие работающие способы обхода DPI, лучше применять их.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--dpi-desync-cutoff&lt;/code&gt; позволяет задать предел, при достижении которого прекращается применение dpi-desync. Доступны префиксы n,d,s по аналогии с &lt;code&gt;--wssize-cutoff&lt;/code&gt;. Полезно совместно с &lt;code&gt;--dpi-desync-any-protocol=1&lt;/code&gt;. На склонных к бездействию соединениях следует изменить таймауты conntrack. Если соединение выпало из conntrack и задана опция &lt;code&gt;--dpi-desync-cutoff&lt;/code&gt;, &lt;code&gt;dpi desync&lt;/code&gt; применяться не будет.&lt;/p&gt; 
&lt;h3&gt;РЕАССЕМБЛИНГ&lt;/h3&gt; 
&lt;p&gt;nfqws поддерживает реассемблинг некоторых видов запросов. На текущий момент это TLS и QUIC ClientHello. Они бывают длинными, если в chrome включить пост-квантовую криптографию tls-kyber, и занимают, как правило, 2 или 3 пакета. kyber включен по умолчанию, начиная с chromium 124. chrome рандомизирует фингерпринт TLS. SNI может оказаться как в начале, так и в конце, то есть попасть в любой пакет. stateful DPI обычно реассемблирует запрос целиком, и только потом принимает решение о блокировке. В случае получения TLS или QUIC пакета с частичным ClientHello начинается процесс сборки, а пакеты задерживаются и не отсылаются до ее окончания. По окончании сборки пакеты проходит через десинхронизацию на основании полностью собранного ClientHello. При любой ошибке в процессе сборки задержанные пакеты немедленно отсылаются в сеть, а десинхронизация отменяется.&lt;/p&gt; 
&lt;p&gt;Есть специальная поддержка всех вариантов tcp сплита для многосегментного TLS. Если указать позицию сплита больше длины первого пакета, то разбивка происходит не обязательно первого пакета, а того, на который пришлась итоговая позиция. Если, допустим, клиент послал TLS ClientHello длиной 2000, SNI начинается с 1700, и заданы опции &lt;code&gt;fake,multisplit&lt;/code&gt;, то перед первым пакетом идет fake, затем первый пакет в оригинале, а последний пакет разбивается на 2 сегмента. В итоге имеем фейк в начале и 3 реальных сегмента.&lt;/p&gt; 
&lt;h3&gt;ПОДДЕРЖКА UDP&lt;/h3&gt; 
&lt;p&gt;Атаки на udp более ограничены в возможностях. udp нельзя фрагментировать иначе, чем на уровне ip. Для UDP действуют только режимы десинхронизации &lt;code&gt;fake&lt;/code&gt;, &lt;code&gt;hopbyhop&lt;/code&gt;, &lt;code&gt;destopt&lt;/code&gt;, &lt;code&gt;ipfrag1&lt;/code&gt;, &lt;code&gt;ipfrag2&lt;/code&gt;, &lt;code&gt;udplen&lt;/code&gt;, &lt;code&gt;tamper&lt;/code&gt;. Возможно сочетание &lt;code&gt;fake&lt;/code&gt;, &lt;code&gt;hopbyhop&lt;/code&gt;, &lt;code&gt;destopt&lt;/code&gt; с &lt;code&gt;ipfrag2&lt;/code&gt;, &lt;code&gt;fake&lt;/code&gt;, &lt;code&gt;fakeknown&lt;/code&gt; с udplen и tamper. &lt;code&gt;udplen&lt;/code&gt; увеличивает размер udp пакета на указанное в &lt;code&gt;--dpi-desync-udplen-increment&lt;/code&gt; количество байтов. Паддинг заполняется нулями по умолчанию, но можно задать свой паттерн. Предназначено для обмана DPI, ориентирующегося на размеры пакетов. Может сработать, если пользовательский протокол не привязан жестко к размеру udp пейлоада. Режим tamper означает модификацию пакетов известных протоколов особенным для протокола образом. На текущий момент работает только с DHT. Поддерживается определение пакетов QUIC Initial с расшифровкой содержимого и имени хоста, то есть параметр &lt;code&gt;--hostlist&lt;/code&gt; будет работать. Определяются пакеты wireguard handshake initiation и DHT (начинается с &#39;d1&#39;, кончается &#39;e&#39;). Для десинхронизации других протоколов обязательно указывать &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt;. Реализован conntrack для udp. Можно пользоваться --dpi-desync-cutoff. Таймаут conntrack для udp можно изменить 4-м параметром в &lt;code&gt;--ctrack-timeouts&lt;/code&gt;. Атака fake полезна только для stateful DPI, она бесполезна для анализа на уровне отдельных пакетов. По умолчанию fake наполнение - 64 нуля. Можно указать файл в &lt;code&gt;--dpi-desync-fake-unknown-udp&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;IP ФРАГМЕНТАЦИЯ&lt;/h3&gt; 
&lt;p&gt;Современная сеть практически не пропускает фрагментированные tcp на уровне ip. На udp с этим дело получше, поскольку некоторые udp протоколы могут опираться на этот механизм (IKE старых версий). Однако, кое-где бывает, что режут и фрагментированный udp. Роутеры на базе linux могут самопроизвольно собирать или перефрагментировать пакеты. Позиция фрагментации задается отдельно для tcp и udp. По умолчанию 24 и 8 соответственно, должна быть кратна 8. Смещение считается с транспортного заголовка.&lt;/p&gt; 
&lt;p&gt;Существует ряд моментов вокруг работы с фрагментами на Linux, без понимания которых может ничего не получиться.&lt;/p&gt; 
&lt;p&gt;ipv4 : Linux дает отсылать ipv4 фрагменты, но стандартные настройки iptables в цепочке OUTPUT могут вызывать ошибки отправки.&lt;/p&gt; 
&lt;p&gt;ipv6 : Нет способа для приложения гарантированно отослать фрагменты без дефрагментации в conntrack. На разных системах получается по-разному. Где-то нормально уходят, где-то пакеты дефрагментируются. Для ядер &amp;lt;4.16 похоже, что нет иного способа решить эту проблему, кроме как выгрузить модуль &lt;code&gt;nf_conntrack&lt;/code&gt;, который подтягивает зависимость &lt;code&gt;nf_defrag_ipv6&lt;/code&gt;. Он то как раз и выполняет дефрагментацию. Для ядер 4.16+ ситуация чуть лучше. Из дефрагментации исключаются пакеты в состоянии NOTRACK. Чтобы не загромождать описание, смотрите пример решения этой проблемы в &lt;code&gt;blockcheck.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Иногда требуется подгружать модуль &lt;code&gt;ip6table_raw&lt;/code&gt; с параметром &lt;code&gt;raw_before_defrag=1&lt;/code&gt;. В OpenWrt параметры модулей указываются через пробел после их названий в файлах &lt;code&gt;/etc/modules.d&lt;/code&gt;. В традиционных системах посмотрите используется ли &lt;code&gt;iptables-legacy&lt;/code&gt; или &lt;code&gt;iptables-nft&lt;/code&gt;. Если legacy, то нужно создать файл &lt;code&gt;/etc/modprobe.d/ip6table_raw.conf&lt;/code&gt; с содержимым :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;options ip6table_raw raw_before_defrag=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;В некоторых традиционных дистрибутивах можно изменить текущий ip6tables через : update-alternatives --config ip6tables Если вы хотите оставаться на iptables-nft, вам придется пересобрать патченную версию. Патч совсем небольшой. В &lt;code&gt;nft.c&lt;/code&gt; найдите фрагмент:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;        {
            .name	= &quot;PREROUTING&quot;,
            .type	= &quot;filter&quot;,
            .prio	= -300,	/* NF_IP_PRI_RAW */
            .hook	= NF_INET_PRE_ROUTING,
        },
        {
            .name	= &quot;OUTPUT&quot;,
            .type	= &quot;filter&quot;,
            .prio	= -300,	/* NF_IP_PRI_RAW */
            .hook	= NF_INET_LOCAL_OUT,
        },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;и замените везде -300 на -450.&lt;/p&gt; 
&lt;p&gt;Это нужно сделать вручную, никакой автоматики в &lt;code&gt;blockcheck.sh&lt;/code&gt; нет.&lt;/p&gt; 
&lt;p&gt;Либо можно раз и навсегда избавиться от этой проблемы, используя &lt;code&gt;nftables&lt;/code&gt;. Там можно создать &lt;code&gt;netfilter hook&lt;/code&gt; с любым приоритетом. Используйте приоритет -401 и ниже.&lt;/p&gt; 
&lt;p&gt;При использовании iptables и NAT, похоже, что нет способа прицепить обработчик очереди после NAT. Пакет попадает в nfqws с source адресом внутренней сети, затем фрагментируется и уже не обрабатывается NAT. Так и уходит во внешнюю сеть с src ip 192.168.x.x. Следовательно, метод не срабатывает. Видимо единственный рабочий метод - отказаться от iptables и использовать nftables. Хук должен быть с приоритетом 101 или выше.&lt;/p&gt; 
&lt;h3&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;nfqws&lt;/strong&gt; способен по-разному реагировать на различные запросы и применять разные стратегии дурения. Это реализовано посредством поддержки множества профилей дурения. Профили разделяются в командной строке параметром &lt;code&gt;--new&lt;/code&gt;. Первый профиль создается автоматически. Для него не нужно &lt;code&gt;--new&lt;/code&gt;. Каждый профиль имеет фильтр. По умолчанию он пуст, то есть профиль удовлетворяет любым условиям. Фильтр может содержать жесткие параметры: версия ip протокола, ipset и порты tcp/udp. Они всегда однозначно идентифицируются даже на нулевой фазе десинхронизации, когда еще хост и L7 неизвестны. В качестве мягкого фильтра могут выступать хост-листы и протокол прикладного уровня (l7). L7 протокол становится известен обычно после первого пакета с данными. При поступлении запроса идет проверка профилей в порядке от первого до последнего до достижения первого совпадения с фильтром. Жесткие параметры фильтра сверяются первыми. При несовпадении идет сразу же переход к следующему профилю. Если какой-то профиль удовлетворяет жесткому фильтру и L7 фильтру и содержит авто-хостлист, он выбирается сразу. Если профиль удовлетворяет жесткому фильтру и L7 фильтру, для него задан хостлист, и у нас еще нет имени хоста, идет переход к следующему профилю. В противном случае идет проверка по хостлистам этого профиля. Если имя хоста удовлетворяет листам, выбирается этот профиль. Иначе идет переход к следующему. Может так случиться, что до получения имени хоста или узнавания L7 протокола соединение идет по одному профилю, а при выяснении этих параметров профиль меняется на лету. Это может произойти даже дважды - при выяснении L7 и имени хоста. Чаще всего это выяснение совмещается в одно действие, поскольку по одному пакету, как правило, узнается и L7, и хост. Поэтому если у вас есть параметры дурения нулевой фазы, тщательно продумывайте что может произойти при переключении стратегии. Смотрите debug log, чтобы лучше понять что делает nfqws. Нумерация профилей идет с 1 до N. Последним в цепочке создается пустой профиль с номером 0. Он используется, когда никакие условия фильтров не совпали.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Множественные стратегии создавались только для случаев, когда невозможно обьединить имеющиеся стратегии для разных ресурсов. Копирование стратегий из blockcheck для разных сайтов во множество профилей без понимания как они работают приведет к нагромождению параметров, которые все равно не покроют все возможные заблокированные ресурсы. Вы только увязните в этой каше.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] user-mode реализация ipset создавалась не как удобная замена *nix версии, реализованной в ядре. Вариант в ядре работает гораздо эффективнее. Это создавалось для систем без подд3ержки ipset в ядре. Конкретно - Windows и ядра Linux, собранные без nftables и ipset модулей ядра. Например, в android нет ipset.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;IPTABLES ДЛЯ NFQWS&lt;/h3&gt; 
&lt;p&gt;iptables для задействования атаки на первые пакеты данных в tcp соединении :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp -m multiport --dports 80,443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Этот вариант применяем, когда DPI не следит за всеми запросами http внутри keep-alive сессии. Если следит, направляем только первый пакет от https и все пакеты от http :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;mark нужен, чтобы сгенерированный поддельный пакет не попал опять к нам на обработку. nfqws выставляет fwmark при его отсылке. Хотя nfqws способен самостоятельно различать помеченные пакеты, фильтр в iptables по mark нужен при использовании connbytes, чтобы не допустить изменения порядка следования пакетов. Процессинг очереди - процесс отложенный. Если ядро имеет пакеты на отсылку вне очереди - оно их отправляет незамедлительно. Изменение правильного порядка следования пакетов при десинхронизации ломает всю идею. Так же были замечены дедлоки при достаточно большой отсылке пакетов из nfqws и отсутствии mark фильтра. Процесс может зависнуть. Поэтому наличие фильтра по mark в ip/nf tables можно считать обязательным.&lt;/p&gt; 
&lt;p&gt;Почему &lt;code&gt;--connbytes 1:6&lt;/code&gt; :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1 - для работы методов десинхронизации 0-й фазы и корректной работы conntrack&lt;/li&gt; 
 &lt;li&gt;2 - иногда данные идут в 3-м пакете 3-way handshake&lt;/li&gt; 
 &lt;li&gt;3 - стандартная ситуация приема одного пакета запроса&lt;/li&gt; 
 &lt;li&gt;4-6 - на случай ретрансмиссии или запроса длиной в несколько пакетов (TLSClientHello с kyber, например)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Для режима autottl необходимо перенаправление входящего &lt;code&gt;SYN,ACK&lt;/code&gt; пакета или первого пакета соединения (что обычно есть то же самое). Для режима autohostlist необходимы входящие RST и http redirect. Можно построить фильтр на tcp flags для выделения &lt;code&gt;SYN,ACK&lt;/code&gt; и модуле u32 для поиска характерных паттернов http redirect, но проще использовать connbytes для выделения нескольких начальных входящих пакетов.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;iptables -t mangle -I PREROUTING -i &amp;lt;внешний интерфейс&amp;gt; -p tcp -m multiport --sports 80,443 -m connbytes --connbytes-dir=reply --connbytes-mode=packets --connbytes 1:3 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Для quic :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p udp --dport 443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;6 пакетов берется, чтобы покрыть случаи возможных ретрансмиссий quic initial в случае плохой связи или если сервер плохо себя чувствует, а приложение настаивает именно на quic, не переходя на tcp. А так же для работы autohostlist по quic. Однако, autohostlist для quic не рекомендуется.&lt;/p&gt; 
&lt;h3&gt;NFTABLES ДЛЯ NFQWS&lt;/h3&gt; 
&lt;p&gt;Можно начать с базовой конфигурации.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_WAN=wan

nft create table inet ztest

nft add chain inet ztest post &quot;{type filter hook postrouting priority mangle;}&quot;
nft add rule inet ztest post oifname $IFACE_WAN meta mark and 0x40000000 == 0 tcp dport &quot;{80,443}&quot; ct original packets 1-6 queue num 200 bypass
nft add rule inet ztest post oifname $IFACE_WAN meta mark and 0x40000000 == 0 udp dport 443 ct original packets 1-6 queue num 200 bypass

# auto hostlist with avoiding wrong ACK numbers in RST,ACK packets sent by russian DPI
sysctl net.netfilter.nf_conntrack_tcp_be_liberal=1 
nft add chain inet ztest pre &quot;{type filter hook prerouting priority filter;}&quot;
nft add rule inet ztest pre iifname $IFACE_WAN tcp sport &quot;{80,443}&quot; ct reply packets 1-3 queue num 200 bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Для задействования IP фрагментации и &lt;code&gt;datanoack&lt;/code&gt; на проходящие пакеты требуется особая конфигурация цепочек, перенаправляющая пакеты после NAT. В скриптах zapret эта схема называется &lt;code&gt;POSTNAT&lt;/code&gt;, и она возможна только на nftables. Сгенерированные nfqws пакеты требуется на раннем этапе помечать как &lt;strong&gt;notrack&lt;/strong&gt;, чтобы они не были испорчены NAT.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_WAN=wan

nft create table inet ztest

nft add chain inet ztest postnat &quot;{type filter hook postrouting priority srcnat+1;}&quot;
nft add rule inet ztest postnat oifname $IFACE_WAN meta mark and 0x40000000 == 0 tcp dport &quot;{80,443}&quot; ct original packets 1-6 queue num 200 bypass
nft add rule inet ztest postnat oifname $IFACE_WAN meta mark and 0x40000000 == 0 udp dport 443 ct original packets 1-6 queue num 200 bypass

nft add chain inet ztest predefrag &quot;{type filter hook output priority -401;}&quot;
nft add rule inet ztest predefrag &quot;mark &amp;amp; 0x40000000 != 0x00000000 notrack&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Удаление тестовой таблицы :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nft delete table inet ztest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FLOW OFFLOADING&lt;/h3&gt; 
&lt;p&gt;Если ваше устройство поддерживает аппаратное ускорение (flow offloading, hardware nat, hardware acceleration), то iptables могут не работать. При включенном offloading пакет не проходит по обычному пути netfilter. Необходимо или его отключить, или выборочно им управлять.&lt;/p&gt; 
&lt;p&gt;В новых ядрах присутствует software flow offloading (SFO). Пакеты, проходящие через SFO, так же проходят мимо большей части механизмов iptables. При включенном SFO работает DNAT/REDIRECT (tpws). Эти соединения исключаются из offloading. Однако, остальные соединения идут через SFO, потому NFQUEUE будет срабатывать только до помещения соединения в flowtable. Практически это означает, что почти весь функционал nfqws работать не будет. Offload включается через специальный target в iptables &lt;code&gt;FLOWOFFLOAD&lt;/code&gt; или через flowtable в nftables.&lt;/p&gt; 
&lt;p&gt;Не обязательно пропускать весь трафик через offload. tpws и так обходит offload &quot;by design&quot;, а для отработки nfqws достаточно первых нескольких пакетов в tcp соединении или udp сеансе. Пока сеанс не направлен на offload, он процессится обычным образом через полноценный netfilter. Как только срабатывает правило offload по любому входящему или исходящему пакету, весь сеанс окончательно уходит из netfilter в offload. Поэтому скрипты zapret берут правила для NFQUEUE, что они создали, и из них создают exemption правила, которые не дают раньше времени попасть сеансу в offload, а потом его &quot;отпускают&quot;. При этом входящим пакетам не дают начать offload, триггером выступают только исходящие пакеты. Эта схема обеспечивает практически нулевой негативный эффект на скорость, одновременно покрывая нужды nfqws и упрощая правила таблиц.&lt;/p&gt; 
&lt;p&gt;OpenWrt не предусматривает выборочного управления offload, поэтому скрипты zapret поддерживают свою систему выборочного управления.&lt;/p&gt; 
&lt;p&gt;iptables target &lt;code&gt;FLOWOFFLOAD&lt;/code&gt; - это проприетарное изобретение OpenWrt. Управление offload в nftables реализовано в базовом ядре linux без патчей. nftables - единственный способ включения offload на классическом Linux.&lt;/p&gt; 
&lt;h2&gt;tpws&lt;/h2&gt; 
&lt;p&gt;tpws - это transparent proxy.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@&amp;lt;config_file&amp;gt;|$&amp;lt;config_file&amp;gt;                     ; читать конфигурацию из файла. опция должна быть первой. остальные опции игнорируются.

--debug=0|1|2|syslog|@&amp;lt;filename&amp;gt;                  ; 0,1,2 = логирование на косоль : 0=тихо, 1(default)=подробно, 2=отладка.
--debug-level=0|1|2                               ; указать уровень логирования для syslog и @&amp;lt;filename&amp;gt;
--dry-run                                         ; проверить опции командной строки и выйти. код 0 - успешная проверка.
--version                                         ; вывести версию и выйти

--daemon                                          ; демонизировать прогу
--pidfile=&amp;lt;file&amp;gt;                                  ; сохранить PID в файл
--user=&amp;lt;username&amp;gt;                                 ; менять uid процесса
--uid=uid[:gid]                                   ; менять uid процесса
--bind-addr                                       ; на каком адресе слушать. может быть ipv4 или ipv6 адрес
                                                  ; если указан ipv6 link local, то требуется указать с какого он интерфейса : fe80::1%br-lan
--bind-linklocal=no|unwanted|prefer|force         ; no : биндаться только на global ipv6
                                                  ; unwanted (default) : предпочтительно global, если нет - LL
                                                  ; prefer : предпочтительно LL, если нет - global
                                                  ; force : биндаться только на LL
--bind-iface4=&amp;lt;iface&amp;gt;                             ; слушать на первом ipv4 интерфейса iface
--bind-iface6=&amp;lt;iface&amp;gt;                             ; слушать на первом ipv6 интерфейса iface
--bind-wait-ifup=&amp;lt;sec&amp;gt;                            ; ждать до N секунд появления и поднятия интерфейса
--bind-wait-ip=&amp;lt;sec&amp;gt;                              ; ждать до N секунд получения IP адреса (если задан --bind-wait-ifup - время идет после поднятия интерфейса)
--bind-wait-ip-linklocal=&amp;lt;sec&amp;gt;
                                                  ; имеет смысл только при задании --bind-wait-ip
                                                  ; --bind-linklocal=unwanted	: согласиться на LL после N секунд
                                                  ; --bind-linklocal=prefer	: согласиться на global address после N секунд
--bind-wait-only                                  ; подождать все бинды и выйти. результат 0 в случае успеха, иначе не 0.
--connect-bind-addr                               ; с какого адреса подключаться во внешнюю сеть. может быть ipv4 или ipv6 адрес
                                                  ; если указан ipv6 link local, то требуется указать с какого он интерфейса : fe80::1%br-lan
                                                  ; опция может повторяться для v4 и v6 адресов
                                                  ; опция не отменяет правил маршрутизации ! выбор интерфейса определяется лишь правилами маршрутизации, кроме случая v6 link local.
--socks                                           ; вместо прозрачного прокси реализовать socks4/5 proxy
--no-resolve                                      ; запретить ресолвинг имен через socks5
--resolve-threads                                 ; количество потоков ресолвера
--port=&amp;lt;port&amp;gt;                                     ; на каком порту слушать
--maxconn=&amp;lt;max_connections&amp;gt;                       ; максимальное количество соединений от клиентов к прокси
--maxfiles=&amp;lt;max_open_files&amp;gt;                       ; макс количество файловых дескрипторов (setrlimit). мин требование (X*connections+16), где X=6 в tcp proxy mode, X=4 в режиме тамперинга.
                                                  ; стоит сделать запас с коэффициентом как минимум 1.5. по умолчанию maxfiles (X*connections)*1.5+16
--max-orphan-time=&amp;lt;sec&amp;gt;                           ; если вы запускаете через tpws торрент-клиент с множеством раздач, он пытается установить очень много исходящих соединений,
                                                  ; большая часть из которых отваливается по таймауту (юзера сидят за NAT, firewall, ...)
                                                  ; установление соединения в linux может длиться очень долго. локальный конец отвалился, перед этим послав блок данных,
                                                  ; tpws ждет подключения удаленного конца, чтобы отослать ему этот блок, и зависает надолго.
                                                  ; настройка позволяет сбрасывать такие подключения через N секунд, теряя блок данных. по умолчанию 5 сек. 0 означает отключить функцию
                                                  ; эта функция не действует на успешно подключенные ранее соединения

--local-rcvbuf=&amp;lt;bytes&amp;gt;                            ; SO_RCVBUF для соединений client-proxy
--local-sndbuf=&amp;lt;bytes&amp;gt;                            ; SO_SNDBUF для соединений client-proxy
--remote-rcvbuf=&amp;lt;bytes&amp;gt;                           ; SO_RCVBUF для соединений proxy-target
--remote-sndbuf=&amp;lt;bytes&amp;gt;                           ; SO_SNDBUF для соединений proxy-target
--nosplice                                        ; не использовать splice на linux системах
--skip-nodelay                                    ; не устанавливать в исходящих соединения TCP_NODELAY. несовместимо со split.
--local-tcp-user-timeout=&amp;lt;seconds&amp;gt;                ; таймаут соединений client-proxy (по умолчанию : 10 сек, 0 = оставить системное значение)
--remote-tcp-user-timeout=&amp;lt;seconds&amp;gt;               ; таймаут соединений proxy-target (по умолчанию : 20 сек, 0 = оставить системное значение)
--fix-seg=&amp;lt;int&amp;gt;                                   ; исправлять неудачи tcp сегментации ценой задержек для всех клиентов и замедления. ждать до N мс. по умолчанию 30 мс.

--split-pos=N|-N|marker+N|marker-N                ; список через запятую маркеров для tcp сегментации
--split-any-protocol                              ; применять сегментацию к любым пакетам. по умолчанию - только к известным протоколам (http, TLS)
--disorder[=http|tls]                             ; путем манипуляций с сокетом вынуждает отправлять первым второй сегмент разделенного запроса
--oob[=http|tls]                                  ; отправить байт out-of-band data (OOB) в конце первой части сплита
--oob-data=&amp;lt;char&amp;gt;|0xHEX                           ; переопределить байт OOB. по умолчанию 0x00.
--hostcase                                        ; менять регистр заголовка &quot;Host:&quot;. по умолчанию на &quot;host:&quot;.
--hostspell=HoST                                  ; точное написание заголовка Host (можно &quot;HOST&quot; или &quot;HoSt&quot;). автоматом включает --hostcase
--hostdot                                         ; добавление точки после имени хоста : &quot;Host: kinozal.tv.&quot;
--hosttab                                         ; добавление табуляции после имени хоста : &quot;Host: kinozal.tv\t&quot;
--hostnospace                                     ; убрать пробел после &quot;Host:&quot;
--hostpad=&amp;lt;bytes&amp;gt;                                 ; добавить паддинг-хедеров общей длиной &amp;lt;bytes&amp;gt; перед Host:
--domcase                                         ; домен после Host: сделать таким : TeSt.cOm
--methodspace                                     ; добавить пробел после метода : &quot;GET /&quot; =&amp;gt; &quot;GET  /&quot;
--methodeol                                       ; добавить перевод строки перед методом  : &quot;GET /&quot; =&amp;gt; &quot;\r\nGET  /&quot;
--unixeol                                         ; конвертировать 0D0A в 0A и использовать везде 0A
--tlsrec=N|-N|marker+N|marker-N                   ; разбивка TLS ClientHello на 2 TLS records на указанной позиции. Минимальное смещение - 6.
--mss=&amp;lt;int&amp;gt;                                       ; установить MSS для клиента. может заставить сервер разбивать ответы, но существенно снижает скорость
--tamper-start=[n]&amp;lt;pos&amp;gt;                           ; начинать дурение только с указанной байтовой позиции или номера блока исходяшего потока (считается позиция начала принятого блока)
--tamper-cutoff=[n]&amp;lt;pos&amp;gt;                          ; закончить дурение на указанной байтовой позиции или номере блока исходящего потока (считается позиция начала принятого блока)
--hostlist=&amp;lt;filename&amp;gt;                             ; действовать только над доменами, входящими в список из filename. поддомены автоматически учитываются, если хост не начинается с &#39;^&#39;.
                                                  ; в файле должен быть хост на каждой строке.
                                                  ; список читается при старте и хранится в памяти в виде иерархической структуры для быстрого поиска.
                                                  ; при изменении времени модификации файла он перечитывается автоматически по необходимости
                                                  ; список может быть запакован в gzip. формат автоматически распознается и разжимается
                                                  ; списков может быть множество. пустой общий лист = его отсутствие
                                                  ; хосты извлекаются из Host: хедера обычных http запросов и из SNI в TLS ClientHello.
--hostlist-domains=&amp;lt;domain_list&amp;gt;                  ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-exclude=&amp;lt;filename&amp;gt;                     ; не применять дурение к доменам из листа. может быть множество листов. схема аналогична include листам.
--hostlist-exclude-domains=&amp;lt;domain_list&amp;gt;          ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-auto=&amp;lt;filename&amp;gt;                        ; обнаруживать автоматически блокировки и заполнять автоматический hostlist (требует перенаправления входящего трафика)
--hostlist-auto-fail-threshold=&amp;lt;int&amp;gt;              ; сколько раз нужно обнаружить ситуацию, похожую на блокировку, чтобы добавить хост в лист (по умолчанию: 3)
--hostlist-auto-fail-time=&amp;lt;int&amp;gt;                   ; все эти ситуации должны быть в пределах указанного количества секунд (по умолчанию: 60)
--hostlist-auto-debug=&amp;lt;logfile&amp;gt;                   ; лог положительных решений по autohostlist. позволяет разобраться почему там появляются хосты.
--new                                             ; начало новой стратегии (новый профиль)
--skip                                            ; не использовать этот профиль . полезно для временной деактивации профиля без удаления параметров.
--filter-l3=ipv4|ipv6                             ; фильтр версии ip для текущей стратегии
--filter-tcp=[~]port1[-port2]|*                   ; фильтр портов tcp для текущей стратегии. ~ означает инверсию. поддерживается список через запятую.
--filter-l7=[http|tls|quic|wireguard|dht|unknown] ; фильтр протокола L6-L7. поддерживается несколько значений через запятую.
--ipset=&amp;lt;filename&amp;gt;                                ; включающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-ip=&amp;lt;ip_list&amp;gt;                              ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
--ipset-exclude=&amp;lt;filename&amp;gt;                        ; исключающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-exclude-ip=&amp;lt;ip_list&amp;gt;                      ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;TCP СЕГМЕНТАЦИЯ В TPWS&lt;/h3&gt; 
&lt;p&gt;tpws, как и nfqws, поддерживает множественную сегментацию запросов. Сплит позиции задаются в &lt;code&gt;--split-pos&lt;/code&gt;. Указываются маркеры через запятую. Описание маркеров см в разделе &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tcp-%D1%81%D0%B5%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;nfqws&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;На прикладном уровне в общем случае нет гарантированного средства заставить ядро выплюнуть блок данных, порезанным в определенном месте. ОС держит буфер отсылки (SNDBUF) у каждого сокета. Если у сокета включена опция TCP_NODELAY и буфер пуст, то каждый send приводит к отсылке отдельного ip пакета или группы пакетов, если блок не вмещается в один ip пакет. Однако, если в момент send уже имеется неотосланный буфер, то ОС присоединит данные к нему, никакой отсылки отдельным пакетом не будет. Но в этом случае и так нет никакой гарантии, что какой-то блок сообщения пойдет в начале пакета, на что собственно и заточены DPI. Разбиение будет производиться согласно MSS, который зависит от MTU исходящего интерфейса. Таким образом DPI, смотрящие в начало поля данных TCP пакета, будут поломаны в любом случае. Протокол http относится к запрос-ответным протоколам. Новое сообщение посылается только тогда, когда сервер получил запрос и полностью вернул ответ. Значит запрос фактически был не только отослан, но и принят другой стороной, а следовательно буфер отсылки пуст, и следующие 2 send приведут к отсылке сегментов данных разными ip пакетами.&lt;/p&gt; 
&lt;p&gt;Таким образом tpws обеспечивает сплит только за счет раздельных вызовов send, и это обычно работает надежно, если разбивать не на слишком много частей и не на слишком мелкие подряд следующие части. В последнем случае Linux все же может обьединить некоторые части, что приведет к несоответствию реальной сегментации указанным сплит позициям. Другие ОС в этом вопросе ведут себя более предсказуемо. Спонтанного обьединения замечено не было. Поэтому не стоит злоупотреблять сплитами и в особенности мелкими соседними пакетами.&lt;/p&gt; 
&lt;p&gt;Как показывается практика, проблемы могут начаться , если количество сплитов более одного. На каких-то системах наблюдался стабильный результат до 8 сплитов, на других проблемы уже начинались после 2 сплитов. Один сплит работает стабильно, если не является частью массивной потоковой передачи. При неудаче сегментации будет выводиться сообщение &lt;code&gt;WARNING ! segmentation failed&lt;/code&gt;. Если вы его видите, это повод снизить количество сплит позиций. Если это не вариант, для ядер Linux &amp;gt;=4.6 есть параметр &lt;code&gt;--fix-seg&lt;/code&gt;. Он позволяет подождать завершение отсылки перед отправкой следующей части. Но этот вариант ломает модель асинхронной обработки событий. Пока идет ожидание, все остальные соединения не обрабатываются и кратковременно подвисают. На практике это может быть совсем небольшое ожидание - менее 10 мс. Выполняется оно только , если происходит split, и в ожидании есть реальная необходимость. В высоконагруженных системах данный вариант не рекомендуется. Но для домашнего использования может подойти, и вы эти задержки даже не заметите.&lt;/p&gt; 
&lt;p&gt;Если вы пытаетесь сплитнуть массивную передачу с &lt;code&gt;--split-any-protocol&lt;/code&gt;, когда информация поступает быстрее отсылки, то без &lt;code&gt;--fix-seg&lt;/code&gt; ошибки сегментации будут сыпаться сплошным потоком. Работа по массивному потоку без ограничителей &lt;code&gt;--tamper-start&lt;/code&gt; и &lt;code&gt;--tamper-cutoff&lt;/code&gt; обычно лишена смысла.&lt;/p&gt; 
&lt;p&gt;tpws работает на уровне сокетов, поэтому длинный запрос, не вмещающийся в 1 пакет (TLS с kyber), он получает целым блоком. На каждую сплит часть он делает отдельный вызов &lt;code&gt;send()&lt;/code&gt;. Но ОС не сможет отослать данные в одном пакете, если размер превысит MTU. В случае слишком большого сегмента ОС дополнительно его порежет на более мелкие. Результат должен быть аналогичен nfqws.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--disorder&lt;/code&gt; заставляет слать каждый 2-й пакет с TTL=1, начиная с первого. К серверу приходят все четные пакеты сразу. На остальные ОС делает ретрансмиссию, и они приходят потом. Это само по себе создает дополнительную задержку (200 мс в linux для первой ретрансмиссии). Иным способом сделать disorder в сокет варианте не представляется возможным. Итоговый порядок для 6 сегментов получается &lt;code&gt;2 4 6 1 3 5&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--oob&lt;/code&gt; высылает 1 байт out-of-band data после первого сплит сегмента. &lt;code&gt;oob&lt;/code&gt; в каждом сегменте сплита показал себя ненадежным. Сервер получает oob в сокет.&lt;/p&gt; 
&lt;p&gt;Сочетание &lt;code&gt;oob&lt;/code&gt; и &lt;code&gt;disorder&lt;/code&gt; возможно только в Linux. Остальные ОС не умеют с таким справляться. Флаг URG теряется при ретрансмиссиях. Сервер получает oob в сокет. Сочетание этих параметров в ос, кроме Linux, вызывает ошибку на этапе запуска.&lt;/p&gt; 
&lt;h3&gt;TLSREC&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;--tlsrec&lt;/code&gt; позволяют внутри одного tcp сегмента разрезать TLS ClientHello на 2 TLS records. Можно использовать стандартный механизм маркеров для задания относительных позиций.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--tlsrec&lt;/code&gt; ломает значительное количество сайтов. Криптобиблиотеки (openssl, ...) на оконечных http серверах без проблем принимают разделенные tls сегменты, но мидлбоксы - не всегда. К мидлбоксам можно отнести CDN или системы ddos-защиты. Поэтому применение &lt;code&gt;--tlsrec&lt;/code&gt; без ограничителей вряд ли целесообразно. В РФ &lt;code&gt;--tlsrec&lt;/code&gt; обычно не работает с TLS 1.2, потому что цензор парсит сертификат сервера из ServerHello. Работает только с TLS 1.3, поскольку там эта информация шифруется. Впрочем, сейчас сайтов, не поддерживающих TLS 1.3, осталось немного.&lt;/p&gt; 
&lt;h3&gt;MSS&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;--mss&lt;/code&gt; устанавливает опцию сокета TCP_MAXSEG. Клиент выдает это значение в tcp опциях SYN пакета. Сервер в ответ в SYN,ACK выдает свой MSS. На практике сервера обычно снижают размеры отсылаемых ими пакетов, но они все равно не вписываются в низкий MSS, указанный клиентом. Обычно чем больше указал клиент, тем больше шлет сервер. На TLS 1.2 если сервер разбил заброс так, чтобы домен из сертификата не попал в первый пакет, это может обмануть DPI, секущий ответ сервера. Схема может значительно снизить скорость и сработать не на всех сайтах. С фильтром по hostlist совместимо только в режиме socks при включенном удаленном ресолвинге хостов. (firefox network.proxy.socks_remote_dns). Это единственный вариант, когда tpws может узнать имя хоста еще на этапе установления соединения. Применяя данную опцию к сайтам TLS1.3, если броузер тоже поддерживает TLS1.3, то вы делаете только хуже. Но нет способа автоматически узнать когда надо применять, когда нет, поскольку MSS идет только в 3-way handshake еще до обмена данными, а версию TLS можно узнать только по ответу сервера, который может привести к реакции DPI. Использовать только когда нет ничего лучше или для отдельных ресурсов. Для http использовать смысла нет, поэтому заводите отдельный desync profile с фильтром по порту 443. Работает только на Linux, не работает на BSD и MacOS.&lt;/p&gt; 
&lt;h3&gt;ДРУГИЕ ПАРАМЕТРЫ ДУРЕНИЯ&lt;/h3&gt; 
&lt;p&gt;Параметр &lt;code&gt;--hostpad=&amp;lt;bytes&amp;gt;&lt;/code&gt; добавляет паддинг-хедеров перед &lt;code&gt;Host:&lt;/code&gt; на указанное количество байтов. Если размер &lt;code&gt;&amp;lt;bytes&amp;gt;&lt;/code&gt; слишком большой, то идет разбивка на разные хедеры по 2K. Общий буфер приема http запроса - 64K, больший паддинг не поддерживается, да и http сервера такое уже не принимают. Полезно против DPI, выполняющих реассемблинг TCP с ограниченным буфером. Если техника работает, то после некоторого количества bytes http запрос начнет проходить до сайта. Если при этом критический размер padding около MTU, значит скорее всего DPI не выполняет реассемблинг пакетов, и лучше будет использовать обычные опции TCP сегментации. Если все же реассемблинг выполняется, то критический размер будет около размера буфера DPI. Он может быть 4K или 8K, возможны и другие значения.&lt;/p&gt; 
&lt;h3&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/h3&gt; 
&lt;p&gt;Работают аналогично &lt;strong&gt;nfqws&lt;/strong&gt;, кроме некоторых моментов. Нет параметра &lt;code&gt;--filter-udp&lt;/code&gt;, поскольку &lt;strong&gt;tpws&lt;/strong&gt; udp не поддерживает. Методы нулевой фазы (&lt;code&gt;--mss&lt;/code&gt;) могут работать по хостлисту в одном единственном случае: если используется режим socks и удаленный ресолвинг хостов через прокси. То есть работоспособность вашей настройки в одном и том же режиме может зависеть от того, применяет ли клиент удаленный ресолвинг. Это может быть неочевидно. В одной программе работает, в другой - нет. Если вы используете профиль с хостлистом , и вам нужен mss, укажите mss в профиле с хостлистом, создайте еще один профиль без хостлиста, если его еще нет, и в нем еще раз укажите mss. Тогда при любом раскладе будет выполняться mss. Используйте &lt;code&gt;curl --socks5&lt;/code&gt; и &lt;code&gt;curl --socks5-hostname&lt;/code&gt; для проверки вашей стратегии. Смотрите вывод &lt;code&gt;--debug&lt;/code&gt;, чтобы убедиться в правильности настроек.&lt;/p&gt; 
&lt;h3&gt;СЛУЖЕБНЫЕ ПАРАМЕТРЫ&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;--debug&lt;/code&gt; позволяет выводить подробный лог действий на консоль, в syslog или в файл. Может быть важен порядок следования опций. &lt;code&gt;--debug&lt;/code&gt; лучше всего указывать в самом начале. Опции анализируются последовательно. Если ошибка будет при проверке опции, а до анализа &lt;code&gt;--debug&lt;/code&gt; еще дело не дошло, то сообщения не будут выведены в файл или syslog. &lt;code&gt;--debug=0|1|2&lt;/code&gt; позволяют сразу в одном параметре включить логирование на консоль и указать уровень. Сохранено для совместимости с более старыми версиями. Для выбора уровня в режиме syslog или file используйте отдельный параметр &lt;code&gt;--debug-level&lt;/code&gt;. Если в этих режимах &lt;code&gt;--debug&lt;/code&gt; не указывать уровень через &lt;code&gt;--debug-level&lt;/code&gt;, то автоматически назначается уровень 1. При логировании в файл процесс не держит файл открытым. Ради каждой записи файл открывается и потом закрывается. Так что файл можно удалить в любой момент, и он будет создан заново при первом же сообщении в лог. Но имейте в виду, что если вы запускаете процесс под root, то будет сменен UID на не-root. В начале на лог файл меняется owner, иначе запись будет невозможна. Если вы потом удалите файл, и у процесса не будет прав на создание файла в его директории, лог больше не будет вестись. Вместо удаления лучше использовать truncate. В шелле это можно сделать через команду &quot;: &amp;gt;filename&quot;&lt;/p&gt; 
&lt;p&gt;tpws может биндаться на множество интерфейсов и IP адресов (до 32 шт). Порт всегда только один. Параметры &lt;code&gt;--bind-iface*&lt;/code&gt; и &lt;code&gt;--bind-addr&lt;/code&gt; создают новый бинд. Остальные параметры &lt;code&gt;--bind-*&lt;/code&gt; относятся к последнему бинду. Для бинда на все ipv4 укажите &lt;code&gt;--bind-addr &quot;0.0.0.0&quot;&lt;/code&gt;, на все ipv6 - &lt;code&gt;&quot;::&quot;&lt;/code&gt;. &lt;code&gt;--bind-addr=&quot;&quot;&lt;/code&gt; - биндаемся на все ipv4 и ipv6. Выбор режима использования link local ipv6 адресов (&lt;code&gt;fe80::/8&lt;/code&gt;) :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--bind-iface6 --bind-linklocal=no : сначала приватный адрес fc00::/7, затем глобальный адрес
--bind-iface6 --bind-linklocal=unwanted : сначала приватный адрес fc00::/7, затем глобальный адрес, затем link local.
--bind-iface6 --bind-linklocal=prefer : сначала link local, затем приватный адрес fc00::/7, затем глобальный адрес.
--bind-iface6 --bind-linklocal=force : только link local
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Если не указано ни одного бинда, то создается бинд по умолчанию на все адреса всех интерфейсов. Для бинда на конкретный link-local address делаем так : &lt;code&gt;--bind-iface6=fe80::aaaa:bbbb:cccc:dddd%iface-name&lt;/code&gt; Параметры &lt;code&gt;--bind-wait*&lt;/code&gt; могут помочь в ситуациях, когда нужно взять IP с интерфейса, но его еще нет, он не поднят или не сконфигурирован. В разных системах события ifup ловятся по-разному и не гарантируют, что интерфейс уже получил IP адрес определенного типа. В общем случае не существует единого механизма повеситься на событие типа &quot;на интерфейсе X появился link local address&quot;. Для бинда на известный ip, когда еще интерфейс не сконфигурирован, нужно делать так: &lt;code&gt;--bind-addr=192.168.5.3 --bind-wait-ip=20&lt;/code&gt; В режиме transparent бинд возможен на любой несуществующий адрес, в режиме socks - только на существующий.&lt;/p&gt; 
&lt;p&gt;Параметры rcvbuf и sndbuf позволяют установить setsockopt SO_RCVBUF SO_SNDBUF для локального и удаленного соединения.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--skip-nodelay&lt;/code&gt; может быть полезен, когда tpws используется без дурения, чтобы привести MTU к MTU системы, на которой работает tpws. Это может быть полезно для скрытия факта использования VPN. Пониженный MTU - 1 из способов обнаружения подозрительного подключения. С tcp proxy ваши соединения неотличимы от тех, что сделал бы сам шлюз.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--local-tcp-user-timeout&lt;/code&gt; и &lt;code&gt;--remote-tcp-user-timeout&lt;/code&gt; устанавливают значение таймаута в секундах для соединений клиент-прокси и прокси-сервер. Этот таймаут соответствует опции сокета linux TCP_USER_TIMEOUT. Под таймаутом подразумевается время, в течение которого буферизированные данные не переданы или на переданные данные не получено подтверждение (ACK) от другой стороны. Этот таймаут никак не касается времени отсутствия какой-либо передачи через сокет лишь потому, что данных для передачи нет. Полезно для сокращения время закрытия подвисших соединений. Поддерживается только на Linux и MacOS.&lt;/p&gt; 
&lt;p&gt;Режим &lt;code&gt;--socks&lt;/code&gt; не требует повышенных привилегий (кроме бинда на привилегированные порты 1..1023). Поддерживаются версии socks 4 и 5 без авторизации. Версия протокола распознается автоматически. Подключения к IP того же устройства, на котором работает tpws, включая localhost, запрещены. socks5 позволяет удаленно ресолвить хосты (curl : --socks5-hostname firefox : socks_remote_dns=true). tpws поддерживает эту возможность асинхронно, не блокируя процессинг других соединений, используя многопоточный пул ресолверов. Количество потоков определяется автоматически в зависимости от &lt;code&gt;--maxconn&lt;/code&gt;, но можно задать и вручную через параметр &lt;code&gt;--resolver-threads&lt;/code&gt;. Запрос к socks выставляется на паузу, пока домен не будет преобразован в ip адрес в одном из потоков ресолвера. Ожидание может быть более длинным, если все потоки заняты. Если задан параметр &lt;code&gt;--no-resolve&lt;/code&gt;, то подключения по именам хостов запрещаются, а пул ресолверов не создается. Тем самым экономятся ресурсы.&lt;/p&gt; 
&lt;h3&gt;IPTABLES ДЛЯ TPWS&lt;/h3&gt; 
&lt;p&gt;Для перенаправления tcp соединения на transparent proxy используются команды следующего вида :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t nat -I OUTPUT -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m owner ! --uid-owner tpws -j DNAT --to 127.0.0.127:988
iptables -t nat -I PREROUTING -i &amp;lt;внутренний_интерфейс&amp;gt; -p tcp --dport 80 -j DNAT --to 127.0.0.127:988
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Первая команда для соединений с самой системы, вторая - для проходящих через роутер соединений.&lt;/p&gt; 
&lt;p&gt;DNAT на localhost работает в цепочке OUTPUT, но не работает в цепочке PREROUTING без включения параметра route_localnet :&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sysctl -w net.ipv4.conf.&amp;lt;внутренний_интерфейс&amp;gt;.route_localnet=1&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Можно использовать &lt;code&gt;-j REDIRECT --to-port 988&lt;/code&gt; вместо DNAT, однако в этом случае процесс transparent proxy должен слушать на ip адресе входящего интерфейса или на всех адресах. Слушать на всех - не есть хорошо с точки зрения безопасности. Слушать на одном (локальном) можно, но в случае автоматизированного скрипта придется его узнавать, потом динамически вписывать в команду. В любом случае требуются дополнительные усилия. Использование route_localnet тоже имеет потенциальные проблемы с безопасностью. Вы делаете доступным все, что висит на &lt;code&gt;127.0.0.0/8&lt;/code&gt; для локальной подсети &amp;lt; внутренний_интерфейс&amp;gt;. Службы обычно привязываются к &lt;code&gt;127.0.0.1&lt;/code&gt;, поэтому можно средствами iptables запретить входящие на &lt;code&gt;127.0.0.1&lt;/code&gt; не с интерфейса lo, либо повесить tpws на любой другой IP из &lt;code&gt;127.0.0.0/8&lt;/code&gt;, например на &lt;code&gt;127.0.0.127&lt;/code&gt;, и разрешить входящие не с lo только на этот IP.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -A INPUT ! -i lo -d 127.0.0.127 -j ACCEPT
iptables -A INPUT ! -i lo -d 127.0.0.0/8 -j DROP
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Фильтр по owner необходим для исключения рекурсивного перенаправления соединений от самого tpws. tpws запускается под пользователем &lt;strong&gt;tpws&lt;/strong&gt;, для него задается исключающее правило.&lt;/p&gt; 
&lt;p&gt;ip6tables работают почти точно так же, как и ipv4, но есть ряд важных нюансов. В DNAT следует брать адрес --to в квадратные скобки. Например :&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ip6tables -t nat -I OUTPUT -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m owner ! --uid-owner tpws -j DNAT --to [::1]:988&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Параметра route_localnet не существует для ipv6. DNAT на localhost (::1) возможен только в цепочке OUTPUT. В цепочке PREROUTING DNAT возможен на любой global address или на link local address того же интерфейса, откуда пришел пакет. NFQUEUE работает без изменений.&lt;/p&gt; 
&lt;h3&gt;NFTABLES ДЛЯ TPWS&lt;/h3&gt; 
&lt;p&gt;Базовая конфигурация :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_WAN=wan
IFACE_LAN=br-lan

sysctl -w net.ipv4.conf.$IFACE_LAN.route_localnet=1

nft create table inet ztest

nft create chain inet ztest localnet_protect
nft add rule inet ztest localnet_protect ip daddr 127.0.0.127 return
nft add rule inet ztest localnet_protect ip daddr 127.0.0.0/8 drop
nft create chain inet ztest input &quot;{type filter hook input priority filter - 1;}&quot;
nft add rule inet ztest input iif != &quot;lo&quot; jump localnet_protect

nft create chain inet ztest dnat_output &quot;{type nat hook output priority dstnat;}&quot;
nft add rule inet ztest dnat_output meta skuid != tpws oifname $IFACE_WAN tcp dport { 80, 443 } dnat ip to 127.0.0.127:988
nft create chain inet ztest dnat_pre &quot;{type nat hook prerouting priority dstnat;}&quot;
nft add rule inet ztest dnat_pre meta iifname $IFACE_LAN tcp dport { 80, 443 } dnat ip to 127.0.0.127:988
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Удаление таблицы :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nft delete table inet ztest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ip2net&lt;/h2&gt; 
&lt;p&gt;Утилита ip2net предназначена для преобразования ipv4 или ipv6 списка ip в список подсетей с целью сокращения размера списка. Входные данные берутся из stdin, выходные выдаются в &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-4                             ; лист - ipv4 (по умолчанию)
-6                             ; лист - ipv6
--prefix-length=min[-max]      ; диапазон рассматриваемых длин префиксов. например : 22-30 (ipv4), 56-64 (ipv6)
--v4-threshold=mul/div         ; ipv4 : включать подсети, в которых заполнено по крайней мере mul/div адресов. например : 3/4
--v6-threshold=N               ; ipv6 : минимальное количество ip для создания подсети
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;В списке могут присутствовать записи вида ip/prefix и ip1-ip2. Такие записи выкидываются в stdout без изменений. Они принимаются командой ipset. ipset умеет для листов hash:net из ip1-ip2 делать оптимальное покрытие ip/prefix. ipfw из FreeBSD понимает ip/prefix, но не понимает ip1-ip2. ip2net фильтрует входные данные, выкидывая неправильные IP адреса.&lt;/p&gt; 
&lt;p&gt;Выбирается подсеть, в которой присутствует указанный минимум адресов. Для ipv4 минимум задается как процент от размера подсети (mul/div. например, 3/4), для ipv6 минимум задается напрямую.&lt;/p&gt; 
&lt;p&gt;Размер подсети выбирается следующим алгоритмом: Сначала в указанном диапазоне длин префиксов ищутся подсети, в которых количество адресов - максимально. Если таких сетей найдено несколько, берется наименьшая сеть (префикс больше). Например, заданы параметры v6_threshold=2 prefix_length=32-64, имеются следующие ipv6 :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1234:5678:aaaa::5
1234:5678:aaaa::6
1234:5678:aaac::5
Результат будет :
1234:5678:aaa8::/45
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Эти адреса так же входят в подсеть /32. Однако, нет смысла проходиться ковровой бомбардировкой, когда те же самые адреса вполне влезают в /45 и их ровно столько же. Если изменить v6_threshold=4, то результат будет:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1234:5678:aaaa::5
1234:5678:aaaa::6
1234:5678:aaac::5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;То есть ip не объединятся в подсеть, потому что их слишком мало. Если изменить &lt;code&gt;prefix_length=56-64&lt;/code&gt;, результат будет:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1234:5678:aaaa::/64
1234:5678:aaac::5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Требуемое процессорное время для вычислений сильно зависит от ширины диапазона длин префиксов, размера искомых подсетей и длины листа. Если ip2net думает слишком долго, не используйте слишком большие подсети и уменьшите диапазон длин префиксов. Учтите, что арифметика mul/div - целочисленная. При превышении разрядной сетки 32 bit результат непредсказуем. Не надо делать такое: 5000000/10000000. 1/2 - гораздо лучше.&lt;/p&gt; 
&lt;h2&gt;mdig&lt;/h2&gt; 
&lt;p&gt;Программа предназначена для многопоточного ресолвинга больших листов через системный DNS. Она берет из stdin список доменов и выводит в stdout результат ресолвинга. Ошибки выводятся в stderr.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--threads=&amp;lt;threads_number&amp;gt;	; количество потоков. по умолчанию 1.
--family=&amp;lt;4|6|46&amp;gt;              ; выбор семейства IP адресов : ipv4, ipv6, ipv4+ipv6
--verbose                      ; дебаг-лог на консоль
--stats=N                      ; выводить статистику каждые N доменов
--log-resolved=&amp;lt;file&amp;gt;          ; сохранять успешно отресолвленные домены в файл
--log-failed=&amp;lt;file&amp;gt;            ; сохранять неудачно отресолвленные домены в файл
--dns-make-query=&amp;lt;domain&amp;gt;      ; вывести в stdout бинарный DNS запрос по домену. если --family=6, запрос будет AAAA, иначе A.
--dns-parse-query              ; распарсить бинарный DNS ответ и выдать все ivp4 и ipv6 адреса из него в stdout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Параметры &lt;code&gt;--dns-make-query&lt;/code&gt; и &lt;code&gt;--dns-parse-query&lt;/code&gt; позволяют провести ресолвинг одного домена через произвольный канал. Например, следующим образом можно выполнить DoH запрос, используя лишь mdig и curl :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mdig --family=6 --dns-make-query=rutracker.org | curl --data-binary @- -H &quot;Content-Type: application/dns-message&quot; https://cloudflare-dns.com/dns-query | mdig --dns-parse-query
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Способы получения списка заблокированных IP&lt;/h2&gt; 
&lt;p&gt;!!! nftables не могут работать с ipset-ами. Собственный аналогичный механизм требует огромного количество RAM !!! для загрузки больших листов. Например, для загона 100K записей в nfset не хватает даже 256 Mb. !!! Если вам нужны большие листы на домашних роутерах, откатывайтесь на iptables+ipset.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Внесите заблокированные домены в &lt;code&gt;ipset/zapret-hosts-user.txt&lt;/code&gt; и запустите &lt;code&gt;ipset/get_user.sh&lt;/code&gt; На выходе получите &lt;code&gt;ipset/zapret-ip-user.txt&lt;/code&gt; с IP адресами.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Cкрипты с названием get_reestr_* оперируют дампом реестра заблокированных сайтов :&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_reestr_resolve.sh&lt;/code&gt; получает список доменов от rublacklist и дальше их ресолвит в ip адреса в файл ipset/zapret-ip.txt.gz. В этом списке есть готовые IP адреса, но судя во всему они там в точности в том виде, что вносит в реестр РосКомПозор. Адреса могут меняться, позор не успевает их обновлять, а провайдеры редко банят по IP : вместо этого они банят http запросы с &quot;нехорошим&quot; заголовком &quot;Host:&quot; вне зависимости от IP адреса. Поэтому скрипт ресолвит все сам, хотя это и занимает много времени. Используется мультипоточный ресолвер mdig (собственная разработка).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_reestr_preresolved.sh&lt;/code&gt;. то же самое, что и 2), только берется уже заресолвленый список со стороннего ресурса.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_reestr_preresolved_smart.sh&lt;/code&gt;. то же самое, что и 3), с добавлением всего диапазона некоторых автономных систем (прыгающие IP адреса из cloudflare, facebook, ...) и некоторых поддоменов блокируемых сайтов&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Cкрипты с названием &lt;code&gt;get_antifilter_*&lt;/code&gt; оперируют списками адресов и масок подсетей с сайтов antifilter.network и antifilter.download :&lt;/p&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ip.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/ip.lst&quot;&gt;https://antifilter.download/list/ip.lst&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ipsmart.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.network/download/ipsmart.lst&quot;&gt;https://antifilter.network/download/ipsmart.lst&lt;/a&gt;. умная суммаризация отдельных адресов из ip.lst по маскам от /32 до /22&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ipsum.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/ipsum.lst&quot;&gt;https://antifilter.download/list/ipsum.lst&lt;/a&gt;. суммаризация отдельных адресов из ip.lst по маске /24&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ipresolve.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/ipresolve.lst&quot;&gt;https://antifilter.download/list/ipresolve.lst&lt;/a&gt;. пре-ресолвленный список, аналогичный получаемый при помощи get_reestr_resolve. только ipv4.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_allyouneed.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/allyouneed.lst&quot;&gt;https://antifilter.download/list/allyouneed.lst&lt;/a&gt;. Суммарный список префиксов, созданный из ipsum.lst и subnet.lst.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_refilter_ipsum.sh&lt;/code&gt;. Список берется отсюда : &lt;a href=&quot;https://github.com/1andrevich/Re-filter-lists&quot;&gt;https://github.com/1andrevich/Re-filter-lists&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Все варианты рассмотренных скриптов автоматически создают и заполняют ipset. Варианты 2-10 дополнительно вызывают вариант 1.&lt;/p&gt; 
&lt;ol start=&quot;11&quot;&gt; 
 &lt;li&gt;&lt;code&gt;ipset/get_config.sh&lt;/code&gt;. этот скрипт вызывает то, что прописано в переменной GETLIST из файла config Если переменная не определена, то ресолвятся лишь листы для ipset nozapret/nozapret6.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Листы РКН все время изменяются. Возникают новые тенденции. Требования к RAM могут меняться. Поэтому необходима нечастая, но все же регулярная ревизия что же вообще у вас происходит на роутере. Или вы можете узнать о проблеме лишь когда у вас начнет постоянно пропадать wifi, и вам придется его перезагружать каждые 2 часа (метод кувалды).&lt;/p&gt; 
&lt;p&gt;Самые щадящие варианты по RAM - &lt;code&gt;get_antifilter_allyouneed.sh&lt;/code&gt;, &lt;code&gt;get_antifilter_ipsum.sh&lt;/code&gt;, &lt;code&gt;get_refilter_*.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Листы &lt;code&gt;zapret-ip.txt&lt;/code&gt; и &lt;code&gt;zapret-ipban.txt&lt;/code&gt; сохраняются в сжатом виде в файлы .gz. Это позволяет снизить их размер во много раз и сэкономить место на роутере. Отключить сжатие листов можно параметром конфига GZIP_LISTS=0.&lt;/p&gt; 
&lt;p&gt;На роутерах не рекомендуется вызывать эти скрипты чаще раза за 2 суток, поскольку сохранение идет либо во внутреннюю флэш память роутера, либо в случае extroot - на флэшку. В обоих случаях слишком частая запись может убить флэшку, но если это произойдет с внутренней флэш памятью, то вы просто убьете роутер.&lt;/p&gt; 
&lt;p&gt;Принудительное обновление &lt;code&gt;ipset&lt;/code&gt; выполняет скрипт &lt;code&gt;ipset/create_ipset.sh&lt;/code&gt;. Если передан параметр &lt;code&gt;no-update&lt;/code&gt;, скрипт не обновляет &lt;code&gt;ipset&lt;/code&gt;, а только создает его при его отсутствии и заполняет. Это полезно, когда могут случиться несколько последовательных вызовов скрипта. Нет смысла несколько раз перезаполнять &lt;code&gt;ipset&lt;/code&gt;, это длительная операция на больших листах. Листы можно обновлять раз в несколько суток, и только тогда вызывать &lt;code&gt;create_ipset&lt;/code&gt; без параметра &lt;code&gt;no-update&lt;/code&gt;. Во всех остальных случаях стоит применять &lt;code&gt;no-update&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Список РКН уже достиг внушительных размеров в сотни тысяч IP адресов. Поэтому для оптимизации &lt;code&gt;ipset&lt;/code&gt; применяется утилита &lt;code&gt;ip2net&lt;/code&gt;. Она берет список отдельных IP адресов и пытается интеллектуально создать из него подсети для сокращения количества адресов. &lt;code&gt;ip2net&lt;/code&gt; отсекает неправильные записи в листах, гарантируя отсутствие ошибок при их загрузке. &lt;code&gt;ip2net&lt;/code&gt; написан на языке C, поскольку операция ресурсоемкая. Иные способы роутер может не потянуть.&lt;/p&gt; 
&lt;p&gt;Можно внести список доменов в &lt;code&gt;ipset/zapret-hosts-user-ipban.txt&lt;/code&gt;. Их ip адреса будут помещены в отдельный ipset &lt;code&gt;ipban&lt;/code&gt;. Он может использоваться для принудительного завертывания всех соединений на прозрачный proxy &lt;code&gt;redsocks&lt;/code&gt; или на VPN.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IPV6&lt;/strong&gt; : если включен ipv6, то дополнительно создаются листы с таким же именем, но с &quot;6&quot; на конце перед расширением. &lt;code&gt;zapret-ip.txt&lt;/code&gt; =&amp;gt; &lt;code&gt;zapret-ip6.txt&lt;/code&gt; Создаются ipset-ы zapret6 и ipban6. Листы с antifilter не содержат список ipv6 адресов.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;СИСТЕМА ИСКЛЮЧЕНИЯ IP&lt;/strong&gt;. Все скрипты ресолвят файл &lt;code&gt;zapret-hosts-user-exclude.txt&lt;/code&gt;, создавая &lt;code&gt;zapret-ip-exclude.txt&lt;/code&gt; и &lt;code&gt;zapret-ip-exclude6.txt&lt;/code&gt;. Они загоняются в ipset-ы nozapret и nozapret6. Все правила, создаваемые init скриптами, создаются с учетом этих ipset. Помещенные в них IP не участвуют в процессе. &lt;code&gt;zapret-hosts-user-exclude.txt&lt;/code&gt; может содержать домены, ipv4 и ipv6 адреса или подсети.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;. Скрипты ipset/*.sh работают так же на FreeBSD. Вместо ipset они создают lookup таблицы ipfw с аналогичными именами. ipfw таблицы в отличие от ipset могут содержать как ipv4, так и ipv6 адреса и подсети в одной таблице, поэтому разделения нет.&lt;/p&gt; 
&lt;p&gt;Параметр конфига LISTS_RELOAD задает произвольную команду для перезагрузки листов. Это особенно полезно на BSD системах с PF. LISTS_RELOAD=- отключает перезагрузку листов.&lt;/p&gt; 
&lt;h2&gt;Фильтрация по именам доменов&lt;/h2&gt; 
&lt;p&gt;Альтернативой ipset является использование tpws или nfqws со списком доменов. Оба демона принимают неограниченное количество листов include (&lt;code&gt;--hostlist&lt;/code&gt;) и exclude (&lt;code&gt;--hostlist-exclude&lt;/code&gt;). Прежде всего проверяются exclude листы. При вхождении в них происходит отказ от дурения. Далее при наличии include листов проверяется домен на вхождение в них. При невхождении в список отказ от дурения. Если все include листы пустые, это приравнивается к отсутствию include листов. Ограничение перестает работать. В иных случаях происходит дурение. Нет ни одного списка - дурение всегда. Есть только exclude список - дурение всех, кроме. Есть только include список - дурение только их. Есть оба - дурение только include, кроме exclude.&lt;/p&gt; 
&lt;p&gt;В системе запуска это обыграно следующим образом. Присутствуют 2 include списка : &lt;code&gt;ipset/zapret-hosts-users.txt.gz&lt;/code&gt; или &lt;code&gt;ipset/zapret-hosts-users.txt&lt;/code&gt;, &lt;code&gt;ipset/zapret-hosts.txt.gz&lt;/code&gt; или &lt;code&gt;ipset/zapret-hosts.txt&lt;/code&gt; и 1 exclude список &lt;code&gt;ipset/zapret-hosts-users-exclude.txt.gz&lt;/code&gt; или &lt;code&gt;ipset/zapret-hosts-users-exclude.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;При режимах фильтрации &lt;code&gt;MODE_FILTER=hostlist&lt;/code&gt; или &lt;code&gt;MODE_FILTER=autohostlist&lt;/code&gt; система запуска передает &lt;strong&gt;nfqws&lt;/strong&gt; или &lt;strong&gt;tpws&lt;/strong&gt; все листы, файлы которых присутствуют. Передача происходит через замену маркеров &lt;code&gt;&amp;lt;HOSTLIST&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;lt;HOSTLIST_NOAUTO&amp;gt;&lt;/code&gt; на реальные параметры &lt;code&gt;--hostlist&lt;/code&gt;, &lt;code&gt;--hostlist-exclude&lt;/code&gt;, &lt;code&gt;--hostlist-auto&lt;/code&gt;. Если вдруг листы include присутствуют, но все они пустые, то работа аналогична отсутствию include листа. Файл есть, но несмотря на это дурится все, кроме exclude. Если вам нужен именно такой режим - не обязательно удалять &lt;code&gt;zapret-hosts-users.txt&lt;/code&gt;. Достаточно сделать его пустым.&lt;/p&gt; 
&lt;p&gt;Поддомены учитываются автоматически. Например, строчка &quot;ru&quot; вносит в список &quot;&lt;em&gt;.ru&quot;. Строчка &quot;&lt;/em&gt;.ru&quot; в списке не сработает. Можно использовать символ &lt;code&gt;^&lt;/code&gt; в начале хоста, чтобы отказаться от автоматического учета поддоменов.&lt;/p&gt; 
&lt;p&gt;Список доменов РКН может быть получен скриптами&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ipset/get_reestr_hostlist.sh
ipset/get_antizapret_domains.sh
ipset/get_reestr_resolvable_domains.sh
ipset/get_refilter_domains.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Он кладется в &lt;code&gt;ipset/zapret-hosts.txt.gz&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;При изменении времени модификации или размера файлов списки перечитываются автоматически. После неатомарных операций изменения можно послать tpws/nfqws сигнал HUP для принудительной перечитки всех листов.&lt;/p&gt; 
&lt;p&gt;При фильтрации по именам доменов демон должен запускаться без фильтрации по ipset. tpws и nfqws решают нужно ли применять дурение в зависимости от хоста, полученного из протокола прикладного уровня (http, tls, quic). При использовании больших списков, в том числе списка РКН, оцените объем RAM на роутере ! Если после запуска демона RAM под завязку или случаются oom, значит нужно отказаться от таких больших списков.&lt;/p&gt; 
&lt;h2&gt;Режим фильтрации autohostlist&lt;/h2&gt; 
&lt;p&gt;Этот режим позволяет проанализировать как запросы со стороны клиента, так и ответы от сервера. Если хост еще не находится ни в каких листах и обнаруживается ситуация, похожая на блокировку, происходит автоматическое добавление хоста в список &lt;code&gt;autohostlist&lt;/code&gt; как в памяти, так и в файле. &lt;strong&gt;nfqws&lt;/strong&gt; или &lt;strong&gt;tpws&lt;/strong&gt; сами ведут этот файл. Чтобы какой-то хост не смог попась в &lt;code&gt;autohostlist&lt;/code&gt; используйте &lt;code&gt;hostlist-exclude&lt;/code&gt;. Если он все-же туда попал - удалите запись из файла вручную. Процессы автоматически перечитают файл. &lt;strong&gt;tpws&lt;/strong&gt;/&lt;strong&gt;nfqws&lt;/strong&gt; сами назначают владельцем файла юзера, под которым они работают после сброса привилегий, чтобы иметь возможность обновлять лист.&lt;/p&gt; 
&lt;p&gt;В случае &lt;strong&gt;nfqws&lt;/strong&gt; данный режим требует перенаправления в том числе и входящего трафика. Крайне рекомендовано использовать ограничитель &lt;code&gt;connbytes&lt;/code&gt;, чтобы &lt;strong&gt;nfqws&lt;/strong&gt; не обрабатывал гигабайты. По этой же причине не рекомендуется использование режима на BSD системах. Там нет фильтра &lt;code&gt;connbytes&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;На linux системах при использовании nfqws и фильтра connbytes может понадобиться : &lt;code&gt;sysctl net.netfilter.nf_conntrack_tcp_be_liberal=1&lt;/code&gt; Было замечено, что некоторые DPI в России возвращают RST с неверным ACK. Это принимается tcp/ip стеком linux, но через раз приобретает статус INVALID в conntrack. Поэтому правила с &lt;code&gt;connbytes&lt;/code&gt; срабатывают через раз, не пересылая RST пакет &lt;strong&gt;nfqws&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Как вообще могут вести себя DPI, получив &quot;плохой запрос&quot; и приняв решение о блокировке:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Зависание: просто отмораживается, блокируя прохождение пакетов по TCP каналу.&lt;/li&gt; 
 &lt;li&gt;RST: отправляет RST клиенту и/или серверу&lt;/li&gt; 
 &lt;li&gt;Редирект: (только для http) отправляет редирект на сайт-заглушку&lt;/li&gt; 
 &lt;li&gt;Подмена сертификата: (только для https) полный перехват TLS сеанса с попыткой всунуть что-то свое клиенту. Применяется нечасто, поскольку броузеры на такое ругаются.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;nfqws&lt;/strong&gt; и &lt;strong&gt;tpws&lt;/strong&gt; могут сечь варианты 1-3, 4 они не распознают. В силу специфики работы с отдельными пакетами или с TCP каналом tpws и nfqws распознают эти ситуации по-разному. Что считается ситуацией, похожей на блокировку :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;nfqws&lt;/strong&gt; Несколько ретрансмиссий первого запроса в TCP сеансе, в котором имеется host.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;nfqws,tpws&lt;/strong&gt; RST, пришедший в ответ на первый запрос с хостом.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;nfqws,tpws&lt;/strong&gt; HTTP редирект, пришедший в ответ на первый запрос с хостом, на глобальный адрес с доменом 2 уровня, не совпадающим с доменом 2 уровня оригинального запроса.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;tpws&lt;/strong&gt; закрытие соединения клиентом после отправки первого запроса с хостом, если не было на него ответа со стороны сервера. Это обычно случается по таймауту, когда нет ответа (случай &quot;зависание&quot;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Чтобы снизить вероятность ложных срабатываний, имеется счетчик ситуаций, похожих на блокировку. Если за определенное время произойдет более определенного их количества, хост считается заблокированным и заносится в &lt;code&gt;autohostlist&lt;/code&gt;. По нему сразу же начинает работать стратегия по обходу блокировки. Если в процессе счета вебсайт отвечает без признаков блокировки, счетчик сбрасывается. Вероятно, это был временный сбой сайта.&lt;/p&gt; 
&lt;p&gt;На практике работа с данным режимом выглядит так. Первый раз пользователь заходит на сайт и получает заглушку, сброс соединения или броузер подвисает, вываливаясь по таймауту с сообщением о невозможности загрузить страницу. Надо долбить F5, принуждая броузер повторять попытки. После некоторой попытки сайт начинает работать, и дальше он будет работать всегда.&lt;/p&gt; 
&lt;p&gt;С этим режимом можно использовать техники обхода, ломающие значительное количество сайтов. Если сайт не ведет себя как заблокированный, значит обход применен не будет. В противном случае терять все равно нечего. Однако, могут быть временные сбои сервера, приводящие к ситуации, аналогичной блокировке. Могут происходить ложные срабатывания. Если такое произошло, стратегия может начать ломать незаблокированный сайт. Эту ситуацию, увы, придется вам контролировать вручную. Заносите такие домены в &lt;code&gt;ipset/zapret-hosts-user-exclude.txt&lt;/code&gt;, чтобы избежать повторения. Чтобы впоследствии разобраться почему домен был занесен в лист, можно включить &lt;code&gt;autohostlist debug log&lt;/code&gt;. Он полезен тем, что работает без постоянного просмотра вывода &lt;strong&gt;nfqws&lt;/strong&gt; в режиме debug. В лог заносятся только основные события, ведущие к занесению хоста в лист. По логу можно понять как избежать ложных срабатываний и подходит ли вообще вам этот режим.&lt;/p&gt; 
&lt;p&gt;Можно использовать один &lt;code&gt;autohostlist&lt;/code&gt; с множеством процессов. Все процессы проверяют время модификации файла. Если файл был изменен в другом процессе, происходит его перечитывание. Все процессы должны работать под одним uid, чтобы были права доступа на файл.&lt;/p&gt; 
&lt;p&gt;Скрипты &lt;code&gt;zapret&lt;/code&gt; ведут &lt;code&gt;autohostlist&lt;/code&gt; в &lt;code&gt;ipset/zapret-hosts-auto.txt&lt;/code&gt;. &lt;code&gt;install_easy.sh&lt;/code&gt; при апгрейде &lt;code&gt;zapret&lt;/code&gt; сохраняет этот файл. Режим &lt;code&gt;autohostlist&lt;/code&gt; включает в себя режим &lt;code&gt;hostlist&lt;/code&gt;. Можно вести &lt;code&gt;ipset/zapret-hosts-user.txt&lt;/code&gt;, &lt;code&gt;ipset/zapret-hosts-user-exclude.txt&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Проверка провайдера&lt;/h2&gt; 
&lt;p&gt;Перед настройкой нужно провести исследование какую бяку устроил вам ваш провайдер.&lt;/p&gt; 
&lt;p&gt;Нужно выяснить не подменяет ли он DNS и какой метод обхода DPI работает. В этом вам поможет скрипт &lt;code&gt;blockcheck.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Если DNS подменяется, но провайдер не перехватывает обращения к сторонним DNS, поменяйте DNS на публичный. Например: 8.8.8.8, 8.8.4.4, 1.1.1.1, 1.0.0.1, 9.9.9.9 Если DNS подменяется и провайдер перехватывает обращения к сторонним DNS, настройте &lt;code&gt;dnscrypt&lt;/code&gt;. Еще один эффективный вариант - использовать ресолвер от yandex 77.88.8.88 на нестандартном порту 1253. Многие провайдеры не анализируют обращения к DNS на нестандартных портах. &lt;code&gt;blockcheck&lt;/code&gt; если видит подмену DNS автоматически переключается на DoH сервера.&lt;/p&gt; 
&lt;p&gt;Следует прогнать &lt;code&gt;blockcheck&lt;/code&gt; по нескольким заблокированным сайтам и выявить общий характер блокировок. Разные сайты могут быть заблокированы по-разному, нужно искать такую технику, которая работает на большинстве. Чтобы записать вывод &lt;code&gt;blockcheck.sh&lt;/code&gt; в файл, выполните: &lt;code&gt;./blockcheck.sh | tee /tmp/blockcheck.txt&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Проанализируйте какие методы дурения DPI работают, в соответствии с ними настройте &lt;code&gt;/opt/zapret/config&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Имейте в виду, что у провайдеров может быть несколько DPI или запросы могут идти через разные каналы по методу балансировки нагрузки. Балансировка может означать, что на разных ветках разные DPI или они находятся на разных хопах. Такая ситуация может выражаться в нестабильности работы обхода. Дернули несколько раз curl. То работает, то connection reset или редирект. &lt;code&gt;blockcheck.sh&lt;/code&gt; выдает странноватые результаты. То split работает на 2-м. хопе, то на 4-м. Достоверность результата вызывает сомнения. В этом случае задайте несколько повторов одного и того же теста. Тест будет считаться успешным только, если все попытки пройдут успешно.&lt;/p&gt; 
&lt;p&gt;При использовании &lt;code&gt;autottl&lt;/code&gt; следует протестировать как можно больше разных доменов. Эта техника может на одних провайдерах работать стабильно, на других потребуется выяснить при каких параметрах она стабильна, на третьих полный хаос, и проще отказаться.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Blockcheck&lt;/code&gt; имеет 3 уровня сканирования.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;quick&lt;/code&gt; - максимально быстро найти хоть что-то работающее.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;standard&lt;/code&gt; дает возможность провести исследование как и на что реагирует DPI в плане методов обхода.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;force&lt;/code&gt; дает максимум проверок даже в случаях, когда ресурс работает без обхода или с более простыми стратегиями.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Есть ряд других параметров, которые не будут спрашиваться в диалоге, но которые можно переопределить через переменные.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CURL - замена программы curl
CURL_MAX_TIME - время таймаута curl в секундах
CURL_MAX_TIME_QUIC - время таймаута curl для quic. если не задано, используется значение CURL_MAX_TIME
CURL_MAX_TIME_DOH - время таймаута curl для DoH серверов
CURL_CMD=1 - показывать команды curl
CURL_OPT - дополнительные параметры curl. `-k` - игнор сертификатов. `-v` - подробный вывод протокола
DOMAINS - список тестируемых доменов через пробел
IPVS=4|6|46 - тестируемые версии ip протокола
ENABLE_HTTP=0|1 - включить тест plain http
ENABLE_HTTPS_TLS12=0|1 - включить тест https TLS 1.2
ENABLE_HTTPS_TLS13=0|1 - включить тест https TLS 1.3
ENABLE_HTTP3=0|1 - включить тест QUIC
REPEATS - количество попыток тестирования
PARALLEL=0|1 - включить параллельные попытки. может обидеть сайт из-за долбежки и привести к неверному результату
SCANLEVEL=quick|standard|force - уровень сканирования
BATCH=1 - пакетный режим без вопросов и ожидания ввода в консоли
HTTP_PORT, HTTPS_PORT, QUIC_PORT - номера портов для соответствующих протоколов
SKIP_DNSCHECK=1 - отказ от проверки DNS
SKIP_IPBLOCK=1 - отказ от тестов блокировки по порту или IP
SKIP_TPWS=1 - отказ от тестов tpws
SKIP_PKTWS=1 - отказ от тестов nfqws/dvtws/winws
PKTWS_EXTRA, TPWS_EXTRA - дополнительные параметры nfqws/dvtws/winws и tpws
PKTWS_EXTRA_1 .. PKTWS_EXTRA_9, TPWS_EXTRA_1 .. TPWS_EXTRA_9 - отдельно дополнительные параметры, содержащие пробелы
SECURE_DNS=0|1 - принудительно выключить или включить DoH
DOH_SERVERS - список URL DoH через пробел для автоматического выбора работающего сервера
DOH_SERVER - конкретный DoH URL, отказ от поиска
UNBLOCKED_DOM - незаблокированный домен, который используется для тестов IP block
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Пример запуска с переменными:&lt;br&gt; &lt;code&gt;SECURE_DNS=1 SKIP_TPWS=1 CURL_MAX_TIME=1 CURL=/tmp/curl ./blockcheck.sh&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;СКАН ПОРТОВ&lt;/strong&gt;&lt;br&gt; Если в системе присутствует совместимый &lt;code&gt;netcat&lt;/code&gt; (ncat от nmap или openbsd ncat. в OpenWrt по умолчанию нет), то выполняется сканирование портов http или https всех IP адресов домена. Если ни один IP не отвечает, то результат очевиден. Можно останавливать сканирование. Автоматически оно не остановится, потому что netcat-ы недостаточно подробно информируют о причинах ошибки. Если доступна только часть IP, то можно ожидать хаотичных сбоев, т.к. подключение идет к случайному адресу из списка.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ПРОВЕРКА НА ЧАСТИЧНЫЙ IP block&lt;/strong&gt;&lt;br&gt; Под частичным блоком подразумевается ситуация, когда коннект на порты есть, но по определенному транспортному или прикладному протоколу всегда идет реакция DPI вне зависимости от запрашиваемого домена. Эта проверка так же не выдаст автоматического вердикта/решения, потому что может быть очень много вариаций. Вместо этого анализ происходящего возложен на самого пользователя или тех, кто будет читать лог. Суть этой проверки в попытке дернуть неблокированный IP с блокированным доменом и наоборот, анализируя при этом реакцию DPI. Реакция DPI обычно проявляется в виде таймаута (зависание запроса), connection reset или http redirect на заглушку. Любой другой вариант скорее всего говорит об отсутствии реакции DPI. В частности, любые http коды, кроме редиректа, ведущего именно на заглушку, а не куда-то еще. На TLS - ошибки handshake без задержек. Ошибка сертификата может говорить как о реакции DPI с MiTM атакой (подмена сертификата), так и о том, что принимающий сервер неблокированного домена все равно принимает ваш TLS &lt;code&gt;handshake&lt;/code&gt; с чужим доменом, пытаясь при этом выдать сертификат без запрошенного домена. Требуется дополнительный анализ. Если на заблокированный домен есть реакция на всех IP адресах, значит есть блокировка по домену. Если на неблокированный домен есть реакция на IP адресах блокированного домена, значит имеет место блок по IP. Соответственно, если есть и то, и другое, значит есть и блок по IP, и блок по домену. Неблокированный домен первым делом проверяется на доступность на оригинальном адресе. При недоступности тест отменяется, поскольку он будет неинформативен.&lt;/p&gt; 
&lt;p&gt;Если выяснено, что есть частичный блок по IP на DPI, то скорее всего все остальные тесты будут провалены вне зависимости от стратегий обхода. Но бывают и некоторые исключения. Например, пробитие через &lt;code&gt;ipv6 option headers&lt;/code&gt;. Или сделать так, чтобы он не мог распознать протокол прикладного уровня. Дальнейшие тесты могут быть не лишены смысла.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ПРИМЕРЫ БЛОКИРОВКИ ТОЛЬКО ПО ДОМЕНУ БЕЗ БЛОКА ПО IP&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; testing iana.org on it&#39;s original
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
curl: (28) Operation timed out after 1002 milliseconds with 0 bytes received
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
HTTP/1.1 409 Conflict
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
HTTP/1.1 409 Conflict

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
curl: (28) Connection timed out after 1001 milliseconds
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
HTTP/1.1 307 Temporary Redirect
Location: https://www.gblnet.net/blocked.php
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
HTTP/1.1 409 Conflict
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
HTTP/1.1 409 Conflict

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
curl: (35) Recv failure: Connection reset by peer
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;ПРИМЕР ПОЛНОГО IP БЛОКА ИЛИ БЛОКА TCP ПОРТА ПРИ ОТСУТСТВИИ БЛОКА ПО ДОМЕНУ&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;* port block tests ipv4 startmail.com:80
  ncat -z -w 1 145.131.90.136 80
  145.131.90.136 does not connect. netcat code 1
  ncat -z -w 1 145.131.90.152 80
  145.131.90.152 does not connect. netcat code 1

* curl_test_http ipv4 startmail.com
- checking without DPI bypass
  curl: (28) Connection timed out after 2002 milliseconds
  UNAVAILABLE code=28

- IP block tests (requires manual interpretation)

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing startmail.com on 192.0.43.8 (iana.org)
HTTP/1.1 302 Found
Location: https://www.iana.org/
&amp;gt; testing iana.org on 145.131.90.136 (startmail.com)
curl: (28) Connection timed out after 2002 milliseconds
&amp;gt; testing iana.org on 145.131.90.152 (startmail.com)
curl: (28) Connection timed out after 2002 milliseconds
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Выбор параметров&lt;/h2&gt; 
&lt;p&gt;Файл &lt;code&gt;/opt/zapret/config&lt;/code&gt; используется различными компонентами системы и содержит основные настройки. Его нужно просмотреть и при необходимости отредактировать.&lt;/p&gt; 
&lt;p&gt;На linux системах можно выбрать использовать &lt;code&gt;iptables&lt;/code&gt; или &lt;code&gt;nftables&lt;/code&gt;. По умолчанию на традиционных linux выбирается &lt;code&gt;nftables&lt;/code&gt;, если установлен nft. На OpenWrt по умолчанию выбирается &lt;code&gt;nftables&lt;/code&gt; на новых версиях с firewall4.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;FWTYPE=iptables&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;На &lt;code&gt;nftables&lt;/code&gt; можно отключить стандартную схему перехвата трафика после NAT и перейти на перехват до NAT. Это сделает невозможным применение некоторых методов дурения на проходящем трафике как в случае с &lt;code&gt;iptables&lt;/code&gt;. nfqws начнет получать адреса пакетов из локальной сети и отображать их в логах.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;POSTNAT=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Существует 3 стандартных опции запуска, настраиваемых раздельно и независимо: &lt;code&gt;tpws-socks&lt;/code&gt;, &lt;strong&gt;tpws&lt;/strong&gt;, &lt;strong&gt;nfqws&lt;/strong&gt;. Их можно использовать как по отдельности, так и вместе. Например, вам надо сделать комбинацию из методов, доступных только в &lt;strong&gt;tpws&lt;/strong&gt; и только в &lt;strong&gt;nfqws&lt;/strong&gt;. Их можно задействовать вместе. &lt;strong&gt;tpws&lt;/strong&gt; будет прозрачно локализовывать трафик на системе и применять свое дурение, &lt;strong&gt;nfqws&lt;/strong&gt; будет дурить трафик, исходящий с самой системы после обработки на &lt;strong&gt;tpws&lt;/strong&gt;. А можно на эту же систему повесить без параметров socks proxy, чтобы получать доступ к обходу блокировок через прокси. Таким образом, все 3 режима вполне могут задействоваться вместе. Так же безусловно и независимо, в добавок к стандартным опциям, применяются все custom скрипты в &lt;code&gt;init.d/{sysv,openwrt,macos}/custom.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Однако, при комбинировании tpws и nfqws с пересечением по L3/L4 протоколам не все так просто , как может показаться на первый взгляд. Первым всегда работает tpws, за ним - nfqws. На nfqws попадает уже &quot;задуренный&quot; трафик от tpws. Получается, что дурилка дурит дурилку, и дурилка не срабатывает, потому что ее задурили. Вот такой веселый момент. nfqws перестает распознавать протоколы и применять методы. Некоторые методы дурения от tpws nfqws в состоянии распознать и отработать корректно, но большинство - нет. Решение - использование &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt; в nfqws и работа как с неизвестным протоколом. Комбинирование tpws и nfqws является продвинутым вариантом, требующим глубокого понимания происходящего. Очень желательно проанализировать действия nfqws по &lt;code&gt;--debug&lt;/code&gt; логу. Все ли так, как вы задумали.&lt;/p&gt; 
&lt;p&gt;Одновременное использование tpws и nfqws без пересечения по L3/L4 (то есть nfqws - udp, tpws - tcp или nfqws - port 443, tpws - port 80 или nfqws - ipv4, tpws - ipv6) проблем не представляет.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;tpws-socks&lt;/code&gt; требует настройки параметров &lt;strong&gt;tpws&lt;/strong&gt;, но не требует перехвата трафика. Остальные опции требуют раздельно настройки перехвата трафика и опции самих демонов. Каждая опция предполагает запуск одного инстанса соответствующего демона. Все различия методов дурения для &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;quic&lt;/code&gt; и т.д. должны быть отражены через схему мультистратегий. В этом смысле настройка похожа на вариант &lt;code&gt;winws&lt;/code&gt; на Windows, а перенос конфигов не должен представлять больших сложностей. Основное правило настройки перехвата - перехватывайте только необходимый минимум. Любой перехват лишнего - это бессмысленная нагрузка на вашу систему. Опции демонов &lt;code&gt;--ipset&lt;/code&gt; использовать запрещено. Это сделано намеренно и искусственно, чтобы не поощрять простой и работающий, но неэффективный метод на *nix системах. Используйте &lt;code&gt;ipset&lt;/code&gt;-ы режима ядра. При необходимости пишите и задействуйте &lt;code&gt;custom scripts&lt;/code&gt;. Настройки демонов можно для удобства писать на нескольких строках, используя двойные или одинарные кавычки. Чтобы задействовать стандартные обновляемые хост-листы из &lt;code&gt;ipset&lt;/code&gt;, используйте маркер 
 &lt;hostlist&gt;
  . Он будет заменен на параметры, соответствующие режиму MODE_FILTER, и будут подставлены реально существующие файлы. Если MODE_FILTER не предполагает стандартного хостлиста, 
  &lt;hostlist&gt;
    будет заменен на пустую строку. Стандартные хостлисты следует вставлять в финальных стратегиях (стратегиях по умолчанию), закрывающих цепочки по группе параметров фильтра. Таких мест может быть несколько. Не нужно использовать 
   &lt;hostlist&gt;
     в узких специализациях и в тех профилях, по которым точно не будет проходить трафик с известными протоколами, откуда поддерживается извлечение имени хоста (
    &lt;code&gt;http&lt;/code&gt;, 
    &lt;code&gt;tls&lt;/code&gt;, 
    &lt;code&gt;quic&lt;/code&gt;). &amp;lt;HOSTLIST_NOAUTO&amp;gt; - это вариация, при которой стандартный автолист используется как обычный. То есть на этом профиле не происходит автоматическое добавление заблокированных доменов. Но если на другом профиле что-то будет добавлено, то этот профиль примет изменения автоматически.
   &lt;/hostlist&gt;
  &lt;/hostlist&gt;
 &lt;/hostlist&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включение стандартной опции tpws в режиме socks&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;code&gt;TPWS_SOCKS_ENABLE=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;На каком порту будет слушать tpws socks. прослушивается только localhost и LAN&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;code&gt;TPPORT_SOCKS=987&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Параметры tpws для режима socks&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TPWS_SOCKS_OPT=&quot;
--filter-tcp=80 --methodeol &amp;lt;HOSTLIST&amp;gt; --new
--filter-tcp=443 --split-pos=1,midsld --disorder &amp;lt;HOSTLIST&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включение стандартной опции tpws в прозрачном режиме&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;code&gt;TPWS_ENABLE=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Какие tcp порты следует перенаправлять на tpws&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;code&gt;TPWS_PORTS=80,443&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Параметры tpws для прозрачного режима&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TPWS_OPT=&quot;
--filter-tcp=80 --methodeol &amp;lt;HOSTLIST&amp;gt; --new
--filter-tcp=443 --split-pos=1,midsld --disorder &amp;lt;HOSTLIST&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включение стандартной опции nfqws&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;code&gt;NFQWS_ENABLE=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Какие tcp и udp порты следует перенаправлять на nfqws с использованием connbytes ограничителя&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;connbytes позволяет из каждого соединения перенаправить только заданное количество начальных пакетов по каждому направлению - на вход и на выход. Это более эффективная kernel-mode замена параметра nfqws &lt;code&gt;--dpi-desync-cutoff=nX&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_PORTS_TCP=80,443
NFQWS_PORTS_UDP=443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Сколько начальных входящих и исходящих пакетов нужно перенаправлять на nfqws по каждому направлению&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_TCP_PKT_OUT=$((6+$AUTOHOSTLIST_RETRANS_THRESHOLD))
NFQWS_TCP_PKT_IN=3
NFQWS_UDP_PKT_OUT=$((6+$AUTOHOSTLIST_RETRANS_THRESHOLD))
NFQWS_UDP_PKT_IN=0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Задать порты для перенаправления на nfqws без connbytes ограничителя&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; Есть трафик, исходящий сеанс для которого необходимо перенаправлять весь без ограничителей. Типичное применение - поддержка http keepalives на stateless DPI. Это существенно нагружает процессор. Использовать только если понимаете зачем. Чаще всего это не нужно. Входящий трафик ограничивается по connbytes через параметры PKT_IN. Если указываете здесь какие-то порты, желательно их убрать из версии с connbytes ограничителем&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_PORTS_TCP_KEEPALIVE=80
NFQWS_PORTS_UDP_KEEPALIVE=
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Параметры nfqws&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_OPT=&quot;
--filter-tcp=80 --dpi-desync=fake,multisplit --dpi-desync-split-pos=method+2 --dpi-desync-fooling=md5sig &amp;lt;HOSTLIST&amp;gt; --new
--filter-tcp=443 --dpi-desync=fake,multidisorder --dpi-desync-split-pos=1,midsld --dpi-desync-fooling=badseq,md5sig &amp;lt;HOSTLIST&amp;gt; --new
--filter-udp=443 --dpi-desync=fake --dpi-desync-repeats=6 &amp;lt;HOSTLIST_NOAUTO&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Режим фильтрации хостов:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;none - применять дурение ко всем хостам
ipset - ограничить дурение ipset-ом zapret/zapret6
hostlist - ограничить дурение списком хостов из файла
autohostlist - режим hostlist + распознавание блокировок и ведение автоматического листа
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;MODE_FILTER=none&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Настройка системы управления выборочным traffic offload (только если поддерживается)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;donttouch: выборочное управление отключено, используется системная настройка, простой инсталлятор выключает системную настройку, если она не совместима с выбранным режимом
none: выборочное управление отключено, простой инсталлятор выключает системную настройку
software: выборочное управление включено в режиме software, простой инсталлятор выключает системную настройку
hardware: выборочное управление включено в режиме hardware, простой инсталлятор выключает системную настройку
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;FLOWOFFLOAD=donttouch&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Параметр GETLIST указывает инсталлятору &lt;code&gt;install_easy.sh&lt;/code&gt; какой скрипт дергать для обновления списка заблокированных ip или хостов. Он же вызывается через &lt;code&gt;get_config.sh&lt;/code&gt; из запланированных заданий (crontab или systemd timer). Поместите сюда название скрипта, который будете использовать для обновления листов. Если не нужно, то параметр следует закомментировать.&lt;/p&gt; 
&lt;p&gt;Можно индивидуально отключить ipv4 или ipv6. Если параметр закомментирован или не равен &quot;1&quot;, использование протокола разрешено.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DISABLE_IPV4=1
DISABLE_IPV6=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Количество потоков для многопоточного DNS ресолвера mdig (1..100). Чем их больше, тем быстрее, но не обидится ли на долбежку ваш DNS сервер?&lt;br&gt; &lt;code&gt;MDIG_THREADS=30&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Место для хранения временных файлов. При скачивании огромных реестров в &lt;code&gt;/tmp&lt;/code&gt; места может не хватить. Если файловая система на нормальном носителе (не встроенная память роутера), то можно указать место на флэшке или диске. &lt;code&gt;TMPDIR=/opt/zapret/tmp&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Опции для создания ipset-ов и nfset-ов&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SET_MAXELEM=262144
IPSET_OPT=&quot;hashsize 262144 maxelem 2097152&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Хук, позволяющий внести ip адреса динамически. $1 = имя таблицы&lt;br&gt; Адреса выводятся в stdout. В случае nfset автоматически решается проблема возможного пересечения интервалов.&lt;br&gt; &lt;code&gt;IPSET_HOOK=&quot;/etc/zapret.ipset.hook&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;ПРО РУГАНЬ в dmesg по поводу нехватки памяти.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Может так случиться, что памяти в системе достаточно, но при попытке заполнить огромный &lt;code&gt;ipset&lt;/code&gt; ядро начинает громко ругаться, &lt;code&gt;ipset&lt;/code&gt; заполняется не полностью.&lt;br&gt; Вероятная причина в том, что превышается &lt;code&gt;hashsize&lt;/code&gt;, заданный при создании &lt;code&gt;ipset&lt;/code&gt; (create_ipset.sh). Происходит переаллокация списка, не находится непрерывных фрагментов памяти нужной длины. Это лечится увеличением &lt;code&gt;hashsize&lt;/code&gt;. Но чем больше &lt;code&gt;hashsize&lt;/code&gt;, тем больше занимает &lt;code&gt;ipset&lt;/code&gt; в памяти. Задавать слишком большой &lt;code&gt;hashsize&lt;/code&gt; для недостаточно больших списков нецелесообразно.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Опции для вызова ip2net. Отдельно для листов ipv4 и ipv6.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IP2NET_OPT4=&quot;--prefix-length=22-30 --v4-threshold=3/4&quot;
IP2NET_OPT6=&quot;--prefix-length=56-64 --v6-threshold=5&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Настройка режима autohostlist.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;При увеличении AUTOHOSTLIST_RETRANS_THRESHOLD и использовании nfqws следует пересмотреть значения параметров NFQWS_TCP_PKT_OUT и NFQWS_UDP_PKT_OUT. Все ретрансмиссии должны быть получены nfqws, иначе триггер &quot;зависание запроса&quot; не сработает.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;AUTOHOSTLIST_RETRANS_THRESHOLD=3
AUTOHOSTLIST_FAIL_THRESHOLD=3
AUTOHOSTLIST_FAIL_TIME=60
AUTOHOSTLIST_DEBUG=0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включить или выключить сжатие больших листов в скриптах ipset/*.sh.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;GZIP_LISTS=1&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Команда для перезагрузки ip таблиц фаервола.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Если не указано или пустое, выбирается автоматически ipset или ipfw при их наличии. На BSD системах с PF нет автоматической загрузки. Там нужно указать команду явно: &lt;code&gt;pfctl -f /etc/pf.conf&lt;/code&gt; На более новых pfctl (есть в новых FreeBSD, нет в OpenBSD 6.8) можно дать команду загрузки только таблиц: &lt;code&gt;pfctl -Tl -f /etc/pf.conf&lt;/code&gt; &quot;-&quot; означает отключение загрузки листов даже при наличии поддерживаемого backend.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LISTS_RELOAD=&quot;pfctl -f /etc/pf.conf&quot;
LISTS_RELOAD=-
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;В OpenWrt существует сеть по умолчанию &#39;lan&#39;. Только трафик с этой сети будет перенаправлен на tpws. Но возможно задать другие сети или список сетей:&lt;br&gt; &lt;code&gt;OPENWRT_LAN=&quot;lan lan2 lan3&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;В OpenWrt в качестве wan берутся интерфейсы, имеющие default route. Отдельно для ipv4 и ipv6. Это можно переопределить:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;OPENWRT_WAN4=&quot;wan4 vpn&quot;
OPENWRT_WAN6=&quot;wan6 vpn6&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Параметр INIT_APPLY_FW=1 разрешает init скрипту самостоятельно применять правила iptables.&lt;br&gt; При иных значениях или если параметр закомментирован, правила применены не будут.&lt;br&gt; Это полезно, если у вас есть система управления фаерволом, в настройки которой и следует прикрутить правила.&lt;br&gt; На OpenWrt неприменимо при использовании firewall3+iptables.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Следующие настройки не актуальны для openwrt:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Если ваша система работает как роутер, то нужно вписать названия внутренних и внешних интерфейсов:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_LAN=eth0
IFACE_WAN=eth1
IFACE_WAN6=&quot;henet ipsec0&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Несколько интерфейсов могут быть вписаны через пробел. Если IFACE_WAN6 не задан, то берется значение IFACE_WAN.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Настройка маршрутизации, маскарада и т.д. не входит в задачу zapret. Включаются только режимы, обеспечивающие перехват транзитного трафика. Возможно определить несколько интерфейсов следующим образом:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;IFACE_LAN=&quot;eth0 eth1 eth2&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Прикручивание к системе управления фаерволом или своей системе запуска&lt;/h2&gt; 
&lt;p&gt;Если вы используете какую-то систему управления фаерволом, то она может вступать в конфликт с имеющимся скриптом запуска. При повторном применении правил она могла бы поломать настройки iptables от zapret. В этом случае правила для iptables должны быть прикручены к вашему фаерволу отдельно от запуска tpws или nfqws.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Следующие вызовы позволяют применить или убрать правила iptables отдельно:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/opt/zapret/init.d/sysv/zapret start_fw
/opt/zapret/init.d/sysv/zapret stop_fw
/opt/zapret/init.d/sysv/zapret restart_fw
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;А так можно запустить или остановить демоны отдельно от фаервола:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/opt/zapret/init.d/sysv/zapret start_daemons
/opt/zapret/init.d/sysv/zapret stop_daemons
/opt/zapret/init.d/sysv/zapret restart_daemons
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;nftables&lt;/code&gt; сводят практически на нет конфликты между разными системами управления, поскольку позволяют использовать независимые таблицы и хуки. Используется отдельная nf-таблица &quot;zapret&quot;. Если ваша система ее не будет трогать, скорее всего все будет нормально.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Для &lt;code&gt;nftables&lt;/code&gt; предусмотрено несколько дополнительных вызовов:&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Посмотреть set-ы интерфейсов, относящихся к lan, wan и wan6. По ним идет завертывание трафика. А так же таблицу flow table с именами интерфейсов ingress hook.&lt;br&gt; &lt;code&gt;/opt/zapret/init.d/sysv/zapret list_ifsets&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Обновить set-ы интерфейсов, относящихся к lan, wan и wan6. Для традиционных linux список интерфейсов берется из переменных конфига IFACE_LAN, IFACE_WAN. Для OpenWrt определяется автоматически. Множество lanif может быть расширено параметром OPENWRT_LAN. Все интерфейсы lan и wan так же добавляются в ingress hook от flow table.&lt;br&gt; &lt;code&gt;/opt/zapret/init.d/sysv/zapret reload_ifsets&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Просмотр таблицы без содержимого set-ов. Вызывает &lt;code&gt;nft -t list table inet zapret&lt;/code&gt;&lt;br&gt; &lt;code&gt;/opt/zapret/init.d/sysv/zapret list_table&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Так же возможно прицепиться своим скриптом к любой стадии применения и снятия фаервола со стороны zapret скриптов:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;INIT_FW_PRE_UP_HOOK=&quot;/etc/firewall.zapret.hook.pre_up&quot;
INIT_FW_POST_UP_HOOK=&quot;/etc/firewall.zapret.hook.post_up&quot;
INIT_FW_PRE_DOWN_HOOK=&quot;/etc/firewall.zapret.hook.pre_down&quot;
INIT_FW_POST_DOWN_HOOK=&quot;/etc/firewall.zapret.hook.post_down&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Эти настройки доступны в config. Может быть полезно, если вам нужно использовать nftables set-ы, например &lt;code&gt;ipban&lt;/code&gt;/&lt;code&gt;ipban6&lt;/code&gt;. nfset-ы принадлежат только одной таблице, следовательно вам придется писать правила для таблицы zapret, а значит нужно синхронизироваться с применением/снятием правил со стороны zapret скриптов.&lt;/p&gt; 
&lt;h2&gt;Вариант custom&lt;/h2&gt; 
&lt;p&gt;custom скрипты - это маленькие shell программы, управляющие нестандартными режимами применения zapret или частными случаями, которые не могут быть интегрированы в основную часть без загромождения и замусоривания кода. Для применения custom следует помещать файлы в следующие директории в зависимости от вашей системы:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/opt/zapret/init.d/sysv/custom.d
/opt/zapret/init.d/openwrt/custom.d
/opt/zapret/init.d/macos/custom.d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Директория будет просканирована в алфавитном порядке, и каждый скрипт будет применен.&lt;/p&gt; 
&lt;p&gt;В &lt;code&gt;init.d&lt;/code&gt; имеется &lt;code&gt;custom.d.examples.linux&lt;/code&gt;, в &lt;code&gt;init.d/macos&lt;/code&gt; - &lt;code&gt;custom.d.examples&lt;/code&gt;. Это готовые скрипты, которые можно копировать в &lt;code&gt;custom.d&lt;/code&gt;. Их можно взять за основу для написания собственных.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Для linux пишется код в функции&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;zapret_custom_daemons
zapret_custom_firewall
zapret_custom_firewall_nft
zapret_custom_firewall_nft_flush
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Для macos&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;zapret_custom_daemons
zapret_custom_firewall_v4
zapret_custom_firewall_v6
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;zapret_custom_daemons поднимает демоны &lt;strong&gt;nfqws&lt;/strong&gt;/&lt;strong&gt;tpws&lt;/strong&gt; в нужном вам количестве и с нужными вам параметрами. В первом параметре передается код операции: 1 = запуск, 0 = останов. Схема запуска демонов в OpenWrt отличается - используется procd. Поэтому логика останова отсутствует за ненадобностью, останов никогда не вызывается.&lt;/p&gt; 
&lt;p&gt;zapret_custom_firewall поднимает и убирает правила &lt;code&gt;iptables&lt;/code&gt;. В первом параметре передается код операции: 1 = запуск, 0 = останов.&lt;/p&gt; 
&lt;p&gt;zapret_custom_firewall_nft поднимает правила nftables. Логика останова отсутствует за ненадобностью. Стандартные цепочки zapret удаляются автоматически. Однако, sets и правила из ваших собственных цепочек не удаляются. Их нужно подчистить в zapret_custom_firewall_nft_flush. Если set-ов и собственных цепочек у вас нет, функцию можно не определять или оставить пустой.&lt;/p&gt; 
&lt;p&gt;Если вам не нужны iptables или nftables - можете не писать соответствующую функцию.&lt;/p&gt; 
&lt;p&gt;В linux можно использовать локальные переменные &lt;code&gt;FW_EXTRA_PRE&lt;/code&gt; и &lt;code&gt;FW_EXTRA_POST&lt;/code&gt;.&lt;br&gt; &lt;code&gt;FW_EXTRA_PRE&lt;/code&gt; добавляет код к правилам ip/nf tables до кода, генерируемого функциями-хелперами.&lt;br&gt; &lt;code&gt;FW_EXTRA_POST&lt;/code&gt; добавляет код после.&lt;/p&gt; 
&lt;p&gt;В linux функции-хелперы добавляют правило в начало цепочек, то есть перед уже имеющимися. Поэтому специализации должны идти после более общих вариантов. Для macos правило обратное. Там правила добавляются в конец. По этой же причине фаервол в Linux сначала применяется в стандартном режиме, потом custom, а в MacOS сначала custom, потом стандартный режим.&lt;/p&gt; 
&lt;p&gt;В macos firewall-функции ничего сами никуда не заносят. Их задача - лишь выдать текст в stdout, содержащий правила для pf-якоря. Остальное сделает обертка.&lt;/p&gt; 
&lt;p&gt;Особо обратите внимание на номер демона в функциях &lt;code&gt;run_daemon&lt;/code&gt; , &lt;code&gt;do_daemon&lt;/code&gt;, &lt;code&gt;do_tpws&lt;/code&gt;, &lt;code&gt;do_tpws_socks&lt;/code&gt;, &lt;code&gt;do_nfqws&lt;/code&gt; , номера портов &lt;strong&gt;tpws&lt;/strong&gt; и очередей &lt;strong&gt;nfqueue&lt;/strong&gt;. Они должны быть уникальными во всех скриптах. При накладке будет ошибка. Поэтому используйте функции динамического получения этих значений из пула.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;custom&lt;/code&gt; скрипты могут использовать переменные из &lt;code&gt;config&lt;/code&gt;. Можно помещать в &lt;code&gt;config&lt;/code&gt; свои переменные и задействовать их в скриптах. Можно использовать функции-хелперы. Они являются частью общего пространства функций shell. Полезные функции можно взять из примеров скриптов. Так же смотрите &lt;code&gt;common/*.sh&lt;/code&gt;. Используя хелпер функции, вы избавитесь от необходимости учитывать все возможные случаи типа наличия/отсутствия ipv6, является ли система роутером, имена интерфейсов, ...Хелперы это учитывают. Вам нужно сосредоточиться лишь на фильтрах &lt;code&gt;{ip,nf}tables&lt;/code&gt; и параметрах демонов.&lt;/p&gt; 
&lt;h2&gt;Простая установка&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;install_easy.sh&lt;/code&gt; автоматизирует ручные варианты процедур установки. Он поддерживает OpenWrt, linux системы на базе systemd или openrc и MacOS.&lt;/p&gt; 
&lt;p&gt;Для более гибкой настройки перед запуском инсталлятора следует выполнить раздел &quot;Выбор параметров&quot;.&lt;/p&gt; 
&lt;p&gt;Если система запуска поддерживается, но используется не поддерживаемый инсталлятором менеджер пакетов или названия пакетов не соответствуют прописанным в инсталлятор, пакеты нужно установить вручную. Всегда требуется curl. &lt;code&gt;ipset&lt;/code&gt; - только для режима &lt;code&gt;iptables&lt;/code&gt;, для &lt;code&gt;nftables&lt;/code&gt; - не нужен.&lt;/p&gt; 
&lt;p&gt;Для совсем обрезанных дистрибутивов (alpine) требуется отдельно установить &lt;code&gt;iptables&lt;/code&gt; и &lt;code&gt;ip6tables&lt;/code&gt;, либо &lt;code&gt;nftables&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;В комплекте идут статические бинарники для большинства архитектур. Какой-то из них подойдет с вероятностью 99%. Но если у вас экзотическая система, инсталлятор попробует собрать бинарники сам через make. Для этого нужны gcc, make и необходимые &lt;strong&gt;-dev&lt;/strong&gt; пакеты. Можно форсировать режим компиляции следующим вызовом:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;install_easy.sh make&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Под OpenWrt все уже сразу готово для использования системы в качестве роутера. Имена интерфейсов WAN и LAN известны из настроек системы. Под другими системами роутер вы настраиваете самостоятельно. Инсталлятор в это не вмешивается. Инсталлятор в зависимости от выбранного режима может спросить LAN и WAN интерфейсы. Нужно понимать, что заворот проходящего трафика на &lt;strong&gt;tpws&lt;/strong&gt; в прозрачном режиме происходит до выполнения маршрутизации, следовательно возможна фильтрация по LAN и невозможна по WAN. Решение о завороте на &lt;strong&gt;tpws&lt;/strong&gt; локального исходящего трафика принимается после выполнения маршрутизации, следовательно ситуация обратная: LAN не имеет смысла, фильтрация по WAN возможна. Заворот на &lt;strong&gt;nfqws&lt;/strong&gt; происходит всегда после маршрутизации, поэтому к нему применима только фильтрация по WAN. Возможность прохождения трафика в том или ином направлении настраивается вами в процессе конфигурации роутера.&lt;/p&gt; 
&lt;p&gt;Деинсталляция выполняется через &lt;code&gt;uninstall_easy.sh&lt;/code&gt;. После выполнения деинсталляции можно удалить каталог &lt;code&gt;/opt/zapret&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Установка под systemd&lt;/h2&gt; 
&lt;p&gt;Если вам нравится systemd и хочется максимально под него заточиться, можно отказаться от скриптов запуска zapret и поднимать инстансы &lt;code&gt;tpws&lt;/code&gt; и &lt;code&gt;nfqws&lt;/code&gt; как отдельные юниты systemd. При этом вам придется вручную написать правила iptables/nftables и каким-то образом их поднимать. Например, написать дополнительный systemd unit для этого. Так же требуется собрать бинарники особым образом через &lt;code&gt;make systemd&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;В комплекте zapret есть шаблоны &lt;code&gt;init.d/systemd/{nfqws@.service,tpws@.service}&lt;/code&gt;. Краткий перечень команд для их использования приведен в комментариях в этих файлах.&lt;/p&gt; 
&lt;h2&gt;Простая установка на openwrt&lt;/h2&gt; 
&lt;p&gt;Работает только если у вас на роутере достаточно места.&lt;/p&gt; 
&lt;p&gt;Копируем zapret на роутер в &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Запускаем установщик:&lt;br&gt; &lt;code&gt;sh /tmp/zapret/install_easy.sh&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Он скопирует в &lt;code&gt;/opt/zapret&lt;/code&gt; только необходимый минимум файлов.&lt;/p&gt; 
&lt;p&gt;После успешной установки можно удалить zapret из tmp для освобождения RAM:&lt;br&gt; &lt;code&gt;rm -r /tmp/zapret&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Для более гибкой настройки перед запуском инсталлятора следует выполнить раздел &quot;Выбор параметров&quot;.&lt;/p&gt; 
&lt;p&gt;Система простой инсталяции заточена на любое умышленное или неумышленное изменение прав доступа на файлы. Устойчива к репаку под windows. После копирования в &lt;code&gt;/opt&lt;/code&gt; права будут принудительно восстановлены.&lt;/p&gt; 
&lt;h2&gt;Установка на openwrt в режиме острой нехватки места на диске&lt;/h2&gt; 
&lt;p&gt;Требуется около 120-200 кб на диске. Придется отказаться от всего, кроме &lt;strong&gt;tpws&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Инструкция для openwrt 22 и выше с nftables&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Никаких зависимостей устанавливать не нужно.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Установка:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Скопируйте все из &lt;code&gt;init.d/openwrt-minimal/tpws/*&lt;/code&gt; в корень openwrt.&lt;/li&gt; 
 &lt;li&gt;Скопируйте бинарник &lt;strong&gt;tpws&lt;/strong&gt; подходящей архитектуры в &lt;code&gt;/usr/bin/tpws&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Установите права на файлы: &lt;code&gt;chmod 755 /etc/init.d/tpws /usr/bin/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Отредактируйте &lt;code&gt;/etc/config/tpws&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Если не нужен ipv6, отредактируйте &lt;code&gt;/etc/nftables.d/90-tpws.nft&lt;/code&gt; и закомментируйте строки с редиректом ipv6.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws enable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws start&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw4 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Полное удаление:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws disable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws stop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rm -f /etc/nftables.d/90-tpws.nft /etc/firewall.user /etc/init.d/tpws /usr/bin/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw4 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Инструкция для openwrt 21 и ниже с iptables&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Установите зависимости:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;opkg update&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;opkg install iptables-mod-extra&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;только для IPV6: &lt;code&gt;opkg install ip6tables-mod-nat&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Убедитесь, что в &lt;code&gt;/etc/firewall.user&lt;/code&gt; нет ничего значимого. Если есть - не следуйте слепо инструкции. Объедините код или создайте свой &lt;code&gt;firewall include&lt;/code&gt; в &lt;code&gt;/etc/config/firewall&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Установка:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Скопируйте все из &lt;code&gt;init.d/openwrt-minimal/tpws/*&lt;/code&gt; в корень openwrt.&lt;/li&gt; 
 &lt;li&gt;Скопируйте бинарник &lt;strong&gt;tpws&lt;/strong&gt; подходящей архитектуры в &lt;code&gt;/usr/bin/tpws&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Установите права на файлы: &lt;code&gt;chmod 755 /etc/init.d/tpws /usr/bin/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Отредактируйте &lt;code&gt;/etc/config/tpws&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Если не нужен ipv6, отредактируйте /etc/firewall.user и установите там DISABLE_IPV6=1.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws enable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws start&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw3 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Полное удаление:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws disable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws stop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rm -f /etc/nftables.d/90-tpws.nft /etc/firewall.user /etc/init.d/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;touch /etc/firewall.user&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw3 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Android&lt;/h2&gt; 
&lt;p&gt;Без рута забудьте про nfqws и tpws в режиме transparent proxy. tpws будет работать только в режиме &lt;code&gt;--socks&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Ядра Android имеют поддержку NFQUEUE. nfqws работает.&lt;/p&gt; 
&lt;p&gt;В стоковых ядрах нет поддержки ipset. В общем случае сложность задачи по поднятию ipset варьируется от &quot;не просто&quot; до &quot;почти невозможно&quot;. Если только вы не найдете готовое собранное ядро под ваш девайс.&lt;/p&gt; 
&lt;p&gt;tpws будет работать в любом случае, он не требует чего-либо особенного.&lt;/p&gt; 
&lt;p&gt;Хотя linux варианты под Android работают, рекомендуется использовать специально собранные под bionic бинарники. У них не будет проблем с DNS, с локальным временем и именами юзеров и групп.&lt;br&gt; Рекомендуется использовать gid 3003 (AID_INET). Иначе можете получить permission denied на создание сокета. Например: &lt;code&gt;--uid 1:3003&lt;/code&gt;&lt;br&gt; В iptables укажите: &lt;code&gt;! --uid-owner 1&lt;/code&gt; вместо &lt;code&gt;! --uid-owner tpws&lt;/code&gt;.&lt;br&gt; Напишите шелл скрипт с iptables и tpws, запускайте его средствами вашего рут менеджера. Скрипты автозапуска лежат тут:&lt;br&gt; magisk : /data/adb/service.d&lt;br&gt; supersu: /system/su.d&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;nfqws&lt;/strong&gt; может иметь такой глюк. При запуске с uid по умолчанию (0x7FFFFFFF) при условии работы на сотовом интерфейсе и отключенном кабеле внешнего питания система может частично виснуть. Перестает работать тач и кнопки, но анимация на экране может продолжаться. Если экран был погашен, то включить его кнопкой power невозможно. Изменение UID на низкий (--uid 1 подойдет) позволяет решить эту проблему. Глюк был замечен на android 8.1 на девайсе, основанном на платформе mediatek.&lt;/p&gt; 
&lt;p&gt;Ответ на вопрос куда поместить tpws на android без рута, чтобы потом его запускать из приложений. Файл заливаем через adb shell в /data/local/tmp/, лучше всего в субфолдер.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir /data/local/tmp/zapret
adb push tpws /data/local/tmp/zapret
chmod 755 /data/local/tmp/zapret /data/local/tmp/zapret/tpws
chcon u:object_r:system_file:s0 /data/local/tmp/zapret/tpws
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Как найти стратегию обхода сотового оператора: проще всего раздать инет на комп. Для этого подойдет любая поддерживаемая ОС. Подключите android через USB кабель к компу и включите режим модема. Прогоните стандартную процедуру blockcheck. При переносе правил на телефон уменьшить TTL на 1, если правила с TTL присутствуют в стратегии. Если проверялось на windows, убрать параметры &lt;code&gt;--wf-*&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Работа blockcheck в android shell не поддерживается, но имея рута можно развернуть rootfs какого-нибудь дистрибутива linux. Это лучше всего делать с компа через adb shell. Если компа нет, то развертка chroot - единственный вариант, хотя и неудобный. Подойдет что-то легковесное, например, alpine или даже OpenWrt. Если это не эмулятор android, то универсальная архитектура - arm (любой вариант). Если вы точно знаете, что ОС у вас 64-разрядная, то лучше вместо arm - aarch64. Выяснить архитектуру можно командой &lt;code&gt;uname -a&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mount --bind /dev /data/linux/dev
mount --bind /proc /data/linux/proc
mount --bind /sys /data/linux/sys
chroot /data/linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Первым делом вам нужно будет один раз настроить DNS. Сам он не заведется.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;echo nameserver 1.1.1.1 &amp;gt;/etc/resolv.conf&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Далее нужно средствами пакетного менеджера установить iptables-legacy. Обязательно &lt;strong&gt;НЕ&lt;/strong&gt; iptables-nft, который, как правило, присутствует по умолчанию. В ядре android нет nftables.&lt;br&gt; &lt;code&gt;ls -la $(which iptables)&lt;/code&gt;&lt;br&gt; Линк должен указывать на legacy вариант. Если нет, значит устанавливайте нужные пакеты вашего дистрибутива, и убеждайтесь в правильности ссылок.&lt;br&gt; &lt;code&gt;iptables -S&lt;/code&gt;&lt;br&gt; Так можно проверить, что ваш &lt;code&gt;iptables&lt;/code&gt; увидел то, что туда насовал android. &lt;code&gt;iptables-nft&lt;/code&gt; выдаст ошибку. Далее качаем zapret в &lt;code&gt;/opt/zapret&lt;/code&gt;. Обычные действия с &lt;code&gt;install_prereq.sh&lt;/code&gt;, &lt;code&gt;install_bin.sh&lt;/code&gt;, &lt;code&gt;blockcheck.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Учтите, что стратегии обхода сотового оператора и домашнего wifi вероятно будут разные. Выделить сотового оператора легко через параметр iptables &lt;code&gt;-o &amp;lt;имя интерфейса&amp;gt;&lt;/code&gt;. Имя может быть, например, &lt;code&gt;ccmni0&lt;/code&gt;. Его легко увидеть через &lt;code&gt;ifconfig&lt;/code&gt;. Wifi сеть - обычно &lt;code&gt;wlan0&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Переключать blockcheck между оператором и wifi можно вместе со всем инетом - включив или выключив wifi. Если найдете стратегию для wifi и впишите ее в автостарт, то при подключении к другому wifi она может не сработать или вовсе что-то поломать, потому подумайте стоит ли. Может быть лучше сделать скрипты типа &quot;запустить обход домашнего wifi&quot;, &quot;снять обход домашнего wifi&quot;, и пользоваться ими по необходимости из терминала. Но домашний wifi лучше все-же обходить на роутере.&lt;/p&gt; 
&lt;h2&gt;Мобильные модемы и роутеры huawei&lt;/h2&gt; 
&lt;p&gt;Устройства типа E3372, E8372, E5770 разделяют общую идеологию построения системы. Имеются 2 вычислительных ядра. Одно ядро выполняет vxworks, другое - linux. На 4pda имеются модифицированные прошивки с telnet и adb. Их и нужно использовать.&lt;/p&gt; 
&lt;p&gt;Дальнейшие утверждения проверены на E8372. На других может быть аналогично или похоже. Присутствуют дополнительные аппаратные блоки для offload-а сетевых функций. Не весь трафик идет через linux. Исходящий трафик с самого модема проходит цепочку OUTPUT нормально, на FORWARD =&amp;gt;wan часть пакетов выпадает из tcpdump.&lt;/p&gt; 
&lt;p&gt;tpws работает обычным образом.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;nfqueue&lt;/code&gt; поломан, можно собрать фиксящий модуль &lt;a href=&quot;https://github.com/im-0/unfuck-nfqueue-on-e3372h&quot;&gt;https://github.com/im-0/unfuck-nfqueue-on-e3372h&lt;/a&gt;, используя исходники с huawei open source. Исходники содержат тулчейн и полусобирающееся, неактуальное ядро. Конфиг можно взять с рабочего модема из &lt;code&gt;/proc/config.gz&lt;/code&gt;. С помощью этих исходников умельцы могут собрать модуль &lt;code&gt;unfuck_nfqueue.ko&lt;/code&gt;. После его применения NFQUEUE и nfqws для arm работают нормально.&lt;/p&gt; 
&lt;p&gt;Чтобы избежать проблемы с offload-ом при использовании nfqws, следует комбинировать tpws в режиме tcp proxy и nfqws. Правила NFQUEUE пишутся для цепочки OUTPUT. connbytes придется опускать, поскольку модуля в ядре нет. Но это не смертельно.&lt;/p&gt; 
&lt;p&gt;Скрипт автозапуска - &lt;code&gt;/system/etc/autorun.sh&lt;/code&gt;. Создайте свой скрипт настройки zapret, запускайте из конца autorun.sh через &quot;&amp;amp;&quot;. Скрипт должен в начале делать sleep 5, чтобы дождаться поднятия сети и iptables от huawei.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] На этом модеме происходят хаотические сбросы соединений tcp по непонятным причинам. Выглядит это так, если запускать curl с самого модема:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;curl www.ru
curl: (7) Failed to connect to www.ru port 80: Host is unreachable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Возникает ошибка сокета EHOSTUNREACH (errno -113). То же самое видно в tpws. В броузере не подгружаются части веб страниц, картинки, стили. В tcpdump на внешнем интерфейсе eth_x виден только единственный и безответный SYN пакет, без сообщений ICMP. ОС каким-то образом узнает о невозможности установить TCP соединение и выдает ошибку. Если выполнять подключение с клиента, то SYN пропадают, соединение не устанавливается. ОС клиента проводит ретрансмиссию, и с какого-то раза подключение удается. Поэтому без tcp проксирования в этой ситуации сайты тупят, но загружаются, а с проксированием подключение выполняется, но вскоре сбрасывается без каких-либо данных, и броузеры не пытаются установить его заново. Поэтому качество броузинга с tpws может быть хуже, но дело не в tpws. Частота сбросов заметно возрастает, если запущен торент клиент, имеется много tcp соединений. Однако, причина не в переполнении таблицы conntrack. Увеличение лимитов и очистка conntrack не помогают. Предположительно эта особенность связана с обработкой пакетов сброса соединения в hardware offload. Точного ответа на вопрос у меня нет. Если вы знаете - поделитесь, пожалуйста. Чтобы не ухудшать качество броузинга, можно фильтровать заворот на tpws по ip фильтру. Поддержка ipset отсутствует. Значит, все, что можно сделать - создать индивидуальные правила на небольшое количество хостов.&lt;/p&gt; 
&lt;p&gt;Некоторые наброски скриптов присутствуют в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/files/huawei/&quot;&gt;files/huawei&lt;/a&gt;. &lt;em&gt;Не готовое решение!&lt;/em&gt; Смотрите, изучайте, приспосабливайте.&lt;br&gt; Здесь можно скачать готовые полезные статические бинарники для arm, включая curl : &lt;a href=&quot;https://github.com/bol-van/bins&quot;&gt;https://github.com/bol-van/bins&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FreeBSD, OpenBSD, MacOS&lt;/h2&gt; 
&lt;p&gt;Описано в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/bsd.md&quot;&gt;документации BSD&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Windows&lt;/h2&gt; 
&lt;p&gt;Описано в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/windows.md&quot;&gt;документации Windows&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Другие прошивки&lt;/h2&gt; 
&lt;p&gt;Для статических бинарников не имеет значения на чем они запущены: PC, android, приставка, роутер, любой другой девайс. Подойдет любая прошивка, дистрибутив linux. Статические бинарники запустятся на всем. Им нужно только ядро с необходимыми опциями сборки или модулями. Но кроме бинарников в проекте используются еще и скрипты, в которых задействуются некоторые стандартные программы.&lt;/p&gt; 
&lt;p&gt;Основные причины почему нельзя просто так взять и установить эту систему на что угодно:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;отсутствие доступа к девайсу через shell&lt;/li&gt; 
 &lt;li&gt;отсутствие рута&lt;/li&gt; 
 &lt;li&gt;отсутствие раздела r/w для записи и энергонезависимого хранения файлов&lt;/li&gt; 
 &lt;li&gt;отсутствие возможности поставить что-то в автозапуск&lt;/li&gt; 
 &lt;li&gt;отсутствие cron&lt;/li&gt; 
 &lt;li&gt;неотключаемый flow offload или другая проприетарщина в netfilter&lt;/li&gt; 
 &lt;li&gt;недостаток модулей ядра или опций его сборки&lt;/li&gt; 
 &lt;li&gt;недостаток модулей iptables (/usr/lib/iptables/lib*.so)&lt;/li&gt; 
 &lt;li&gt;недостаток стандартных программ (типа ipset, curl) или их кастрированность (облегченная замена)&lt;/li&gt; 
 &lt;li&gt;кастрированный или нестандартный шелл sh&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Если в вашей прошивке есть все необходимое, то вы можете адаптировать zapret под ваш девайс в той или иной степени. Может быть у вас не получится поднять все части системы, однако вы можете хотя бы попытаться поднять tpws и завернуть на него через -j REDIRECT весь трафик на порт 80. Если вам есть куда записать tpws, есть возможность выполнять команды при старте, то как минимум это вы сделать сможете. Скорее всего поддержка REDIRECT в ядре есть. Она точно есть на любом роутере, на других устройствах под вопросом. NFQUEUE, ipset на большинстве прошивок отсутствуют из-за ненужности.&lt;/p&gt; 
&lt;p&gt;Пересобрать ядро или модули для него будет скорее всего достаточно трудно. Для этого вам необходимо будет по крайней мере получить исходники вашей прошивки. User mode компоненты могут быть привнесены относительно безболезненно, если есть место куда их записать. Специально для девайсов, имеющих область r/w, существует проект entware. Некоторые прошивки даже имеют возможность его облегченной установки через веб интерфейс. entware содержит репозиторий user-mode компонент, которые устанавливаются в /opt. С их помощью можно компенсировать недостаток ПО основной прошивки, за исключением ядра.&lt;/p&gt; 
&lt;p&gt;Можно попытаться использовать sysv init script таким образом, как это описано в разделе &quot;Прикручивание к системе управления фаерволом или своей системе запуска&quot;. В случае ругани на отсутствие каких-то базовых программ, их следует восполнить посредством entware. Перед запуском скрипта путь к дополнительным программам должен быть помещен в PATH.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Подробное описание настроек для других прошивок выходит за рамки данного проекта.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;OpenWrt является одной из немногих относительно полноценных linux систем для embedded devices. Она характеризуется следующими вещами, которые и послужили основой выбора именно этой прошивки:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;полный root доступ к девайсу через shell. на заводских прошивках чаще всего отсутствует, на многих альтернативных есть&lt;/li&gt; 
 &lt;li&gt;корень r/w. это практически уникальная особенность OpenWrt. заводские и большинство альтернативных прошивок построены на базе squashfs root (r/o), а конфигурация хранится в специально отформатированной области встроенной памяти, называемой nvram. не имеющие r/w корня системы сильно кастрированы. они не имеют возможности доустановки ПО из репозитория без специальных вывертов и заточены в основном на чуть более продвинутого, чем обычно, пользователя и управление имеющимся функционалом через веб интерфейс, но функционал фиксированно ограничен. альтернативные прошивки, как правило, могут монтировать r/w раздел в какую-то область файловой системы, заводские обычно могут монтировать лишь флэшки, подключенные к USB, и не факт, что есть поддержка unix файловых системы. может быть поддержка только fat и ntfs.&lt;/li&gt; 
 &lt;li&gt;возможность выноса корневой файловой системы на внешний носитель (extroot) или создания на нем оверлея (overlay)&lt;/li&gt; 
 &lt;li&gt;наличие менеджера пакетов opkg и репозитория софта&lt;/li&gt; 
 &lt;li&gt;flow offload предсказуемо, стандартно и выборочно управляем, а так же отключаем&lt;/li&gt; 
 &lt;li&gt;в репозитории есть все модули ядра, их можно доустановить через opkg. ядро пересобирать не нужно.&lt;/li&gt; 
 &lt;li&gt;в репозитории есть все модули iptables, их можно доустановить через opkg&lt;/li&gt; 
 &lt;li&gt;в репозитории есть огромное количество стандартных программ и дополнительного софта&lt;/li&gt; 
 &lt;li&gt;наличие SDK, позволяющего собрать недостающее&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Обход блокировки через сторонний хост&lt;/h2&gt; 
&lt;p&gt;Если не работает автономный обход, приходится перенаправлять трафик через сторонний хост. Предлагается использовать прозрачный редирект через socks5 посредством &lt;code&gt;iptables+redsocks&lt;/code&gt;, либо &lt;code&gt;iptables+iproute+vpn&lt;/code&gt;. Настройка варианта с redsocks на OpenWrt описана в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/redsocks.txt&quot;&gt;redsocks.txt&lt;/a&gt;. Настройка варианта с &lt;code&gt;iproute+wireguard&lt;/code&gt; - в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/wireguard_iproute_openwrt.txt&quot;&gt;wireguard_iproute_openwrt.txt&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Почему стоит вложиться в покупку VPS&lt;/h2&gt; 
&lt;p&gt;VPS — это виртуальный сервер. Существует огромное множество датацентров, предлагающих данную услугу. На VPS могут выполняться какие угодно задачи. От простого веб-сайта до навороченной системы собственной разработки. Можно использовать VPS и для поднятия собственного VPN или прокси. Сама широта возможных способов применения и распространенность услуги сводят к минимуму возможности регуляторов по бану сервисов такого типа. Да, если введут белые списки, то решение загнется, но это будет уже другая реальность, в которой придется изобретать иные решения. Пока этого не сделали, никто не будет банить хостинги просто потому, что они предоставляют хостинг услуги. Вы, как индивидуум, скорее всего, никому не нужны. Подумайте чем вы отличаетесь от известного VPN провайдера. VPN-провайдер предоставляет &lt;em&gt;простую&lt;/em&gt; и &lt;em&gt;доступную&lt;/em&gt; услугу по обходу блокировок для масс. Этот факт делает его первоочередной целью блокировки. РКН направит уведомление, после отказа сотрудничать заблокирует VPN. Предоплаченная сумма пропадет. У регуляторов нет и никогда не будет ресурсов для тотальной проверки каждого сервера в сети. Возможен китайский расклад, при котором DPI выявляет VPN-протоколы и динамически банит IP серверов, предоставляющих нелицензированный VPN. Но имея знания, голову, вы всегда можете обфусцировать VPN трафик или применить другие типы VPN, более устойчивые к анализу на DPI, или просто менее широкоизвестные, а следовательно с меньшей вероятностью обнаруживаемые регулятором. У вас есть свобода делать на вашем VPS все что вы захотите, адаптируясь к новым условиям. Да, это потребует знаний. Вам выбирать учиться и держать ситуацию под контролем, когда вам ничего запретить не могут, или покориться системе.&lt;/p&gt; 
&lt;p&gt;VPS можно приобрести в множестве мест. Существуют специализированные на поиске предложений VPS порталы.&lt;br&gt; Например, &lt;a href=&quot;https://vps.today&quot;&gt;вот этот&lt;/a&gt;. Для персонального VPN сервера обычно достаточно самой минимальной конфигурации, но с безлимитным трафиком или с большим лимитом по трафику (терабайты). Важен и тип VPS. OpenVZ подойдёт для OpenVPN, но вы не поднимете на нем WireGuard, IPsec, то есть все, что требует kernel mode. Для kernel mode требуется тип виртуализации, предполагающий запуск полноценного экземпляра ОС linux вместе с ядром. Подойдут KVM, Xen, Hyper-V, VMware.&lt;/p&gt; 
&lt;p&gt;По цене можно найти предложения, которые будут дешевле готовой VPN услуги, но при этом вы сам хозяин в своей лавке и не рискуете попасть под бан регулятора, разве что «заодно» — под ковровую бомбардировку с баном миллионов IP. Кроме того, если вам совсем все кажется сложным, прочитанное вызывает ступор и вы точно знаете, что ничего из описанного сделать не сможете, то вы сможете хотя бы использовать динамическое перенаправление портов SSH для получения шифрованного SOCKS-прокси и прописать его в браузер. Знания linux не нужны совсем. Это вариант наименее напряжный для чайников, хотя и не самый удобный в использовании.&lt;/p&gt; 
&lt;h2&gt;Поддержать разработчика&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn-icons-png.flaticon.com/16/14446/14446252.png&quot; alt=&quot;USDT&quot; style=&quot;vertical-align: middle;&quot;&gt; USDT&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0x3d52Ce15B7Be734c53fc9526ECbAB8267b63d66E
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn-icons-png.flaticon.com/16/5968/5968260.png&quot; alt=&quot;USDT&quot; style=&quot;vertical-align: middle;&quot;&gt; BTC&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bc1qhqew3mrvp47uk2vevt5sctp7p2x9m7m5kkchve
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Mbed-TLS/mbedtls</title>
      <link>https://github.com/Mbed-TLS/mbedtls</link>
      <description>&lt;p&gt;An open source, portable, easy to use, readable and flexible TLS library, and reference implementation of the PSA Cryptography API. Releases are on a varying cadence, typically around 3 - 6 months between releases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; 
&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&quot;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; 
&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; 
&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The main Mbed TLS documentation is available via &lt;a href=&quot;https://mbed-tls.readthedocs.io/&quot;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Documentation for the PSA Cryptography API is available &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure that &lt;a href=&quot;http://www.doxygen.nl/&quot;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For other sources of documentation, see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make&lt;/li&gt; 
 &lt;li&gt;CMake&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; 
&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto/libtfpsacrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto/libtfpsacrypto, and libmbedx509 depends on libmbedcrypto/libtfpsacrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tool versions&lt;/h3&gt; 
&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; 
 &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, Arm Compiler 6, IAR 8 and Visual Studio 2017. More recent versions should work. Slightly older versions may work.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 to generate the test code. Python is also needed to integrate PSA drivers and to build the development branch (see next section).&lt;/li&gt; 
 &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; 
 &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio 2017 or later (if using Visual Studio).&lt;/li&gt; 
 &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Git usage&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;development&lt;/code&gt; branch and the &lt;code&gt;mbedtls-3.6&lt;/code&gt; long-term support branch of Mbed TLS use a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules#_cloning_submodules&quot;&gt;Git submodule&lt;/a&gt; (&lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-framework&quot;&gt;framework&lt;/a&gt;). This is not needed to merely compile the library at a release tag. This is not needed to consume a release archive (zip or tar).&lt;/p&gt; 
&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; 
&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; 
&lt;p&gt;The following tools are required:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run: &lt;pre&gt;&lt;code&gt;python3 -m pip install --user -r scripts/basic.requirements.txt
&lt;/code&gt;&lt;/pre&gt; Depending on your Python installation, you may need to invoke &lt;code&gt;python&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;. To install the packages system-wide, omit the &lt;code&gt;--user&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; 
&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; 
 &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;tests/scripts/check-generated-files.sh -u&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Make&lt;/h3&gt; 
&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; 
&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; 
&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make no_test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; 
&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; 
&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; 
&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; 
&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CMake&lt;/h3&gt; 
&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir
cmake /path/to/mbedtls_source
cmake --build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ctest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -LH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; 
&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now make the desired change:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; 
&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; 
&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::tfpsacrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;add_executable(xyz)

target_link_libraries(xyz
    PUBLIC MbedTLS::mbedtls
           MbedTLS::tfpsacrypto
           MbedTLS::mbedx509)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; 
&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; 
&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; 
&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; 
&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2017.&lt;/p&gt; 
&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; 
&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&quot;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Example programs&lt;/h2&gt; 
&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&quot;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_ssl.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; 
&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/depends.py&lt;/code&gt; test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-test/raw/main/README.md#quick-start&quot;&gt;our testing infrastructure repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; 
&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/&quot;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/&quot;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/&quot;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; 
 &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; 
 &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; 
 &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; 
 &lt;li&gt;Mixed-endian platforms are not supported.&lt;/li&gt; 
 &lt;li&gt;SIZE_MAX must be at least as big as INT_MAX and UINT_MAX.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;PSA cryptography API&lt;/h2&gt; 
&lt;h3&gt;PSA API&lt;/h3&gt; 
&lt;p&gt;Arm&#39;s &lt;a href=&quot;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&quot;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; 
&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; 
 &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; 
 &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; 
 &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; 
 &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&quot;mailto:mbed-crypto@arm.com&quot;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; 
&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. However, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.&lt;/p&gt; 
&lt;h3&gt;PSA drivers&lt;/h3&gt; 
&lt;p&gt;Mbed TLS supports drivers for cryptographic accelerators, secure elements and random generators. This is work in progress. Please note that the driver interfaces are not fully stable yet and may change without notice. We intend to preserve backward compatibility for application code (using the PSA Crypto API), but the code of the drivers may have to change in future minor releases of Mbed TLS.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/Mbed-TLS/TF-PSA-Crypto/raw/development/docs/psa-driver-example-and-guide.md&quot;&gt;PSA driver example and guide&lt;/a&gt; for information on writing a driver.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual &lt;a href=&quot;https://spdx.org/licenses/Apache-2.0.html&quot;&gt;Apache-2.0&lt;/a&gt; OR &lt;a href=&quot;https://spdx.org/licenses/GPL-2.0-or-later.html&quot;&gt;GPL-2.0-or-later&lt;/a&gt; license. See the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for the full text of these licenses, and &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md#License-and-Copyright&quot;&gt;the &#39;License and Copyright&#39; section in the contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Third-party code included in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;This project contains code from other projects. This code is located within the &lt;code&gt;tf-psa-crypto/drivers/&lt;/code&gt; directory. The original license text is included within project subdirectories, where it differs from the normal Mbed TLS license, and/or in source files. The projects are listed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;drivers/everest/&lt;/code&gt;: Files stem from &lt;a href=&quot;https://project-everest.github.io/&quot;&gt;Project Everest&lt;/a&gt; and are distributed under the Apache 2.0 license.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;drivers/p256-m/p256-m/&lt;/code&gt;: Files have been taken from the &lt;a href=&quot;https://github.com/mpg/p256-m&quot;&gt;p256-m&lt;/a&gt; repository. The code in the original repository is distributed under the Apache 2.0 license. It is distributed in Mbed TLS under a dual Apache-2.0 OR GPL-2.0-or-later license with permission from the author.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&quot;mailto:mbed-tls-security@lists.trustedfirmware.org&quot;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&quot;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&quot;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pocoproject/poco</title>
      <link>https://github.com/pocoproject/poco</link>
      <description>&lt;p&gt;The POCO C++ Libraries are powerful cross-platform C++ libraries for building network- and internet-based applications that run on desktop, server, mobile, IoT, and embedded systems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pocoproject/poco/main/doc/images/logo.png&quot; alt=&quot;alt text&quot; title=&quot;Poco Logo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pocoproject/poco/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/pocoproject/poco/actions/workflows/ci.yml/badge.svg?branch=master&quot; alt=&quot;poco-ci&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/370&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/370/badge&quot; alt=&quot;CII Best Practices&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;POCO (Portable Components) C++ Libraries are:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A collection of C++ class libraries, conceptually similar to the Java Class Library or the .NET Framework.&lt;/li&gt; 
 &lt;li&gt;Focused on solutions to frequently-encountered practical problems.&lt;/li&gt; 
 &lt;li&gt;Focused on &quot;internet-age&quot; network-centric applications.&lt;/li&gt; 
 &lt;li&gt;Written in efficient, modern, 100% ANSI/ISO Standard C++.&lt;/li&gt; 
 &lt;li&gt;Based on and complementing the C++ Standard Library/STL.&lt;/li&gt; 
 &lt;li&gt;Highly portable and available on many different platforms, from embedded to server.&lt;/li&gt; 
 &lt;li&gt;Open Source, licensed under the &lt;a href=&quot;https://spdx.org/licenses/BSL-1.0&quot;&gt;Boost Software License&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pocoproject/poco/main/doc/images/overview.png&quot; alt=&quot;alt text&quot; title=&quot;Poco Overview&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To start using POCO, see the &lt;a href=&quot;https://pocoproject.org/docs/00100-GuidedTour.html&quot;&gt;Guided Tour&lt;/a&gt; and &lt;a href=&quot;https://pocoproject.org/docs/00200-GettingStarted.html&quot;&gt;Getting Started&lt;/a&gt; documents.&lt;/p&gt; 
&lt;h2&gt;Quick Start (with CMake)&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;CMake 3.15 or newer&lt;/li&gt; 
 &lt;li&gt;A C++17 compiler (Visual C++ 2017, GCC 8.0, Clang 5, or newer)&lt;/li&gt; 
 &lt;li&gt;OpenSSL headers and libraries (optional, but recommended)&lt;/li&gt; 
 &lt;li&gt;MySQL, PostgreSQL and ODBC client libraries (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Most Unix/Linux systems already have OpenSSL preinstalled. If your system does not have OpenSSL, please get it from &lt;a href=&quot;https://www.openssl.org&quot;&gt;https://www.openssl.org&lt;/a&gt; or another source. You do not have to build OpenSSL yourself - a binary distribution is fine. For example, via Debian APT:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ apt-get install openssl libssl-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On macOS, the easiest way to install OpenSSL is via &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install openssl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The easiest way to install OpenSSL on Windows is to use a binary (prebuild) release, for example the one from Shining Light Productions that comes with a &lt;a href=&quot;https://www.slproweb.com/products/Win32OpenSSL.html&quot;&gt;Windows installer&lt;/a&gt;. OpenSSL can also be installed via the &lt;code&gt;vcpkg&lt;/code&gt; package manager.&lt;/p&gt; 
&lt;p&gt;On Windows, POCO can also use the native Windows TLS APIs (SChannel).&lt;/p&gt; 
&lt;h3&gt;Installing All Dependencies (Linux and macOS)&lt;/h3&gt; 
&lt;p&gt;All dependencies can be installed with the following commands:&lt;/p&gt; 
&lt;h4&gt;Debian Linux (including Ubuntu and Raspbian)&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y update &amp;amp;&amp;amp; sudo apt-get -y install git g++ make cmake libssl-dev libmysqlclient-dev libpq-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RedHat Linux&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install -y git gcc-c++ make cmake3 openssl-devel mysql-devel postgresql-devel 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;macOS (with Homebrew)&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install cmake openssl mysql-client libpq
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building with CMake (Linux, macOS, Windows)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://cmake.org&quot;&gt;CMake&lt;/a&gt; (version 3.15 or newer) is the recommended build system for building the POCO C++ Libraries.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone -b main https://github.com/pocoproject/poco.git
$ cd poco
$ mkdir cmake-build
$ cd cmake-build
$ cmake ..
$ cmake --build . --config Release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On macOS, it&#39;s necessary to tell CMake where to find the OpenSSL headers and libraries by setting the &lt;code&gt;OPENSSL_ROOT_DIR&lt;/code&gt; CMake variable. For example, if OpenSSL has been installed with Homebrew, the &lt;code&gt;cmake&lt;/code&gt; invocation becomes:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cmake .. -DOPENSSL_ROOT_DIR=/opt/homebrew/opt/openssl@3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similarly, the locations of other external libraries can be specified:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cmake .. -DOPENSSL_ROOT_DIR=/opt/homebrew/opt/openssl@3 -DMYSQL_ROOT_DIR=/opt/homebrew/opt/mysql-client -DPostgreSQL_ROOT_DIR=/opt/homebrew/opt/libpq
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Other common ways of building with CMake (e.g., &lt;code&gt;cmake-gui&lt;/code&gt;) will also work.&lt;/p&gt; 
&lt;p&gt;There are also a number of project-specific CMake variables that can be changed.&lt;/p&gt; 
&lt;h4&gt;Cross-Compiling&lt;/h4&gt; 
&lt;p&gt;With a proper CMake toolchain file (specified via the &lt;code&gt;CMAKE_TOOLCHAIN_FILE&lt;/code&gt; CMake variable), the POCO C++ Libraries can be cross-compiled for embedded Linux systems:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cmake .. -DCMAKE_TOOLCHAIN_FILE=/path/to/mytoolchain.cmake -DCMAKE_INSTALL_PREFIX=/path/to/target
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing&lt;/h4&gt; 
&lt;p&gt;The POCO C++ Libraries headers and libraries can be optionally be installed by building the &lt;code&gt;install&lt;/code&gt; target.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo cmake --build . --target install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The default install location is &lt;code&gt;/usr/local/&lt;/code&gt; on Linux and macOS and &lt;code&gt;C:\Program Files (x64)\&lt;/code&gt; on Windows and can be overridden by setting the &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; CMake variable.&lt;/p&gt; 
&lt;h4&gt;Building and Installing - Using vcpkg&lt;/h4&gt; 
&lt;p&gt;You can download and install poco using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/Microsoft/vcpkg.git
$ cd vcpkg
$ ./bootstrap-vcpkg.sh
$ ./vcpkg integrate install
$ ./vcpkg install poco
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The poco port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h4&gt;Building and Installing - Using Conan&lt;/h4&gt; 
&lt;p&gt;You can download and install poco using the Conan(&lt;a href=&quot;https://github.com/conan-io/conan&quot;&gt;https://github.com/conan-io/conan&lt;/a&gt;) package manager. It needed to be installed first(&lt;a href=&quot;https://conan.io/downloads.html&quot;&gt;https://conan.io/downloads.html&lt;/a&gt;):&lt;/p&gt; 
&lt;p&gt;You can install Poco libraries from Conan Center(&lt;a href=&quot;https://conan.io/center.html&quot;&gt;https://conan.io/center.html&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ conan install -r conancenter poco/1.12.0@
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, you can download Poco recipe and build locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ conan install -r conancenter poco/1.12.0@ --build=poco
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Poco recipe and packages in Conan Center are kept up to date by Conan team members and community contributors. If the version is out of date, or you detect any wrong behavior, please create an issue or pull request(&lt;a href=&quot;https://github.com/conan-io/conan-center-index&quot;&gt;https://github.com/conan-io/conan-center-index&lt;/a&gt;) on the Conan Center Index repository.&lt;/p&gt; 
&lt;h3&gt;Building Without CMake&lt;/h3&gt; 
&lt;p&gt;If you do not want to or cannot use CMake, POCO can also be built with Visual Studio (project and solution files included) or GNU Make (Linux, macOS and other supported Unix platforms).&lt;/p&gt; 
&lt;p&gt;Please refer to the &lt;a href=&quot;https://pocoproject.org/docs&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Getting POCO via a Package Manager&lt;/h3&gt; 
&lt;p&gt;POCO can also be obtained via different &lt;a href=&quot;https://pocoproject.org/download.html&quot;&gt;package managers&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community and Contributing&lt;/h2&gt; 
&lt;p&gt;POCO has an active user and contributing community, please visit our &lt;a href=&quot;https://pocoproject.org&quot;&gt;website&lt;/a&gt; and &lt;a href=&quot;https://pocoproject.org/blog&quot;&gt;blog&lt;/a&gt;. Answers to POCO-related questions can also be found on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/poco-libraries&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/pocoproject/poco/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for submitting contributions, bugs reports, feature requests or security issues.&lt;/p&gt; 
&lt;h3&gt;POCO vs. Boost&lt;/h3&gt; 
&lt;p&gt;In regards to Boost, in spite of some functional overlapping, POCO is best thought of as a Boost complement (rather than replacement). Side-by-side use of Boost and POCO is a very common occurrence.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sumatrapdfreader/sumatrapdf</title>
      <link>https://github.com/sumatrapdfreader/sumatrapdf</link>
      <description>&lt;p&gt;SumatraPDF reader&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sumatrapdfreader/sumatrapdf/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/sumatrapdfreader/sumatrapdf/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;SumatraPDF Reader&lt;/h2&gt; 
&lt;p&gt;SumatraPDF is a multi-format (PDF, EPUB, MOBI, CBZ, CBR, FB2, CHM, XPS, DjVu) reader for Windows under (A)GPLv3 license, with some code under BSD license (see AUTHORS).&lt;/p&gt; 
&lt;p&gt;More Information:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.sumatrapdfreader.org/free-pdf-reader&quot;&gt;Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.sumatrapdfreader.org/manual&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.sumatrapdfreader.org/docs/Contribute-to-SumatraPDF&quot;&gt;Developer Information&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>espressif/esp32-camera</title>
      <link>https://github.com/espressif/esp32-camera</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32 Camera Driver&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/espressif/esp32-camera/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/espressif/esp32-camera/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build examples&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://components.espressif.com/components/espressif/esp32-camera&quot;&gt;&lt;img src=&quot;https://components.espressif.com/components/espressif/esp32-camera/badge.svg?sanitize=true&quot; alt=&quot;Component Registry&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;General Information&lt;/h2&gt; 
&lt;p&gt;This repository hosts ESP32 series Soc compatible driver for image sensors. Additionally it provides a few tools, which allow converting the captured frame data to the more common BMP and JPEG formats.&lt;/p&gt; 
&lt;h3&gt;Supported Soc&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;ESP32&lt;/li&gt; 
 &lt;li&gt;ESP32-S2&lt;/li&gt; 
 &lt;li&gt;ESP32-S3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported Sensor&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;model&lt;/th&gt; 
   &lt;th&gt;max resolution&lt;/th&gt; 
   &lt;th&gt;color type&lt;/th&gt; 
   &lt;th&gt;output format&lt;/th&gt; 
   &lt;th&gt;Len Size&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OV2640&lt;/td&gt; 
   &lt;td&gt;1600 x 1200&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV(422/420)/YCbCr422&lt;br&gt;RGB565/555&lt;br&gt;8-bit compressed data&lt;br&gt;8/10-bit Raw RGB data&lt;/td&gt; 
   &lt;td&gt;1/4&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OV3660&lt;/td&gt; 
   &lt;td&gt;2048 x 1536&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;raw RGB data&lt;br&gt;RGB565/555/444&lt;br&gt;CCIR656&lt;br&gt;YCbCr422&lt;br&gt;compression&lt;/td&gt; 
   &lt;td&gt;1/5&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OV5640&lt;/td&gt; 
   &lt;td&gt;2592 x 1944&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;RAW RGB&lt;br&gt;RGB565/555/444&lt;br&gt;CCIR656&lt;br&gt;YUV422/420&lt;br&gt;YCbCr422&lt;br&gt;compression&lt;/td&gt; 
   &lt;td&gt;1/4&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OV7670&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;Raw Bayer RGB&lt;br&gt;Processed Bayer RGB&lt;br&gt;YUV/YCbCr422&lt;br&gt;GRB422&lt;br&gt;RGB565/555&lt;/td&gt; 
   &lt;td&gt;1/6&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OV7725&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;Raw RGB&lt;br&gt;GRB 422&lt;br&gt;RGB565/555/444&lt;br&gt;YCbCr 422&lt;/td&gt; 
   &lt;td&gt;1/4&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NT99141&lt;/td&gt; 
   &lt;td&gt;1280 x 720&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YCbCr 422&lt;br&gt;RGB565/555/444&lt;br&gt;Raw&lt;br&gt;CCIR656&lt;br&gt;JPEG compression&lt;/td&gt; 
   &lt;td&gt;1/4&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GC032A&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;/td&gt; 
   &lt;td&gt;1/10&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GC0308&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;br&gt;Grayscale&lt;/td&gt; 
   &lt;td&gt;1/6.5&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GC2145&lt;/td&gt; 
   &lt;td&gt;1600 x 1200&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;/td&gt; 
   &lt;td&gt;1/5&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BF3005&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;/td&gt; 
   &lt;td&gt;1/4&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BF20A6&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;Only Y&lt;/td&gt; 
   &lt;td&gt;1/10&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SC101IOT&lt;/td&gt; 
   &lt;td&gt;1280 x 720&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV/YCbCr422&lt;br&gt;Raw RGB&lt;/td&gt; 
   &lt;td&gt;1/4.2&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SC030IOT&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;/td&gt; 
   &lt;td&gt;1/6.5&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SC031GS&lt;/td&gt; 
   &lt;td&gt;640 x 480&lt;/td&gt; 
   &lt;td&gt;monochrome&lt;/td&gt; 
   &lt;td&gt;RAW MONO&lt;br&gt;Grayscale&lt;/td&gt; 
   &lt;td&gt;1/6&quot;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Important to Remember&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Except when using CIF or lower resolution with JPEG, the driver requires PSRAM to be installed and activated.&lt;/li&gt; 
 &lt;li&gt;Using YUV or RGB puts a lot of strain on the chip because writing to PSRAM is not particularly fast. The result is that image data might be missing. This is particularly true if WiFi is enabled. If you need RGB data, it is recommended that JPEG is captured and then turned into RGB using &lt;code&gt;fmt2rgb888&lt;/code&gt; or &lt;code&gt;fmt2bmp&lt;/code&gt;/&lt;code&gt;frame2bmp&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;When 1 frame buffer is used, the driver will wait for the current frame to finish (VSYNC) and start I2S DMA. After the frame is acquired, I2S will be stopped and the frame buffer returned to the application. This approach gives more control over the system, but results in longer time to get the frame.&lt;/li&gt; 
 &lt;li&gt;When 2 or more frame bufers are used, I2S is running in continuous mode and each frame is pushed to a queue that the application can access. This approach puts more strain on the CPU/Memory, but allows for double the frame rate. Please use only with JPEG.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation Instructions&lt;/h2&gt; 
&lt;h3&gt;Using with ESP-IDF&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a dependency on &lt;code&gt;espressif/esp32-camera&lt;/code&gt; component: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;idf.py add-dependency &quot;espressif/esp32-camera&quot;
&lt;/code&gt;&lt;/pre&gt; (or add it manually in idf_component.yml of your project)&lt;/li&gt; 
 &lt;li&gt;Enable PSRAM in &lt;code&gt;menuconfig&lt;/code&gt; (also set Flash and PSRAM frequiencies to 80MHz)&lt;/li&gt; 
 &lt;li&gt;Include &lt;code&gt;esp_camera.h&lt;/code&gt; in your code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These instructions also work for PlatformIO, if you are using &lt;code&gt;framework=espidf&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Using with Arduino&lt;/h3&gt; 
&lt;h4&gt;Arduino IDE&lt;/h4&gt; 
&lt;p&gt;If you are using the arduino-esp32 core in Arduino IDE, no installation is needed! You can use esp32-camera right away.&lt;/p&gt; 
&lt;h4&gt;PlatformIO&lt;/h4&gt; 
&lt;p&gt;The easy way -- on the &lt;code&gt;env&lt;/code&gt; section of &lt;code&gt;platformio.ini&lt;/code&gt;, add the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[env]
lib_deps =
  esp32-camera
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now the &lt;code&gt;esp_camera.h&lt;/code&gt; is available to be included:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;esp_camera.h&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enable PSRAM on &lt;code&gt;menuconfig&lt;/code&gt; or type it direclty on &lt;code&gt;sdkconfig&lt;/code&gt;. Check the &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#config-esp32-spiram-support&quot;&gt;official doc&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CONFIG_ESP32_SPIRAM_SUPPORT=y
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;This component comes with a basic example illustrating how to get frames from the camera. You can try out the example using the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;idf.py create-project-from-example &quot;espressif/esp32-camera:camera_example&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command will download the example into &lt;code&gt;camera_example&lt;/code&gt; directory. It comes already pre-configured with the correct settings in menuconfig.&lt;/p&gt; 
&lt;h3&gt;Initialization&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;esp_camera.h&quot;

//WROVER-KIT PIN Map
#define CAM_PIN_PWDN    -1 //power down is not used
#define CAM_PIN_RESET   -1 //software reset will be performed
#define CAM_PIN_XCLK    21
#define CAM_PIN_SIOD    26
#define CAM_PIN_SIOC    27

#define CAM_PIN_D7      35
#define CAM_PIN_D6      34
#define CAM_PIN_D5      39
#define CAM_PIN_D4      36
#define CAM_PIN_D3      19
#define CAM_PIN_D2      18
#define CAM_PIN_D1       5
#define CAM_PIN_D0       4
#define CAM_PIN_VSYNC   25
#define CAM_PIN_HREF    23
#define CAM_PIN_PCLK    22

static camera_config_t camera_config = {
    .pin_pwdn  = CAM_PIN_PWDN,
    .pin_reset = CAM_PIN_RESET,
    .pin_xclk = CAM_PIN_XCLK,
    .pin_sccb_sda = CAM_PIN_SIOD,
    .pin_sccb_scl = CAM_PIN_SIOC,

    .pin_d7 = CAM_PIN_D7,
    .pin_d6 = CAM_PIN_D6,
    .pin_d5 = CAM_PIN_D5,
    .pin_d4 = CAM_PIN_D4,
    .pin_d3 = CAM_PIN_D3,
    .pin_d2 = CAM_PIN_D2,
    .pin_d1 = CAM_PIN_D1,
    .pin_d0 = CAM_PIN_D0,
    .pin_vsync = CAM_PIN_VSYNC,
    .pin_href = CAM_PIN_HREF,
    .pin_pclk = CAM_PIN_PCLK,

    .xclk_freq_hz = 20000000,//EXPERIMENTAL: Set to 16MHz on ESP32-S2 or ESP32-S3 to enable EDMA mode
    .ledc_timer = LEDC_TIMER_0,
    .ledc_channel = LEDC_CHANNEL_0,

    .pixel_format = PIXFORMAT_JPEG,//YUV422,GRAYSCALE,RGB565,JPEG
    .frame_size = FRAMESIZE_UXGA,//QQVGA-UXGA, For ESP32, do not use sizes above QVGA when not JPEG. The performance of the ESP32-S series has improved a lot, but JPEG mode always gives better frame rates.

    .jpeg_quality = 12, //0-63, for OV series camera sensors, lower number means higher quality
    .fb_count = 1, //When jpeg mode is used, if fb_count more than one, the driver will work in continuous mode.
    .grab_mode = CAMERA_GRAB_WHEN_EMPTY//CAMERA_GRAB_LATEST. Sets when buffers should be filled
};

esp_err_t camera_init(){
    //power up the camera if PWDN pin is defined
    if(CAM_PIN_PWDN != -1){
        pinMode(CAM_PIN_PWDN, OUTPUT);
        digitalWrite(CAM_PIN_PWDN, LOW);
    }

    //initialize the camera
    esp_err_t err = esp_camera_init(&amp;amp;camera_config);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, &quot;Camera Init Failed&quot;);
        return err;
    }

    return ESP_OK;
}

esp_err_t camera_capture(){
    //acquire a frame
    camera_fb_t * fb = esp_camera_fb_get();
    if (!fb) {
        ESP_LOGE(TAG, &quot;Camera Capture Failed&quot;);
        return ESP_FAIL;
    }
    //replace this with your own function
    process_image(fb-&amp;gt;width, fb-&amp;gt;height, fb-&amp;gt;format, fb-&amp;gt;buf, fb-&amp;gt;len);
  
    //return the frame buffer back to the driver for reuse
    esp_camera_fb_return(fb);
    return ESP_OK;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JPEG HTTP Capture&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;esp_camera.h&quot;
#include &quot;esp_http_server.h&quot;
#include &quot;esp_timer.h&quot;

typedef struct {
        httpd_req_t *req;
        size_t len;
} jpg_chunking_t;

static size_t jpg_encode_stream(void * arg, size_t index, const void* data, size_t len){
    jpg_chunking_t *j = (jpg_chunking_t *)arg;
    if(!index){
        j-&amp;gt;len = 0;
    }
    if(httpd_resp_send_chunk(j-&amp;gt;req, (const char *)data, len) != ESP_OK){
        return 0;
    }
    j-&amp;gt;len += len;
    return len;
}

esp_err_t jpg_httpd_handler(httpd_req_t *req){
    camera_fb_t * fb = NULL;
    esp_err_t res = ESP_OK;
    size_t fb_len = 0;
    int64_t fr_start = esp_timer_get_time();

    fb = esp_camera_fb_get();
    if (!fb) {
        ESP_LOGE(TAG, &quot;Camera capture failed&quot;);
        httpd_resp_send_500(req);
        return ESP_FAIL;
    }
    res = httpd_resp_set_type(req, &quot;image/jpeg&quot;);
    if(res == ESP_OK){
        res = httpd_resp_set_hdr(req, &quot;Content-Disposition&quot;, &quot;inline; filename=capture.jpg&quot;);
    }

    if(res == ESP_OK){
        if(fb-&amp;gt;format == PIXFORMAT_JPEG){
            fb_len = fb-&amp;gt;len;
            res = httpd_resp_send(req, (const char *)fb-&amp;gt;buf, fb-&amp;gt;len);
        } else {
            jpg_chunking_t jchunk = {req, 0};
            res = frame2jpg_cb(fb, 80, jpg_encode_stream, &amp;amp;jchunk)?ESP_OK:ESP_FAIL;
            httpd_resp_send_chunk(req, NULL, 0);
            fb_len = jchunk.len;
        }
    }
    esp_camera_fb_return(fb);
    int64_t fr_end = esp_timer_get_time();
    ESP_LOGI(TAG, &quot;JPG: %uKB %ums&quot;, (uint32_t)(fb_len/1024), (uint32_t)((fr_end - fr_start)/1000));
    return res;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JPEG HTTP Stream&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;esp_camera.h&quot;
#include &quot;esp_http_server.h&quot;
#include &quot;esp_timer.h&quot;

#define PART_BOUNDARY &quot;123456789000000000000987654321&quot;
static const char* _STREAM_CONTENT_TYPE = &quot;multipart/x-mixed-replace;boundary=&quot; PART_BOUNDARY;
static const char* _STREAM_BOUNDARY = &quot;\r\n--&quot; PART_BOUNDARY &quot;\r\n&quot;;
static const char* _STREAM_PART = &quot;Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n&quot;;

esp_err_t jpg_stream_httpd_handler(httpd_req_t *req){
    camera_fb_t * fb = NULL;
    esp_err_t res = ESP_OK;
    size_t _jpg_buf_len;
    uint8_t * _jpg_buf;
    char * part_buf[64];
    static int64_t last_frame = 0;
    if(!last_frame) {
        last_frame = esp_timer_get_time();
    }

    res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
    if(res != ESP_OK){
        return res;
    }

    while(true){
        fb = esp_camera_fb_get();
        if (!fb) {
            ESP_LOGE(TAG, &quot;Camera capture failed&quot;);
            res = ESP_FAIL;
            break;
        }
        if(fb-&amp;gt;format != PIXFORMAT_JPEG){
            bool jpeg_converted = frame2jpg(fb, 80, &amp;amp;_jpg_buf, &amp;amp;_jpg_buf_len);
            if(!jpeg_converted){
                ESP_LOGE(TAG, &quot;JPEG compression failed&quot;);
                esp_camera_fb_return(fb);
                res = ESP_FAIL;
            }
        } else {
            _jpg_buf_len = fb-&amp;gt;len;
            _jpg_buf = fb-&amp;gt;buf;
        }

        if(res == ESP_OK){
            res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
        }
        if(res == ESP_OK){
            size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);

            res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
        }
        if(res == ESP_OK){
            res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
        }
        if(fb-&amp;gt;format != PIXFORMAT_JPEG){
            free(_jpg_buf);
        }
        esp_camera_fb_return(fb);
        if(res != ESP_OK){
            break;
        }
        int64_t fr_end = esp_timer_get_time();
        int64_t frame_time = fr_end - last_frame;
        last_frame = fr_end;
        frame_time /= 1000;
        ESP_LOGI(TAG, &quot;MJPG: %uKB %ums (%.1ffps)&quot;,
            (uint32_t)(_jpg_buf_len/1024),
            (uint32_t)frame_time, 1000.0 / (uint32_t)frame_time);
    }

    last_frame = 0;
    return res;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BMP HTTP Capture&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;esp_camera.h&quot;
#include &quot;esp_http_server.h&quot;
#include &quot;esp_timer.h&quot;

esp_err_t bmp_httpd_handler(httpd_req_t *req){
    camera_fb_t * fb = NULL;
    esp_err_t res = ESP_OK;
    int64_t fr_start = esp_timer_get_time();

    fb = esp_camera_fb_get();
    if (!fb) {
        ESP_LOGE(TAG, &quot;Camera capture failed&quot;);
        httpd_resp_send_500(req);
        return ESP_FAIL;
    }

    uint8_t * buf = NULL;
    size_t buf_len = 0;
    bool converted = frame2bmp(fb, &amp;amp;buf, &amp;amp;buf_len);
    esp_camera_fb_return(fb);
    if(!converted){
        ESP_LOGE(TAG, &quot;BMP conversion failed&quot;);
        httpd_resp_send_500(req);
        return ESP_FAIL;
    }

    res = httpd_resp_set_type(req, &quot;image/x-windows-bmp&quot;)
       || httpd_resp_set_hdr(req, &quot;Content-Disposition&quot;, &quot;inline; filename=capture.bmp&quot;)
       || httpd_resp_send(req, (const char *)buf, buf_len);
    free(buf);
    int64_t fr_end = esp_timer_get_time();
    ESP_LOGI(TAG, &quot;BMP: %uKB %ums&quot;, (uint32_t)(buf_len/1024), (uint32_t)((fr_end - fr_start)/1000));
    return res;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>istoreos/istoreos</title>
      <link>https://github.com/istoreos/istoreos</link>
      <description>&lt;p&gt;提供一个人人会用的的路由、NAS系统 （目前活跃的分支是 istoreos-22.03）&lt;/p&gt;&lt;hr&gt;&lt;p&gt;iStoreOS 是入门级的路由系统，也是入门级的 NAS 系统， 基于原版 OpenWRT，在 ARS2 上经过长期迭代，最终开放适配到多个硬件平台&lt;/p&gt; 
&lt;p&gt;更多信息请参阅 &lt;a href=&quot;https://github.com/istoreos&quot;&gt;https://github.com/istoreos&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;以下是 OpenWRT 原始的 README&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/istoreos/istoreos/istoreos-22.03/include/logo.png&quot; alt=&quot;OpenWrt logo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenWrt Project is a Linux operating system targeting embedded devices. Instead of trying to create a single, static firmware, OpenWrt provides a fully writable filesystem with package management. This frees you from the application selection and configuration provided by the vendor and allows you to customize the device through the use of packages to suit any application. For developers, OpenWrt is the framework to build an application without having to build a complete firmware around it; for users this means the ability for full customization, to use the device in ways never envisioned.&lt;/p&gt; 
&lt;p&gt;Sunshine!&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or MacOSX system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;You need the following tools to compile OpenWrt, the package names vary between distributions. A complete list with distribution specific packages is found in the &lt;a href=&quot;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&quot;&gt;Build System Setup&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;binutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-dev
make4.1+ perl python3.6+ rsync subversion unzip which
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Related Repositories&lt;/h3&gt; 
&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the OpenWrt package manager called &lt;code&gt;opkg&lt;/code&gt;. If you&#39;re looking to develop the web interface or port packages to OpenWrt, please find the fitting repository below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/luci&quot;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/packages&quot;&gt;OpenWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/routing&quot;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/openwrt/video&quot;&gt;OpenWrt Video&lt;/a&gt;: Packages specifically focused on display servers and clients (Xorg and Wayland).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support Information&lt;/h2&gt; 
&lt;p&gt;For a list of supported devices see the &lt;a href=&quot;https://openwrt.org/supported_devices&quot;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-quick-start/start&quot;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/start&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-developer/start&quot;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/techref/start&quot;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Support Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forum.openwrt.org&quot;&gt;Forum&lt;/a&gt;: For usage, projects, discussions and hardware advise.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://webchat.oftc.net/#openwrt&quot;&gt;Support Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developer Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bugs.openwrt.org&quot;&gt;Bug Reports&lt;/a&gt;: Report bugs in OpenWrt&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lists.openwrt.org/mailman/listinfo/openwrt-devel&quot;&gt;Dev Mailing List&lt;/a&gt;: Send patches&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://webchat.oftc.net/#openwrt-devel&quot;&gt;Dev Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt-devel&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;OpenWrt is licensed under GPL-2.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pr3y/Bruce</title>
      <link>https://github.com/pr3y/Bruce</link>
      <description>&lt;p&gt;Predatory ESP32 Firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/bruce_banner.jpg&quot; alt=&quot;Bruce Main Menu&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;🦈&lt;/span&gt; Bruce&lt;/h1&gt; 
&lt;p&gt;Bruce is meant to be a versatile ESP32 firmware that supports a ton of offensive features focusing on facilitating Red Team operations. It also supports m5stack products and works great with Cardputer, Sticks, M5Cores, T-Decks and T-Embeds.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🏗&lt;/span&gt; How to install&lt;/h2&gt; 
&lt;h3&gt;The easiest way to install Bruce is using our official Web Flasher!&lt;/h3&gt; 
&lt;h3&gt;Check out: &lt;a href=&quot;https://bruce.computer/flasher&quot;&gt;https://bruce.computer/flasher&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can download the latest binary from releases or actions and flash locally using esptool.py&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;esptool.py --port /dev/ttyACM0 write_flash 0x00000 Bruce-&amp;lt;device&amp;gt;.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For m5stack devices&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you already use M5Launcher to manage your m5stack device, you can install it with OTA&lt;/p&gt; 
&lt;p&gt;Or you can burn it directly from the &lt;a href=&quot;https://docs.m5stack.com/en/download&quot;&gt;m5burner tool&lt;/a&gt;, just search for &#39;Bruce&#39; (My official builds will be uploaded by &quot;owner&quot; and have photos.) on the device category you want to and click on burn&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⌨&lt;/span&gt; Discord Server&lt;/h2&gt; 
&lt;p&gt;Contact us in our &lt;a href=&quot;https://discord.gg/WJ9XF9czVT&quot;&gt;Discord Server&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📑&lt;/span&gt; Wiki&lt;/h2&gt; 
&lt;p&gt;For more information on each function supported by Bruce, &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki&quot;&gt;read our wiki here&lt;/a&gt;. Also, &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FAQ&quot;&gt;read our FAQ&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;💻&lt;/span&gt; List of Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;WiFi&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Connect to WiFi&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; WiFi AP&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Disconnect WiFi&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#wifi-atks&quot;&gt;WiFi Atks&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#beacon-spam&quot;&gt;Beacon Spam&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#target-atk&quot;&gt;Target Atk&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Information&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Target Deauth&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; EvilPortal + Deauth&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Deauth Flood (More than one target)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Wardriving&quot;&gt;Wardriving&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#telnet&quot;&gt;TelNet&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#ssh&quot;&gt;SSH&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#raw-sniffer&quot;&gt;RAW Sniffer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#tcp-client&quot;&gt;TCP Client&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#tcp-listener&quot;&gt;TCP Listener&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#dpwo-esp32&quot;&gt;DPWO-ESP32&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&quot;&gt;Evil Portal&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&quot;&gt;Scan Hosts&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/WiFi#wireguard-tunneling&quot;&gt;Wireguard Tunneling&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Brucegotchi 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Pwnagotchi friend&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Pwngrid spam faces &amp;amp; names 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [Optional] DoScreen a very long name and face&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; [Optional] Flood uniq peer identifiers&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;BLE&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/BLE#ble-scan&quot;&gt;BLE Scan&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Bad BLE - Run Ducky scripts, similar to &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;BadUsb&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; BLE Keyboard - Cardputer and T-Deck Only&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; iOS Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Windows Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Samsung Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Android Spam&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spam All&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;RF&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Scan/Copy&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/RF#replay-payloads-like-flipper&quot;&gt;Custom SubGhz&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jammer Full (sends a full squared wave into output)&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Jammer Intermittent (sends PWM signal into output)&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF TX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF RX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF Module 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF433 T/R M5Stack&lt;/li&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/CC1101&quot;&gt;CC1101 (Sub-Ghz)&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RF Frequency&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Replay&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;RFID&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Read tag&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Read 125kHz&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Clone tag&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Write NDEF records&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Amiibolink&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Chameleon&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Write data&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Erase data&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Save file&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Load file&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/RFID#supported-modules&quot;&gt;RFID Module&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; PN532&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Emulate tag&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;IR&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; TV-B-Gone&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; IR Receiver&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/IR#replay-payloads-like-flipper&quot;&gt;Custom IR (NEC, NECext, SIRC, SIRC15, SIRC20, Samsung32, RC5, RC5X, RC6)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Config 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Ir TX Pin&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Ir RX Pin&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;FM&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#play_or_pause_button-broadcast-standard&quot;&gt;Broadcast standard&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#no_entry_sign-broadcast-rerserved&quot;&gt;Broadcast reserved&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#stop_button-broadcast-stop&quot;&gt;Broadcast stop&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#ocean-fm-spectrum&quot;&gt;FM Spectrum&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#car-hijack-ta&quot;&gt;Hijack Traffic Announcements&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/FM#bookmark_tabs-config&quot;&gt;Config&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;NRF24&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/BLE#nrf24-jammer&quot;&gt;NRF24 Jammer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; 2.4G Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Mousejack&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Scripts&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Interpreter&quot;&gt;JavaScript Interpreter&lt;/a&gt; &lt;a href=&quot;https://github.com/justinknight93/Doolittle&quot;&gt;Credits to justinknight93&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Others&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Mic Spectrum&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; QRCodes 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Custom&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; PIX (Brazil bank transfer system)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#sd-card-mngr&quot;&gt;SD Card Mngr&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; View image (jpg)&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; File Info&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Wardriving#how-to-upload&quot;&gt;Wigle Upload&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Play Audio&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; View File&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#littlefs-mngr&quot;&gt;LittleFS Mngr&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#webui&quot;&gt;WebUI&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Server Structure&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Html&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; SDCard Mngr&lt;/li&gt; 
    &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Spiffs Mngr&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Megalodon&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;BADUsb (New features, LittleFS and SDCard)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; USB Keyboard - Cardputer and T-Deck Only&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#openhaystack&quot;&gt;Openhaystack&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#ibutton&quot;&gt;iButton&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#led-control&quot;&gt;LED Control&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Clock&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; RTC Support&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; NTP time adjust&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Manual adjust&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Connect (ESPNOW)&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Send File&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Receive File&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;h2&gt;Config&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Brightness&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Dim Time&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Orientation&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; UI Color&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Boot Sound on/off&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Clock&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Sleep&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Restart&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Specific functions per Device, the ones not mentioned here are available to all.&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Device&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;CC1101&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;NRF24&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Interpreter&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;FM Radio&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;PN532&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Mic&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;BadUSB&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;RGB Led&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Speaker&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Fuel Guage&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;LITE_MODE&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cardputer-kit-w-m5stamps&quot;&gt;M5Stack Cardputer&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;NS4168&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stickc-plus2-esp32-mini-iot-development-kit&quot;&gt;M5Stack M5StickC PLUS2&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stickc-plus-esp32-pico-mini-iot-development-kit&quot;&gt;M5Stack M5StickC PLUS&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/basic-core-iot-development-kit&quot;&gt;M5Stack M5Core BASIC&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Tone&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-core2-esp32-iot-development-kit-v1-1&quot;&gt;M5Stack M5Core2&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cores3-esp32s3-lotdevelopment-kit&quot;&gt;M5Stack M5CoreS3&lt;/a&gt;/&lt;a href=&quot;https://shop.m5stack.com/products/m5stack-cores3-se-iot-controller-w-o-battery-bottom&quot;&gt;SE&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.aliexpress.us/item/3256804774970998.html&quot;&gt;JCZN CYD‑2432S028&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-embed-cc1101&quot;&gt;Lilygo T‑Embed CC1101&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-embed&quot;&gt;Lilygo T‑Embed&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-deck&quot;&gt;Lilygo T‑Deck&lt;/a&gt; (&lt;a href=&quot;https://lilygo.cc/products/t-deck-plus-1&quot;&gt;and pro&lt;/a&gt;)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-display-s3&quot;&gt;Lilygo T-Display-S3&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lilygo.cc/products/t-watch-s3&quot;&gt;Lilygo T-Watch-S3&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;² CYD have a LITE_VERSION version for Launcher Compatibility ¹ Core, CYD and StickCs Bad-USB: &lt;a href=&quot;https://github.com/pr3y/Bruce/wiki/Others#badusb&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;LITE_MODE&lt;/em&gt;: TelNet, SSH, DPWO, WireGuard, ScanHosts, RawSniffer, Brucegotchi, BLEBacon, BLEScan, Interpreter and OpenHaystack are NOT available for M5Launcher Compatibility&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Why and how does it look?&lt;/h2&gt; 
&lt;p&gt;Bruce stems from a keen observation within the community focused on devices like Flipper Zero. While these devices offered a glimpse into the world of offensive security, there was a palpable sense that something more could be achieved without being that overpriced, particularly with the robust and modular hardware ecosystem provided by ESP32 Devices, Lilygo and M5Stack products.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/pic1.png&quot; alt=&quot;Bruce Main Menu&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/core.png&quot; alt=&quot;Bruce on M5Core&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/stick.png&quot; alt=&quot;Bruce on Stick&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/cyd.png&quot; alt=&quot;Bruce on CYD&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Other media can be &lt;a href=&quot;https://raw.githubusercontent.com/pr3y/Bruce/main/media/&quot;&gt;found here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;👏&lt;/span&gt; Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bmorcelli&quot;&gt;@bmorcelli&lt;/a&gt; for new core and a bunch of new features, also porting to many devices!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IncursioHack&quot;&gt;@IncursioHack&lt;/a&gt; for adding RF and RFID modules features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Luidiblu&quot;&gt;@Luidiblu&lt;/a&gt; for logo and UI design assistance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eadmaster&quot;&gt;@eadmaster&lt;/a&gt; for adding a lot of features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rennancockles&quot;&gt;@rennancockles&lt;/a&gt; for a lot of RFID code, refactoring and others features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/7h30th3r0n3&quot;&gt;@7h30th3r0n3&lt;/a&gt; refactoring and a lot of help with WiFi attacks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Tawank&quot;&gt;@Tawank&lt;/a&gt; refactoring interpreter among many other things&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;@pablonymous&lt;/a&gt; new RF functions to read RAW Data&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Smoochiee&lt;/a&gt; for Bruce PCB design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;TH3_KR4K3N&lt;/a&gt; for Stick cplus extender PCB design.&lt;/li&gt; 
 &lt;li&gt;Everyone who contributed in some way to the project, thanks &lt;span&gt;❤️&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🚧&lt;/span&gt; Disclaimer&lt;/h2&gt; 
&lt;p&gt;Bruce is a tool for cyber offensive and red team operations, distributed under the terms of the Affero General Public License (AGPL). It is intended for legal and authorized security testing purposes only. Use of this software for any malicious or unauthorized activities is strictly prohibited. By downloading, installing, or using Bruce, you agree to comply with all applicable laws and regulations. This software is provided free of charge, and we do not accept payments for copies or modifications. The developers of Bruce assume no liability for any misuse of the software. Use at your own risk.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lz4/lz4</title>
      <link>https://github.com/lz4/lz4</link>
      <description>&lt;p&gt;Extremely Fast Compression algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LZ4 - Extremely fast compression&lt;/h1&gt; 
&lt;p&gt;LZ4 is lossless compression algorithm, providing compression speed &amp;gt; 500 MB/s per core, scalable with multi-cores CPU. It features an extremely fast decoder, with speed in multiple GB/s per core, typically reaching RAM speed limits on multi-core systems.&lt;/p&gt; 
&lt;p&gt;Speed can be tuned dynamically, selecting an &quot;acceleration&quot; factor which trades compression ratio for faster speed. On the other end, a high compression derivative, LZ4_HC, is also provided, trading CPU time for improved compression ratio. All versions feature the same decompression speed.&lt;/p&gt; 
&lt;p&gt;LZ4 is also compatible with &lt;a href=&quot;https://github.com/facebook/zstd#the-case-for-small-data-compression&quot;&gt;dictionary compression&lt;/a&gt;, both at &lt;a href=&quot;https://github.com/lz4/lz4/raw/v1.8.3/lib/lz4frame.h#L481&quot;&gt;API&lt;/a&gt; and &lt;a href=&quot;https://github.com/lz4/lz4/raw/v1.8.3/programs/lz4.1.md#operation-modifiers&quot;&gt;CLI&lt;/a&gt; levels. It can ingest any input file as dictionary, though only the final 64KB are used. This capability can be combined with the &lt;a href=&quot;https://github.com/facebook/zstd/raw/v1.3.5/programs/zstd.1.md#dictionary-builder&quot;&gt;Zstandard Dictionary Builder&lt;/a&gt;, in order to drastically improve compression performance on small files.&lt;/p&gt; 
&lt;p&gt;LZ4 library is provided as open-source software using BSD 2-Clause license.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;dev&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://ci.appveyor.com/project/YannCollet/lz4-1lndh&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/github/lz4/lz4?branch=dev&amp;amp;svg=true&quot; alt=&quot;Build status&quot; title=&quot;Windows test suite&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;The benchmark uses &lt;a href=&quot;https://github.com/inikep/lzbench&quot;&gt;lzbench&lt;/a&gt;, from @inikep compiled with GCC v8.2.0 on Linux 64-bits (Ubuntu 4.18.0-17). The reference system uses a Core i7-9700K CPU @ 4.9GHz (w/ turbo boost). Benchmark evaluates the compression of reference &lt;a href=&quot;http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia&quot;&gt;Silesia Corpus&lt;/a&gt; in single-thread mode.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Compressor&lt;/th&gt; 
   &lt;th&gt;Ratio&lt;/th&gt; 
   &lt;th&gt;Compression&lt;/th&gt; 
   &lt;th&gt;Decompression&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;memcpy&lt;/td&gt; 
   &lt;td&gt;1.000&lt;/td&gt; 
   &lt;td&gt;13700 MB/s&lt;/td&gt; 
   &lt;td&gt;13700 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LZ4 default (v1.9.0)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;2.101&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;780 MB/s&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;4970 MB/s&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LZO 2.09&lt;/td&gt; 
   &lt;td&gt;2.108&lt;/td&gt; 
   &lt;td&gt;670 MB/s&lt;/td&gt; 
   &lt;td&gt;860 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;QuickLZ 1.5.0&lt;/td&gt; 
   &lt;td&gt;2.238&lt;/td&gt; 
   &lt;td&gt;575 MB/s&lt;/td&gt; 
   &lt;td&gt;780 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Snappy 1.1.4&lt;/td&gt; 
   &lt;td&gt;2.091&lt;/td&gt; 
   &lt;td&gt;565 MB/s&lt;/td&gt; 
   &lt;td&gt;1950 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;http://www.zstd.net/&quot;&gt;Zstandard&lt;/a&gt; 1.4.0 -1&lt;/td&gt; 
   &lt;td&gt;2.883&lt;/td&gt; 
   &lt;td&gt;515 MB/s&lt;/td&gt; 
   &lt;td&gt;1380 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LZF v3.6&lt;/td&gt; 
   &lt;td&gt;2.073&lt;/td&gt; 
   &lt;td&gt;415 MB/s&lt;/td&gt; 
   &lt;td&gt;910 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;http://www.zlib.net/&quot;&gt;zlib&lt;/a&gt; deflate 1.2.11 -1&lt;/td&gt; 
   &lt;td&gt;2.730&lt;/td&gt; 
   &lt;td&gt;100 MB/s&lt;/td&gt; 
   &lt;td&gt;415 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LZ4 HC -9 (v1.9.0)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;2.721&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;41 MB/s&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;4900 MB/s&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;http://www.zlib.net/&quot;&gt;zlib&lt;/a&gt; deflate 1.2.11 -6&lt;/td&gt; 
   &lt;td&gt;3.099&lt;/td&gt; 
   &lt;td&gt;36 MB/s&lt;/td&gt; 
   &lt;td&gt;445 MB/s&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;LZ4 is also compatible and optimized for x32 mode (&lt;code&gt;-mx32&lt;/code&gt;), for which it provides additional speed performance.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;make
make install     # this command may require root permissions
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;LZ4&#39;s &lt;code&gt;Makefile&lt;/code&gt; supports standard &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html&quot;&gt;Makefile conventions&lt;/a&gt;, including &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;staged installs&lt;/a&gt;, &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Directory-Variables.html&quot;&gt;redirection&lt;/a&gt;, or &lt;a href=&quot;https://www.gnu.org/prep/standards/html_node/Utilities-in-Makefiles.html&quot;&gt;command redefinition&lt;/a&gt;. It is compatible with parallel builds (&lt;code&gt;-j#&lt;/code&gt;).&lt;/p&gt; 
&lt;h3&gt;Building LZ4 - Using vcpkg&lt;/h3&gt; 
&lt;p&gt;You can download and install LZ4 using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh
./vcpkg integrate install
./vcpkg.exe install lz4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The LZ4 port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The raw LZ4 block compression format is detailed within &lt;a href=&quot;https://raw.githubusercontent.com/lz4/lz4/dev/doc/lz4_Block_format.md&quot;&gt;lz4_Block_format&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Arbitrarily long files or data streams are compressed using multiple blocks, for streaming requirements. These blocks are organized into a frame, defined into &lt;a href=&quot;https://raw.githubusercontent.com/lz4/lz4/dev/doc/lz4_Frame_format.md&quot;&gt;lz4_Frame_format&lt;/a&gt;. Interoperable versions of LZ4 must also respect the frame format.&lt;/p&gt; 
&lt;h2&gt;Other source versions&lt;/h2&gt; 
&lt;p&gt;Beyond the C reference source, many contributors have created versions of lz4 in multiple languages (Java, C#, Python, Perl, Ruby, etc.). A list of known source ports is maintained on the &lt;a href=&quot;http://www.lz4.org&quot;&gt;LZ4 Homepage&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Packaging status&lt;/h3&gt; 
&lt;p&gt;Most distributions are bundled with a package manager which allows easy installation of both the &lt;code&gt;liblz4&lt;/code&gt; library and the &lt;code&gt;lz4&lt;/code&gt; command line interface.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/lz4/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/lz4.svg?columns=4&amp;amp;exclude_unsupported=1&quot; alt=&quot;Packaging status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Special Thanks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Takayuki Matsuoka, aka @t-mat, for exceptional first-class support throughout the lifetime of this project&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
